#' @keywords VR ratio weaving traffic volume
#' @seealso \code{\link{W_expwy_wv_nw}}, \code{\link{W_expwy_wv_w}}, \code{\link{appl_expwy_wv}}
#' @examples
#' VR_expwy_wv(V_w = 372, V = 1142)
#' VR_expwy_wv(432, 1449)
VR_expwy_wv <- function(V_w = NULL, V = NULL){
if (V_w > 0 & V > 0 & V_w <= V){
V_w/V
}
else {'Error : [V_w], [V] must be positive. And always [V_w] <= [V]. Please check that.'}
}
#'
#' This function decides the capacity of the weaving section, ramp weave(pcph).
#'     It follows <Table 3-2> in KHCM(2013), p.63-64.
#' @param design_speed Design speed of the main lane(kph). Choose one from: \code{80}, \code{100}, \code{120}
#' @param VR Designed ratio of Weaving traffic flow/Total traffic flow in expressway weaving section(pcph). Choose one from: \code{0.10}, \code{0.20}, \code{0.30}, \code{0.40}
#' @param N Total number of lanes in the weaving section. Choose one from: \code{3}, \code{4}, \code{5}
#' @param L Length of the weaving section(m).
#' @keywords capacity weaving section freeway main line link
#' @export capa_expwy_wv_ramp Capacity of the weaving section, ramp weave(pcph)
#' @examples
capa_expwy_wv_ramp <- function(design_speed = NULL, VR = NULL, L = NULL, N = NULL){
if (design_speed >= 100){
if (VR == 0.10){
if (N == 3){
if (L == 150){cap <- 5100}
else if (L > 150 & L < 300){cap <- 5100 + (100/150) * (L - 150)}
else if (L == 300){cap <- 5200}
else if (L > 300 & L < 450){cap <- 5200 + (200/150) * (L - 300)}
else if (L == 450){cap <- 5400}
else if (L > 450 & L < 600){cap <- 5400 + (100/150) * (L - 450)}
else if (L == 600){cap <- 5500}
else if (L > 600){cap <- 5500 + (100/150) * (L - 600)}
else{cap <- 'Error : [L] must be >= 150. Please check that.'}
}
else if (N == 4){
if (L == 150){cap <- 6900}
else if (L > 150 & L < 300){cap <- 6900 + (200/150) * (L - 150)}
else if (L == 300){cap <- 7100}
else if (L > 300 & L < 450){cap <- 7100 + (200/150) * (L - 300)}
else if (L == 450){cap <- 7300}
else if (L > 450 & L < 600){cap <- 7300 + (200/150) * (L - 450)}
else if (L == 600){cap <- 7500}
else if (L > 600){cap <- 7500 + (200/150) * (L - 600)}
else{cap <- 'Error : [L] must be >= 150. Please check that.'}
}
else if (N == 5){
if (L == 150){cap <- 8600}
else if (L > 150 & L < 300){cap <- 8600 + (300/150) * (L - 150)}
else if (L == 300){cap <- 8900}
else if (L > 300 & L < 450){cap <- 8900 + (300/150) * (L - 300)}
else if (L == 450){cap <- 9200}
else if (L > 450 & L < 600){cap <- 9200 + (100/150) * (L - 450)}
else if (L == 600){cap <- 9300}
else if (L > 600){cap <- 9300 + (100/150) * (L - 600)}
else{cap <- 'Error : [L] must be >= 150. Please check that.'}
}
else {cap <- 'Error : [N] must be one of [3], [4], [5]. Please check that.'}
}
else if (VR == 0.20){
if (N == 3){
if (L == 150){cap <- 5000}
else if (L > 150 & L < 300){cap <- 5000 + (100/150) * (L - 150)}
else if (L == 300){cap <- 5100}
else if (L > 300 & L < 450){cap <- 5100 + (200/150) * (L - 300)}
else if (L == 450){cap <- 5300}
else if (L > 450 & L < 600){cap <- 5300 + (100/150) * (L - 450)}
else if (L == 600){cap <- 5400}
else if (L > 600){cap <- 5400 + (100/150) * (L - 600)}
else{cap <- 'Error : [L] must be >= 150. Please check that.'}
}
else if (N == 4){
if (L == 150){cap <- 6800}
else if (L > 150 & L < 300){cap <- 6800 + (200/150) * (L - 150)}
else if (L == 300){cap <- 7000}
else if (L > 300 & L < 450){cap <- 7000 + (200/150) * (L - 300)}
else if (L == 450){cap <- 7200}
else if (L > 450 & L < 600){cap <- 7200 + (200/150) * (L - 450)}
else if (L == 600){cap <- 7400}
else if (L > 600){cap <- 7400 + (200/150) * (L - 600)}
else{cap <- 'Error : [L] must be >= 150. Please check that.'}
}
else if (N == 5){
if (L == 150){cap <- 8400}
else if (L > 150 & L < 300){cap <- 8400 + (300/150) * (L - 150)}
else if (L == 300){cap <- 8700}
else if (L > 300 & L < 450){cap <- 8700 + (300/150) * (L - 300)}
else if (L == 450){cap <- 9000}
else if (L > 450 & L < 600){cap <- 9000 + (200/150) * (L - 450)}
else if (L == 600){cap <- 9200}
else if (L > 600){cap <- 9200 + (200/150) * (L - 600)}
else{cap <- 'Error : [L] must be >= 150. Please check that.'}
}
else {cap <- 'Error : [N] must be one of [3], [4], [5]. Please check that.'}
}
else if (VR == 0.30){
if (N == 3){
if (L == 150){cap <- 4900}
else if (L > 150 & L < 300){cap <- 4900 + (100/150) * (L - 150)}
else if (L == 300){cap <- 5000}
else if (L > 300 & L < 450){cap <- 5000 + (200/150) * (L - 300)}
else if (L == 450){cap <- 5200}
else if (L > 450 & L < 600){cap <- 5200 + (100/150) * (L - 450)}
else if (L == 600){cap <- 5300}
else if (L > 600){cap <- 5300 + (100/150) * (L - 600)}
else{cap <- 'Error : [L] must be >= 150. Please check that.'}
}
else if (N == 4){
if (L == 150){cap <- 6600}
else if (L > 150 & L < 300){cap <- 6600 + (200/150) * (L - 150)}
else if (L == 300){cap <- 6800}
else if (L > 300 & L < 450){cap <- 6800 + (200/150) * (L - 300)}
else if (L == 450){cap <- 7100}
else if (L > 450 & L < 600){cap <- 7100 + (200/150) * (L - 450)}
else if (L == 600){cap <- 7300}
else if (L > 600){cap <- 7300 + (200/150) * (L - 600)}
else{cap <- 'Error : [L] must be >= 150. Please check that.'}
}
else if (N == 5){
if (L == 150){cap <- 8200}
else if (L > 150 & L < 300){cap <- 8200 + (400/150) * (L - 150)}
else if (L == 300){cap <- 8600}
else if (L > 300 & L < 450){cap <- 8600 + (300/150) * (L - 300)}
else if (L == 450){cap <- 8900}
else if (L > 450 & L < 600){cap <- 8900 + (200/150) * (L - 450)}
else if (L == 600){cap <- 9100}
else if (L > 600){cap <- 9100 + (200/150) * (L - 600)}
else{cap <- 'Error : [L] must be >= 150. Please check that.'}
}
else {cap <- 'Error : [N] must be one of [3], [4], [5]. Please check that.'}
}
else if (VR == 0.40){
if (N == 3){
if (L == 150){cap <- 4800}
else if (L > 150 & L < 300){cap <- 4800 + (100/150) * (L - 150)}
else if (L == 300){cap <- 4900}
else if (L > 300 & L < 450){cap <- 4900 + (200/150) * (L - 300)}
else if (L == 450){cap <- 5100}
else if (L > 450 & L < 600){cap <- 5100 + (100/150) * (L - 450)}
else if (L == 600){cap <- 5200}
else if (L > 600){cap <- 5200 + (100/150) * (L - 600)}
else{cap <- 'Error : [L] must be >= 150. Please check that.'}
}
else if (N == 4){
if (L == 150){cap <- 6500}
else if (L > 150 & L < 300){cap <- 6500 + (200/150) * (L - 150)}
else if (L == 300){cap <- 6700}
else if (L > 300 & L < 450){cap <- 6700 + (300/150) * (L - 300)}
else if (L == 450){cap <- 7000}
else if (L > 450 & L < 600){cap <- 7000 + (200/150) * (L - 450)}
else if (L == 600){cap <- 7200}
else if (L > 600){cap <- 7200 + (200/150) * (L - 600)}
else{cap <- 'Error : [L] must be >= 150. Please check that.'}
}
else if (N == 5){
if (L == 150){cap <- 8100}
else if (L > 150 & L < 300){cap <- 8100 + (300/150) * (L - 150)}
else if (L == 300){cap <- 8400}
else if (L > 300 & L < 450){cap <- 8400 + (400/150) * (L - 300)}
else if (L == 450){cap <- 8800}
else if (L > 450 & L < 600){cap <- 8800 + (400/150) * (L - 450)}
else if (L == 600){cap <- 9000}
else if (L > 600){cap <- 9000 + (200/150) * (L - 600)}
else{cap <- 'Error : [L] must be >= 150. Please check that.'}
}
else {cap <- 'Error : [N] must be one of [3], [4], [5]. Please check that.'}
}
else {cap <- 'Error : [VR] must be one of [0.10], [0.20], [0.30], [0.40]. Please check that.'}
}
else if (design_speed == 80){
if (VR == 0.10){
if (N == 3){
if (L == 150){cap <- 4600}
else if (L > 150 & L < 300){cap <- 4600 + (200/150) * (L - 150)}
else if (L == 300){cap <- 4800}
else if (L > 300 & L < 450){cap <- 4800 + (100/150) * (L - 300)}
else if (L == 450){cap <- 4900}
else if (L > 450 & L < 600){cap <- 4900 + (100/150) * (L - 450)}
else if (L == 600){cap <- 5000}
else if (L > 600){cap <- 5000 + (100/150) * (L - 600)}
else{cap <- 'Error : [L] must be >= 150. Please check that.'}
}
else if (N == 4){
if (L == 150){cap <- 6200}
else if (L > 150 & L < 300){cap <- 6200 + (200/150) * (L - 150)}
else if (L == 300){cap <- 6400}
else if (L > 300 & L < 450){cap <- 6400 + (200/150) * (L - 300)}
else if (L == 450){cap <- 6600}
else if (L > 450 & L < 600){cap <- 6600 + (100/150) * (L - 450)}
else if (L == 600){cap <- 6700}
else if (L > 600){cap <- 6700 + (100/150) * (L - 600)}
else{cap <- 'Error : [L] must be >= 150. Please check that.'}
}
else if (N == 5){
if (L == 150){cap <- 7800}
else if (L > 150 & L < 300){cap <- 7800 + (200/150) * (L - 150)}
else if (L == 300){cap <- 8000}
else if (L > 300 & L < 450){cap <- 8000 + (300/150) * (L - 300)}
else if (L == 450){cap <- 8300}
else if (L > 450 & L < 600){cap <- 8300 + (100/150) * (L - 450)}
else if (L == 600){cap <- 8400}
else if (L > 600){cap <- 8400 + (100/150) * (L - 600)}
else{cap <- 'Error : [L] must be >= 150. Please check that.'}
}
else {cap <- 'Error : [N] must be one of [3], [4], [5]. Please check that.'}
}
else if (VR == 0.20){
if (N == 3){
if (L == 150){cap <- 4500}
else if (L > 150 & L < 300){cap <- 4500 + (200/150) * (L - 150)}
else if (L == 300){cap <- 4700}
else if (L > 300 & L < 450){cap <- 4700 + (100/150) * (L - 300)}
else if (L == 450){cap <- 4800}
else if (L > 450 & L < 600){cap <- 4800 + (100/150) * (L - 450)}
else if (L == 600){cap <- 4900}
else if (L > 600){cap <- 4900 + (100/150) * (L - 600)}
else{cap <- 'Error : [L] must be >= 150. Please check that.'}
}
else if (N == 4){
if (L == 150){cap <- 6100}
else if (L > 150 & L < 300){cap <- 6100 + (200/150) * (L - 150)}
else if (L == 300){cap <- 6300}
else if (L > 300 & L < 450){cap <- 6300 + (200/150) * (L - 300)}
else if (L == 450){cap <- 6500}
else if (L > 450 & L < 600){cap <- 6500 + (100/150) * (L - 450)}
else if (L == 600){cap <- 6600}
else if (L > 600){cap <- 6600 + (100/150) * (L - 600)}
else{cap <- 'Error : [L] must be >= 150. Please check that.'}
}
else if (N == 5){
if (L == 150){cap <- 7700}
else if (L > 150 & L < 300){cap <- 7700 + (200/150) * (L - 150)}
else if (L == 300){cap <- 7900}
else if (L > 300 & L < 450){cap <- 7900 + (300/150) * (L - 300)}
else if (L == 450){cap <- 8200}
else if (L > 450 & L < 600){cap <- 8200 + (100/150) * (L - 450)}
else if (L == 600){cap <- 8300}
else if (L > 600){cap <- 8300 + (100/150) * (L - 600)}
else{cap <- 'Error : [L] must be >= 150. Please check that.'}
}
else {cap <- 'Error : [N] must be one of [3], [4], [5]. Please check that.'}
}
else if (VR == 0.30){
if (N == 3){
if (L == 150){cap <- 4400}
else if (L > 150 & L < 300){cap <- 4400 + (200/150) * (L - 150)}
else if (L == 300){cap <- 4600}
else if (L > 300 & L < 450){cap <- 4600 + (100/150) * (L - 300)}
else if (L == 450){cap <- 4700}
else if (L > 450 & L < 600){cap <- 4700 + (100/150) * (L - 450)}
else if (L == 600){cap <- 4800}
else if (L > 600){cap <- 4800 + (100/150) * (L - 600)}
else{cap <- 'Error : [L] must be >= 150. Please check that.'}
}
else if (N == 4){
if (L == 150){cap <- 5900}
else if (L > 150 & L < 300){cap <- 5900 + (300/150) * (L - 150)}
else if (L == 300){cap <- 6200}
else if (L > 300 & L < 450){cap <- 6200 + (200/150) * (L - 300)}
else if (L == 450){cap <- 6400}
else if (L > 450 & L < 600){cap <- 6400 + (100/150) * (L - 450)}
else if (L == 600){cap <- 6500}
else if (L > 600){cap <- 6500 + (100/150) * (L - 600)}
else{cap <- 'Error : [L] must be >= 150. Please check that.'}
}
else if (N == 5){
if (L == 150){cap <- 7600}
else if (L > 150 & L < 300){cap <- 7600 + (200/150) * (L - 150)}
else if (L == 300){cap <- 7800}
else if (L > 300 & L < 450){cap <- 7800 + (300/150) * (L - 300)}
else if (L == 450){cap <- 8100}
else if (L > 450 & L < 600){cap <- 8100 + (100/150) * (L - 450)}
else if (L == 600){cap <- 8200}
else if (L > 600){cap <- 8200 + (100/150) * (L - 600)}
else{cap <- 'Error : [L] must be >= 150. Please check that.'}
}
else {cap <- 'Error : [N] must be one of [3], [4], [5]. Please check that.'}
}
else if (VR == 0.40){
if (N == 3){
if (L == 150){cap <- 4300}
else if (L > 150 & L < 300){cap <- 4300 + (200/150) * (L - 150)}
else if (L == 300){cap <- 4500}
else if (L > 300 & L < 450){cap <- 4500 + (100/150) * (L - 300)}
else if (L == 450){cap <- 4600}
else if (L > 450 & L < 600){cap <- 4600 + (100/150) * (L - 450)}
else if (L == 600){cap <- 4700}
else if (L > 600){cap <- 4700 + (100/150) * (L - 600)}
else{cap <- 'Error : [L] must be >= 150. Please check that.'}
}
else if (N == 4){
if (L == 150){cap <- 5700}
else if (L > 150 & L < 300){cap <- 5700 + (400/150) * (L - 150)}
else if (L == 300){cap <- 6100}
else if (L > 300 & L < 450){cap <- 6100 + (200/150) * (L - 300)}
else if (L == 450){cap <- 6300}
else if (L > 450 & L < 600){cap <- 6300 + (100/150) * (L - 450)}
else if (L == 600){cap <- 6400}
else if (L > 600){cap <- 6400 + (100/150) * (L - 600)}
else{cap <- 'Error : [L] must be >= 150. Please check that.'}
}
else if (N == 5){
if (L == 150){cap <- 7300}
else if (L > 150 & L < 300){cap <- 7300 + (300/150) * (L - 150)}
else if (L == 300){cap <- 7600}
else if (L > 300 & L < 450){cap <- 7600 + (400/150) * (L - 300)}
else if (L == 450){cap <- 8000}
else if (L > 450 & L < 600){cap <- 8000 + (100/150) * (L - 450)}
else if (L == 600){cap <- 8100}
else if (L > 600){cap <- 8100 + (100/150) * (L - 600)}
else{cap <- 'Error : [L] must be >= 150. Please check that.'}
}
else {cap <- 'Error : [N] must be one of [3], [4], [5]. Please check that.'}
}
else {cap <- 'Error : [VR] must be one of [0.10], [0.20], [0.30], [0.40]. Please check that.'}
}
else {cap <- 'Error : [design_speed] must be one of [80], [100], [120](kph). Please check that.'}
cap
}
capa_expwy_wv_ramp(design_speed = 120, VR = 0.20, L = 550, N = 4)
#' This function decides the applicability of speed formula in expressway weaving section.
#'     It follows definitions in KHCM(2013), p.61-62.
#' @param type Type of weaving section. Choose one from: \code{'ramp'}, \code{'frontage'}
#' @param V_w Weaving traffic volume(pcph)
#' @param V Total traffic volume(pcph).
#' @param N Total number of lanes in the weaving section. Choose one from: \code{3}, \code{4}, \code{5}
#' @keywords applicability speed formula exxpressway weaving section
#' @seealso \code{\link{VR_expwy_wv}}, \code{\link{S_expwy_wv}}, \code{\link{D_expwy_wv}}, \code{\link{LOS_expwy_wv_ramp}}, \code{\link{LOS_expwy_wv_fr}}
#' @export appl_expwy_wv \code{'OK'}, \code{'Warning'}
#' @examples
appl_expwy_wv <- function(V_w = NULL, V = NULL, N = NULL){
VR <- VR_expwy_wv(V_w = V_w, V = V)
if (is.numeric(VR) == TRUE){
if (N == 3){
if (type == 'ramp'){
if (VR <= 0.5 & V/N <= 2000 & V_w <= 2800){res <- 'OK'}
else {res <- 'Warning'}
}
else if (type == 'frontage'){
if (VR <= 0.5 & V_w <= 3000){res <- 'OK'}
else {res <- 'Warning'}
}
else {res <- 'Error : [type] must be one of [ramp] or [frontage]. Please check that.'}
}
else if (N == 4){
if (type == 'ramp'){
if (VR <= 0.45 & V/N <= 2000 & V_w <= 2800){res <- 'OK'}
else {res <- 'Warning'}
}
else if (type == 'frontage'){
if (VR <= 0.45 & V_w <= 3000){res <- 'OK'}
else {res <- 'Warning'}
}
else {res <- 'Error : [type] must be one of [ramp] or [frontage]. Please check that.'}
}
else if (N == 5){
if (type == 'ramp'){
if (VR <= 0.40 & V/N <= 2000 & V_w <= 2800){res <- 'OK'}
else {res <- 'Warning'}
}
else if (type == 'frontage'){
if (VR <= 0.40 & V_w <= 3000){res <- 'OK'}
else {res <- 'Warning'}
}
else {res <- 'Error : [type] must be one of [ramp] or [frontage]. Please check that.'}
}
else {res <- 'Error : [N] must be one of [3], [4], [5]. Please check that.'}
}
else {res <- print(VR)}
res
}
appl_expwy_wv(V_w = 1839, V = 3200, N =4)
#' This function decides the applicability of speed formula in expressway weaving section.
#'     It follows definitions in KHCM(2013), p.61-62.
#' @param type Type of weaving section. Choose one from: \code{'ramp'}, \code{'frontage'}
#' @param V_w Weaving traffic volume(pcph)
#' @param V Total traffic volume(pcph).
#' @param N Total number of lanes in the weaving section. Choose one from: \code{3}, \code{4}, \code{5}
#' @keywords applicability speed formula exxpressway weaving section
#' @seealso \code{\link{VR_expwy_wv}}, \code{\link{S_expwy_wv}}, \code{\link{D_expwy_wv}}, \code{\link{LOS_expwy_wv_ramp}}, \code{\link{LOS_expwy_wv_fr}}
#' @export appl_expwy_wv \code{'OK'}, \code{'Warning'}
#' @examples
appl_expwy_wv <- function(type = NULL, V_w = NULL, V = NULL, N = NULL){
VR <- VR_expwy_wv(V_w = V_w, V = V)
if (is.numeric(VR) == TRUE){
if (N == 3){
if (type == 'ramp'){
if (VR <= 0.5 & V/N <= 2000 & V_w <= 2800){res <- 'OK'}
else {res <- 'Warning'}
}
else if (type == 'frontage'){
if (VR <= 0.5 & V_w <= 3000){res <- 'OK'}
else {res <- 'Warning'}
}
else {res <- 'Error : [type] must be one of [ramp] or [frontage]. Please check that.'}
}
else if (N == 4){
if (type == 'ramp'){
if (VR <= 0.45 & V/N <= 2000 & V_w <= 2800){res <- 'OK'}
else {res <- 'Warning'}
}
else if (type == 'frontage'){
if (VR <= 0.45 & V_w <= 3000){res <- 'OK'}
else {res <- 'Warning'}
}
else {res <- 'Error : [type] must be one of [ramp] or [frontage]. Please check that.'}
}
else if (N == 5){
if (type == 'ramp'){
if (VR <= 0.40 & V/N <= 2000 & V_w <= 2800){res <- 'OK'}
else {res <- 'Warning'}
}
else if (type == 'frontage'){
if (VR <= 0.40 & V_w <= 3000){res <- 'OK'}
else {res <- 'Warning'}
}
else {res <- 'Error : [type] must be one of [ramp] or [frontage]. Please check that.'}
}
else {res <- 'Error : [N] must be one of [3], [4], [5]. Please check that.'}
}
else {res <- print(VR)}
res
}
appl_expwy_wv(type = 'ramp', V_w = 1839, V = 3200, N = 4)
appl_expwy_wv(type = 'frontage', V_w = 1832, V = 2938, N = 3)
appl_expwy_wv(type = 'frontage', V_w = 1832, V = 2738, N = 3)
appl_expwy_wv(type = 'frontage', V_w = 882, V = 2738, N = 3)
#' @param output Type of output capacity. Choose one from : \code{'main'}, \code{'influence_inflow'}, \code{'influence_outflow'}
#' @keywords capacity freeway ramp junction
#' @details The capacity of the highway junction.
#'     The capacity of the connecting path can be divided into the connecting path capacity and the main line capacity.
#'     The capacity of the junction is related to the maximum passing traffic at the point downstream of the upstream branching junction.
#'     This concept is not much different from the analysis concept of the basic highway section.
#'     - Classification section and junction main line traffic volume: At the junction, it means the capacity immediately after merging, and at the classification section just before classification.
#'     - Capacity of influenced area : Inflow traffic volume represents the junction area's impact area capacity, and outflow traffic volume represents the classification area's impact area capacity.
#' @export capa_expwy_rpjt
#' @examples
capa_expwy_rpjt <- function(free_speed = NULL, V = NULL, N = NULL, output = NULL){
if (output == 'main'){
if (free_speed > 110 & free_speed <= 120){
if (N == 2){cap <- 4600}
else if (N == 3){cap <- 6900}
else if (N >= 4){cap <- 2300 * N}
else {cap <- 'Error : [N] must be >= 2. Please check that.'}
}
else if (free_speed > 100 & free_speed <= 110){
if (N == 2){cap <- 4500}
else if (N == 3){cap <- 6750}
else if (N >= 4){cap <- 2250 * N}
else {cap <- 'Error : [N] must be >= 2. Please check that.'}
}
else if (free_speed > 90 & free_speed <= 100){
if (N == 2){cap <- 4400}
else if (N == 3){cap <- 6600}
else if (N >= 4){cap <- 2200 * N}
else {cap <- 'Error : [N] must be >= 2. Please check that.'}
}
else if (free_speed > 0 & free_speed <= 90){
if (N == 2){cap <- 4200}
else if (N == 3){cap <- 6300}
else if (N >= 4){cap <- 2100 * N}
else {cap <- 'Error : [N] must be >= 2. Please check that.'}
}
else {cap <- 'Error : [free_speed] must be positive(kph). Please check that.'}
}
else if (output == 'influence_inflow'){
if (free_speed > 110 & free_speed <= 120){cap <- 4400}
else if (free_speed > 100 & free_speed <= 110){cap <- 4400}
else if (free_speed > 90 & free_speed <= 100){cap <- 4400}
else if (free_speed > 0 & free_speed <= 90){cap <- 4400}
else {cap <- 'Error : [N] must be >= 2. Please check that.'}
}
else if (output == 'influence_outflow'){
if (free_speed > 110 & free_speed <= 120){cap <- 4600}
else if (free_speed > 100 & free_speed <= 110){cap <- 4600}
else if (free_speed > 90 & free_speed <= 100){cap <- 4600}
else if (free_speed > 0 & free_speed <= 90){cap <- 4600}
else {cap <- 'Error : [N] must be >= 2. Please check that.'}
}
else {cap <- 'Error : [output] must be one of [main], [influence_inflow], [influence_outflow]. Please check that.'}
cap
}
capa_expwy_rpjt(free_speed = 87, V = 1834, N = 3, output = 'main')
capa_expwy_rpjt(free_speed = 101, V = 5834, N = 5, output = 'main')
capa_expwy_rpjt(free_speed = 101, V = 3834, N = 5, output = 'main')
capa_expwy_rpjt(free_speed = 101, N = 4, output = 'influence_inflow')
#' Level of Service(LOS) in Expressway-Ramp Junction
#'
#' This function decides Level of Service(LOS) in the expressway-ramp junction.
#'     It follows <Table 4-3> in KHCM(2013), p.86.
#' @param V The traffic volume(pcph)
#' @param density The density of the road(pcpkmpl)
#' @param capacity Capacity(pcph)
#' @export LOS_expwy_rpjt
#' @examples
LOS_expwy_rpjt <- function(V = NULL, density = NULL, capacity = NULL){
if (V > capacity){LOS <- 'F'}
else if (V <= capacity){
if (density >= 0 & density <= 6){LOS <-  'A'}
else if (density > 6 & density <= 12){LOS <- 'B'}
else if (density > 12 & density <= 17){LOS <- 'C'}
else if (density > 17 & density <= 22){LOS <- 'D'}
else if (density > 22){LOS <- 'E'}
else {LOS <- 'Error : [density] must be positive(pcpkmpl). Please check that.'}
}
else {LOS <- 'Error : [V], [capacity] must be positive(pcph). Please check that.'}
LOS
}
LOS_expwy_rpjt(density = 24.32, V = 3921, capacity = 4400)
LOS_expwy_rpjt(32.32, 4821, 3933)
LOS_expwy_rpjt(32.32, 4821, 2000)
LOS_expwy_rpjt(density = 32.32, V = 4821, capacity = 2000)
