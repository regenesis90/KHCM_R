}
else if (landform == 'specific_slope'){
if (is.null(P_hv) == FALSE){
if (P_hv >= 0 & P_hv <= 1){p <- P_hv}
else {
p <- NULL
f <- 'Error : [P_hv] must be >= 0 and <= 1. Please check that.'}
}
else {
if (P_T1 >= 0 & P_T2 >= 0 & P_T3 >= 0 & (P_T1 + P_T2 + P_T3) <= 1){p <- P_T1+P_T2+P_T3}
else {
p <- NULL
f <- 'Error :  + [P_T2] + [P_T3] must be >= 0 and <= 1. And each one must be >= 0. Please check that.'}
}
if (is.null(p) == FALSE & slope >= 0 & slope_length >= 0){
ehv <- E_hv(P_hv = p * 100, slope = slope, slope_length = slope_length)
if (is.numeric(ehv) == TRUE){f <- 1/(1 + p * (ehv - 1))}
else {f <- 'Error : Please check [P_hv], [slope] and [slope_length] values.'}
}
else {f <- 'Error : [P_hv] must be >= 0 and <= 1. Please check that.'}
}
else {f <- 'Error : [landform] must be one of them : [flatland], [hill], [mountain], [specific_slope]. Please check that.'}
print(p)
print(P_T1 + P_T2 + P_T3)
print(ehv)
print(f)
}
f_hv(landform = 'specific_slope', P_T1 = 0.2, P_T2 = 0.1, P_T3 = 0.3, slope = 4.4, slope_length = 10)
#' @param P_T3 The ratio of large heavy vehicle composition(Semi trailer or full trailer)
#' @param P_hv The ratio of total heavy vehicles.
#' @param slope Slope gradient(%)
#' @param slope_length The length of the slope(km)
#' @export f_hv Heavy Vehicle Factors(f_hv)
#' @examples
#' f_hv(landform = 'flatland', P_T1 = 0.12, P_T2 = 0.08, P_T3 = 0.11)
#' f_hv('hill', 0.21, 0.09, 0.04)
#' f_hv('mountain', 0.2, 0.1, 0.05)
#' f_hv(landform = 'specific_slope', P_hv = 0.38, slope = 3, slope_length = 4)
f_hv <- function(landform = NULL, P_T1 = 0, P_T2 = 0, P_T3 = 0, P_hv = 0, slope = 0, slope_length = 0){
if (landform == 'flatland'){
if (P_T1 >= 0 & P_T1 <= 1 & P_T2 >= 0 & P_T2 <= 1 & P_T3 >= 0 & P_T3 <= 1){
f <- 1/(1 + P_T1 * (1.0 - 1) + P_T2 * (1.5 - 1) + P_T3 * (2.0 - 1))
}
else {
f <- 'Error : [P_T1], [P_T2], [P_T3] must be >= 0 and <= 1. And [P_T1] + [P_T2] + [P_T3] must be <= 1. Please check that.'
}
}
else if (landform == 'hill'){
if (P_T1 >= 0 & P_T2 >= 0 & P_T3 >= 0 & (P_T1 + P_T2 + P_T3) <= 1){
f <- 1/(1 + P_T1 * (1.2 - 1) + P_T2 * (3.0 - 1) + P_T3 * (3.0 - 1))
}
else {
f <- 'Error : [P_T1], [P_T2], [P_T3] must be >= 0 and <= 1. And [P_T1] + [P_T2] + [P_T3] must be <= 1. Please check that.'
}
}
else if (landform == 'mountain'){
if (P_T1 >= 0 & P_T2 >= 0 & P_T3 >= 0 & (P_T1 + P_T2 + P_T3) <= 1){
f <- 1/(1 + P_T1 * (1.5 - 1) + P_T2 * (5.0 - 1) + P_T3 * (5.0 - 1))
}
else {
f <- 'Error : [P_T1], [P_T2], [P_T3] must be >= 0 and <= 1. And [P_T1] + [P_T2] + [P_T3] must be <= 1. Please check that.'
}
}
else if (landform == 'specific_slope'){
if (is.null(P_hv) == FALSE){
if (P_hv >= 0 & P_hv <= 1){p <- P_hv}
else {
p <- NULL
f <- 'Error : [P_hv] must be >= 0 and <= 1. Please check that.'}
}
else {
if (P_T1 >= 0 & P_T2 >= 0 & P_T3 >= 0 & (P_T1 + P_T2 + P_T3) <= 1){p <- (P_T1 + P_T2 + P_T3)}
else {
p <- NULL
f <- 'Error :  + [P_T2] + [P_T3] must be >= 0 and <= 1. And each one must be >= 0. Please check that.'}
}
if (is.null(p) == FALSE & slope >= 0 & slope_length >= 0){
ehv <- E_hv(P_hv = p * 100, slope = slope, slope_length = slope_length)
if (is.numeric(ehv) == TRUE){f <- 1/(1 + p * (ehv - 1))}
else {f <- 'Error : Please check [P_hv], [slope] and [slope_length] values.'}
}
else {f <- 'Error : [P_hv] must be >= 0 and <= 1. Please check that.'}
}
else {f <- 'Error : [landform] must be one of them : [flatland], [hill], [mountain], [specific_slope]. Please check that.'}
print(p)
print(P_T1 + P_T2 + P_T3)
print(ehv)
print(f)
}
f_hv(landform = 'specific_slope', P_hv = 0.38, slope = 3, slope_length = 4)
f_hv(landform = 'specific_slope', P_T1 = 0.2, P_T2 = 0.1, P_T3 = 0.3, slope = 4.4, slope_length = 10)
#' @param P_T3 The ratio of large heavy vehicle composition(Semi trailer or full trailer)
#' @param P_hv The ratio of total heavy vehicles.
#' @param slope Slope gradient(%)
#' @param slope_length The length of the slope(km)
#' @export f_hv Heavy Vehicle Factors(f_hv)
#' @examples
#' f_hv(landform = 'flatland', P_T1 = 0.12, P_T2 = 0.08, P_T3 = 0.11)
#' f_hv('hill', 0.21, 0.09, 0.04)
#' f_hv('mountain', 0.2, 0.1, 0.05)
#' f_hv(landform = 'specific_slope', P_hv = 0.38, slope = 3, slope_length = 4)
f_hv <- function(landform = NULL, P_T1 = 0, P_T2 = 0, P_T3 = 0, P_hv = 0, slope = 0, slope_length = 0){
if (landform == 'flatland'){
if (P_T1 >= 0 & P_T1 <= 1 & P_T2 >= 0 & P_T2 <= 1 & P_T3 >= 0 & P_T3 <= 1){
f <- 1/(1 + P_T1 * (1.0 - 1) + P_T2 * (1.5 - 1) + P_T3 * (2.0 - 1))
}
else {
f <- 'Error : [P_T1], [P_T2], [P_T3] must be >= 0 and <= 1. And [P_T1] + [P_T2] + [P_T3] must be <= 1. Please check that.'
}
}
else if (landform == 'hill'){
if (P_T1 >= 0 & P_T2 >= 0 & P_T3 >= 0 & (P_T1 + P_T2 + P_T3) <= 1){
f <- 1/(1 + P_T1 * (1.2 - 1) + P_T2 * (3.0 - 1) + P_T3 * (3.0 - 1))
}
else {
f <- 'Error : [P_T1], [P_T2], [P_T3] must be >= 0 and <= 1. And [P_T1] + [P_T2] + [P_T3] must be <= 1. Please check that.'
}
}
else if (landform == 'mountain'){
if (P_T1 >= 0 & P_T2 >= 0 & P_T3 >= 0 & (P_T1 + P_T2 + P_T3) <= 1){
f <- 1/(1 + P_T1 * (1.5 - 1) + P_T2 * (5.0 - 1) + P_T3 * (5.0 - 1))
}
else {
f <- 'Error : [P_T1], [P_T2], [P_T3] must be >= 0 and <= 1. And [P_T1] + [P_T2] + [P_T3] must be <= 1. Please check that.'
}
}
else if (landform == 'specific_slope'){
if (is.null(P_hv) == FALSE){
if (P_hv >= 0 & P_hv <= 1){p <- P_hv}
else {
p <- NULL
f <- 'Error : [P_hv] must be >= 0 and <= 1. Please check that.'}
}
else {
if (P_T1 >= 0 & P_T2 >= 0 & P_T3 >= 0 & (P_T1 + P_T2 + P_T3) <= 1){
p <- (P_T1 + P_T2 + P_T3)
}
else {
p <- NULL
f <- 'Error : [P_T1] + [P_T2] + [P_T3] must be >= 0 and <= 1. And each one must be >= 0. Please check that.'}
}
if (is.null(p) == FALSE & slope >= 0 & slope_length >= 0){
ehv <- E_hv(P_hv = p * 100, slope = slope, slope_length = slope_length)
if (is.numeric(ehv) == TRUE){f <- 1/(1 + p * (ehv - 1))}
else {f <- 'Error : Please check [P_hv], [slope] and [slope_length] values.'}
}
else {f <- 'Error : [P_hv] must be >= 0 and <= 1. Please check that.'}
}
else {f <- 'Error : [landform] must be one of them : [flatland], [hill], [mountain], [specific_slope]. Please check that.'}
print(p)
print(P_T1 + P_T2 + P_T3)
print(ehv)
print(f)
}
f_hv(landform = 'specific_slope', P_hv = 0.38, slope = 3, slope_length = 4)
f_hv(landform = 'specific_slope', P_T1 = 0.2, P_T2 = 0.1, P_T3 = 0.3, slope = 4.4, slope_length = 10)
f_hv(landform = 'specific_slope', P_hv = 0.38, slope = 3, slope_length = 4)
f_hv(landform = 'specific_slope', P_T1 = 0.2, P_T2 = 0.1, P_T3 = 0.3, slope = 4.4, slope_length = 10)
#' @param P_T3 The ratio of large heavy vehicle composition(Semi trailer or full trailer)
#' @param P_hv The ratio of total heavy vehicles.
#' @param slope Slope gradient(%)
#' @param slope_length The length of the slope(km)
#' @export f_hv Heavy Vehicle Factors(f_hv)
#' @examples
#' f_hv(landform = 'flatland', P_T1 = 0.12, P_T2 = 0.08, P_T3 = 0.11)
#' f_hv('hill', 0.21, 0.09, 0.04)
#' f_hv('mountain', 0.2, 0.1, 0.05)
#' f_hv(landform = 'specific_slope', P_hv = 0.38, slope = 3, slope_length = 4)
f_hv <- function(landform = NULL, P_T1 = 0, P_T2 = 0, P_T3 = 0, P_hv = 0, slope = 0, slope_length = 0){
if (landform == 'flatland'){
if (P_T1 >= 0 & P_T1 <= 1 & P_T2 >= 0 & P_T2 <= 1 & P_T3 >= 0 & P_T3 <= 1){
f <- 1/(1 + P_T1 * (1.0 - 1) + P_T2 * (1.5 - 1) + P_T3 * (2.0 - 1))
}
else {
f <- 'Error : [P_T1], [P_T2], [P_T3] must be >= 0 and <= 1. And [P_T1] + [P_T2] + [P_T3] must be <= 1. Please check that.'
}
}
else if (landform == 'hill'){
if (P_T1 >= 0 & P_T2 >= 0 & P_T3 >= 0 & (P_T1 + P_T2 + P_T3) <= 1){
f <- 1/(1 + P_T1 * (1.2 - 1) + P_T2 * (3.0 - 1) + P_T3 * (3.0 - 1))
}
else {
f <- 'Error : [P_T1], [P_T2], [P_T3] must be >= 0 and <= 1. And [P_T1] + [P_T2] + [P_T3] must be <= 1. Please check that.'
}
}
else if (landform == 'mountain'){
if (P_T1 >= 0 & P_T2 >= 0 & P_T3 >= 0 & (P_T1 + P_T2 + P_T3) <= 1){
f <- 1/(1 + P_T1 * (1.5 - 1) + P_T2 * (5.0 - 1) + P_T3 * (5.0 - 1))
}
else {
f <- 'Error : [P_T1], [P_T2], [P_T3] must be >= 0 and <= 1. And [P_T1] + [P_T2] + [P_T3] must be <= 1. Please check that.'
}
}
else if (landform == 'specific_slope'){
if (is.null(P_hv) == FALSE){
if (P_hv >= 0 & P_hv <= 1){p <- P_hv}
else {
p <- NULL
f <- 'Error : [P_hv] must be >= 0 and <= 1. Please check that.'}
}
else {
if (P_T1 >= 0 & P_T2 >= 0 & P_T3 >= 0 & (P_T1 + P_T2 + P_T3) <= 1){
p <- (P_T1 + P_T2 + P_T3)
}
else {
p <- NULL
f <- 'Error : [P_T1] + [P_T2] + [P_T3] must be >= 0 and <= 1. And each one must be >= 0. Please check that.'
}
}
if (is.null(p) == FALSE & slope >= 0 & slope_length >= 0){
ehv <- E_hv(P_hv = p * 100, slope = slope, slope_length = slope_length)
if (is.numeric(ehv) == TRUE){f <- 1/(1 + p * (ehv - 1))}
else {f <- 'Error : Please check [P_hv], [slope] and [slope_length] values.'}
}
else {f <- 'Error : [P_hv] must be >= 0 and <= 1. Please check that.'}
}
else {f <- 'Error : [landform] must be one of them : [flatland], [hill], [mountain], [specific_slope]. Please check that.'}
f
}
#' @param P_T3 The ratio of large heavy vehicle composition(Semi trailer or full trailer)
#' @param P_hv The ratio of total heavy vehicles.
#' @param slope Slope gradient(%)
#' @param slope_length The length of the slope(km)
#' @export f_hv Heavy Vehicle Factors(f_hv)
#' @examples
#' f_hv(landform = 'flatland', P_T1 = 0.12, P_T2 = 0.08, P_T3 = 0.11)
#' f_hv('hill', 0.21, 0.09, 0.04)
#' f_hv('mountain', 0.2, 0.1, 0.05)
#' f_hv(landform = 'specific_slope', P_hv = 0.38, slope = 3, slope_length = 4)
f_hv <- function(landform = NULL, P_T1 = 0, P_T2 = 0, P_T3 = 0, P_hv = 0, slope = 0, slope_length = 0){
if (landform == 'flatland'){
if (P_T1 >= 0 & P_T1 <= 1 & P_T2 >= 0 & P_T2 <= 1 & P_T3 >= 0 & P_T3 <= 1){
f <- 1/(1 + P_T1 * (1.0 - 1) + P_T2 * (1.5 - 1) + P_T3 * (2.0 - 1))
}
else {
f <- 'Error : [P_T1], [P_T2], [P_T3] must be >= 0 and <= 1. And [P_T1] + [P_T2] + [P_T3] must be <= 1. Please check that.'
}
}
else if (landform == 'hill'){
if (P_T1 >= 0 & P_T2 >= 0 & P_T3 >= 0 & (P_T1 + P_T2 + P_T3) <= 1){
f <- 1/(1 + P_T1 * (1.2 - 1) + P_T2 * (3.0 - 1) + P_T3 * (3.0 - 1))
}
else {
f <- 'Error : [P_T1], [P_T2], [P_T3] must be >= 0 and <= 1. And [P_T1] + [P_T2] + [P_T3] must be <= 1. Please check that.'
}
}
else if (landform == 'mountain'){
if (P_T1 >= 0 & P_T2 >= 0 & P_T3 >= 0 & (P_T1 + P_T2 + P_T3) <= 1){
f <- 1/(1 + P_T1 * (1.5 - 1) + P_T2 * (5.0 - 1) + P_T3 * (5.0 - 1))
}
else {
f <- 'Error : [P_T1], [P_T2], [P_T3] must be >= 0 and <= 1. And [P_T1] + [P_T2] + [P_T3] must be <= 1. Please check that.'
}
}
else if (landform == 'specific_slope'){
if (is.null(P_hv) == FALSE){
if (P_hv >= 0 & P_hv <= 1){p <- P_hv}
else {
p <- NULL
f <- 'Error : [P_hv] must be >= 0 and <= 1. Please check that.'}
}
else {
if (P_T1 >= 0 & P_T2 >= 0 & P_T3 >= 0 & (P_T1 + P_T2 + P_T3) <= 1){
p <- (P_T1 + P_T2 + P_T3)
}
else {
p <- NULL
f <- 'Error : [P_T1] + [P_T2] + [P_T3] must be >= 0 and <= 1. And each one must be >= 0. Please check that.'
}
}
print(p)
if (is.null(p) == FALSE & slope >= 0 & slope_length >= 0){
ehv <- E_hv(P_hv = p * 100, slope = slope, slope_length = slope_length)
print(ehv)
if (is.numeric(ehv) == TRUE){f <- 1/(1 + p * (ehv - 1))}
else {f <- 'Error : Please check [P_hv], [slope] and [slope_length] values.'}
}
else {f <- 'Error : [P_hv] must be >= 0 and <= 1. Please check that.'}
}
else {f <- 'Error : [landform] must be one of them : [flatland], [hill], [mountain], [specific_slope]. Please check that.'}
f
}
f_hv(landform = 'specific_slope', P_hv = 0.38, slope = 3, slope_length = 4)
f_hv(landform = 'specific_slope', P_T1 = 0.2, P_T2 = 0.1, P_T3 = 0.3, slope = 4.4, slope_length = 10)
#' @param P_T3 The ratio of large heavy vehicle composition(Semi trailer or full trailer)
#' @param P_hv The ratio of total heavy vehicles.
#' @param slope Slope gradient(%)
#' @param slope_length The length of the slope(km)
#' @export f_hv Heavy Vehicle Factors(f_hv)
#' @examples
#' f_hv(landform = 'flatland', P_T1 = 0.12, P_T2 = 0.08, P_T3 = 0.11)
#' f_hv('hill', 0.21, 0.09, 0.04)
#' f_hv('mountain', 0.2, 0.1, 0.05)
#' f_hv(landform = 'specific_slope', P_hv = 0.38, slope = 3, slope_length = 4)
f_hv <- function(landform = NULL, P_T1 = NULL, P_T2 = NULL, P_T3 = NULL, P_hv = NULL, slope = NULL, slope_length = NULL){
if (landform == 'flatland'){
if (P_T1 >= 0 & P_T1 <= 1 & P_T2 >= 0 & P_T2 <= 1 & P_T3 >= 0 & P_T3 <= 1){
f <- 1/(1 + P_T1 * (1.0 - 1) + P_T2 * (1.5 - 1) + P_T3 * (2.0 - 1))
}
else {
f <- 'Error : [P_T1], [P_T2], [P_T3] must be >= 0 and <= 1. And [P_T1] + [P_T2] + [P_T3] must be <= 1. Please check that.'
}
}
else if (landform == 'hill'){
if (P_T1 >= 0 & P_T2 >= 0 & P_T3 >= 0 & (P_T1 + P_T2 + P_T3) <= 1){
f <- 1/(1 + P_T1 * (1.2 - 1) + P_T2 * (3.0 - 1) + P_T3 * (3.0 - 1))
}
else {
f <- 'Error : [P_T1], [P_T2], [P_T3] must be >= 0 and <= 1. And [P_T1] + [P_T2] + [P_T3] must be <= 1. Please check that.'
}
}
else if (landform == 'mountain'){
if (P_T1 >= 0 & P_T2 >= 0 & P_T3 >= 0 & (P_T1 + P_T2 + P_T3) <= 1){
f <- 1/(1 + P_T1 * (1.5 - 1) + P_T2 * (5.0 - 1) + P_T3 * (5.0 - 1))
}
else {
f <- 'Error : [P_T1], [P_T2], [P_T3] must be >= 0 and <= 1. And [P_T1] + [P_T2] + [P_T3] must be <= 1. Please check that.'
}
}
else if (landform == 'specific_slope'){
if (is.null(P_hv) == FALSE){
if (P_hv >= 0 & P_hv <= 1){p <- P_hv}
else {
p <- NULL
f <- 'Error : [P_hv] must be >= 0 and <= 1. Please check that.'}
}
else {
if (P_T1 >= 0 & P_T2 >= 0 & P_T3 >= 0 & (P_T1 + P_T2 + P_T3) <= 1){
p <- (P_T1 + P_T2 + P_T3)
}
else {
p <- NULL
f <- 'Error : [P_T1] + [P_T2] + [P_T3] must be >= 0 and <= 1. And each one must be >= 0. Please check that.'
}
}
print(p)
if (is.null(p) == FALSE & slope >= 0 & slope_length >= 0){
ehv <- E_hv(P_hv = p * 100, slope = slope, slope_length = slope_length)
print(ehv)
if (is.numeric(ehv) == TRUE){f <- 1/(1 + p * (ehv - 1))}
else {f <- 'Error : Please check [P_hv], [slope] and [slope_length] values.'}
}
else {f <- 'Error : [P_hv] must be >= 0 and <= 1. Please check that.'}
}
else {f <- 'Error : [landform] must be one of them : [flatland], [hill], [mountain], [specific_slope]. Please check that.'}
f
}
f_hv(landform = 'specific_slope', P_hv = 0.38, slope = 3, slope_length = 4)
f_hv(landform = 'specific_slope', P_T1 = 0.2, P_T2 = 0.1, P_T3 = 0.3, slope = 4.4, slope_length = 10)
document()
library(roxygen2)
library(devtools)
document()
#'     - Protective fences and median barriers that do not significantly affect the driver's traffic are not usually considered obstacles.
#'     - It is calculated based on the basic conditions of a road pole of 3.5m or more and a side clearance width of 1.5m or more.
#'     - **obs** :
#'         - \code{'one_side'} : In general, most (expressway) roads with a median in the form of a concrete barrier are applicable.
#'         - \code{'both_sides'} : When there are obstacles on both sides: Applies when a median other than a concrete barrier is installed, or when a median is not installed (center line marked). If the center line is double-tracked or spaced apart, the counter-traffic flow can be considered as an obstacle.
#' @export f_w_expwy_basic
#' @seealso
#' @examples
#' f_w_expwy_basic(obs = 'one_side', side_clearance = 1.4, lane = 8, lane_width = 3.1)
#' f_w_expwy_basic(obs = 'both_sides', side_clearance = 1, lane = 8, lane_width = 3)
f_w_expwy_basic <- function(obs = NULL, side_clearance = NULL, lane = NULL, lane_width = NULL){
if (obs == "one_side"){
if (side_clearance >= 0 & side_clearance < 0.5){
if (lane == 4){
if (lane_width >= 3.5){factor <- 0.90}
else if (lane_width >= 3.25 & lane_width < 3.5){factor <- 0.87}
else if (lane_width >= 3.00 & lane_width < 3.25){factor <- 0.82}
else if (lane_width >= 2.75 & lane_width < 3.00){factor <- 0.73}
else {factor <- 'Error : [lane_width] must be eqal to or more than 2.75. Please check that'}
}
else if (lane >= 6){
if (lane_width >= 3.5){factor <- 0.94}
else if (lane_width >= 3.25 & lane_width < 3.5){factor <- 0.91}
else if (lane_width >= 3.00 & lane_width < 3.25){factor <- 0.85}
else if (lane_width >= 2.75 & lane_width < 3.00){factor <- 0.74}
else {factor <- 'Error : [lane_width] must be eqal to or more than 2.75. Please check that'}
}
else {factor <- 'Error : [lane] must be 4 or 6 or more. Please check that.'}
}
else if (side_clearance >= 0.5 & side_clearance < 1.0){
if (lane == 4){
if (lane_width >= 3.5){factor <- 0.97}
else if (lane_width >= 3.25 & lane_width < 3.5){factor <- 0.94}
else if (lane_width >= 3.00 & lane_width < 3.25){factor <- 0.88}
else if (lane_width >= 2.75 & lane_width < 3.00){factor <- 0.79}
else {factor <- 'Error : [lane_width] must be eqal to or more than 2.75. Please check that'}
}
else if (lane >= 6){
if (lane_width >= 3.5){factor <- 0.97}
else if (lane_width >= 3.25 & lane_width < 3.5){factor <- 0.93}
else if (lane_width >= 3.00 & lane_width < 3.25){factor <- 0.87}
else if (lane_width >= 2.75 & lane_width < 3.00){factor <- 0.76}
else {factor <- 'Error : [lane_width] must be eqal to or more than 2.75. Please check that'}
}
else {factor <- 'Error : [lane] must be 4 or 6 or more. Please check that.'}
}
else if (side_clearance >= 1.0 & side_clearance < 1.5){
if (lane == 4){
if (lane_width >= 3.5){factor <- 0.98}
else if (lane_width >= 3.25 & lane_width < 3.5){factor <- 0.95}
else if (lane_width >= 3.00 & lane_width < 3.25){factor <- 0.89}
else if (lane_width >= 2.75 & lane_width < 3.00){factor <- 0.79}
else {factor <- 'Error : [lane_width] must be eqal to or more than 2.75. Please check that'}
}
else if (lane >= 6){
if (lane_width >= 3.5){factor <- 0.98}
else if (lane_width >= 3.25 & lane_width < 3.5){factor <- 0.94}
else if (lane_width >= 3.00 & lane_width < 3.25){factor <- 0.87}
else if (lane_width >= 2.75 & lane_width < 3.00){factor <- 0.76}
else {factor <- 'Error : [lane_width] must be eqal to or more than 2.75. Please check that'}
}
else {factor <- 'Error : [lane] must be 4 or 6 or more. Please check that.'}
}
else if (side_clearance >= 1.5){
if (lane == 4){
if (lane_width >= 3.5){factor <- 1.00}
else if (lane_width >= 3.25 & lane_width < 3.5){factor <- 0.96}
else if (lane_width >= 3.00 & lane_width < 3.25){factor <- 0.90}
else if (lane_width >= 2.75 & lane_width < 3.00){factor <- 0.80}
else {factor <- 'Error : [lane_width] must be eqal to or more than 2.75. Please check that'}
}
else if (lane >= 6){
if (lane_width >= 3.5){factor <- 1.00}
else if (lane_width >= 3.25 & lane_width < 3.5){factor <- 0.95}
else if (lane_width >= 3.00 & lane_width < 3.25){factor <- 0.88}
else if (lane_width >= 2.75 & lane_width < 3.00){factor <- 0.77}
else {factor <- 'Error : [lane_width] must be eqal to or more than 2.75. Please check that'}
}
else {factor <- 'Error : [lane] must be 4 or 6 or more. Please check that.'}
}
else {factor <- 'Error : [side_clearance] must be >= 0. Please check that.'}
}
else if (obs == "both_sides"){
if (side_clearance >= 0 & side_clearance < 0.5){
if (lane == 4){
if (lane_width >= 3.5){factor <- 0.81}
else if (lane_width >= 3.25 & lane_width < 3.5){factor <- 0.79}
else if (lane_width >= 3.00 & lane_width < 3.25){factor <- 0.74}
else if (lane_width >= 2.75 & lane_width < 3.00){factor <- 0.66}
else {factor <- 'Error : [lane_width] must be eqal to or more than 2.75. Please check that'}
}
else if (lane >= 6){
if (lane_width >= 3.5){factor <- 0.91}
else if (lane_width >= 3.25 & lane_width < 3.5){factor <- 0.87}
else if (lane_width >= 3.00 & lane_width < 3.25){factor <- 0.81}
else if (lane_width >= 2.75 & lane_width < 3.00){factor <- 0.70}
else {factor <- 'Error : [lane_width] must be eqal to or more than 2.75. Please check that'}
}
else {factor <- 'Error : [lane] must be 4 or 6 or more. Please check that.'}
}
else if (side_clearance >= 0.5 & side_clearance < 1.0){
if (lane == 4){
if (lane_width >= 3.5){factor <- 0.94}
else if (lane_width >= 3.25 & lane_width < 3.5){factor <- 0.91}
else if (lane_width >= 3.00 & lane_width < 3.25){factor <- 0.86}
else if (lane_width >= 2.75 & lane_width < 3.00){factor <- 0.76}
else {factor <- 'Error : [lane_width] must be eqal to or more than 2.75. Please check that'}
}
else if (lane >= 6){
if (lane_width >= 3.5){factor <- 0.96}
if (lane_width >= 3.25 & lane_width < 3.5){factor <- 0.92}
if (lane_width >= 3.00 & lane_width < 3.25){factor <- 0.85}
if (lane_width >= 2.75 & lane_width < 3.00){factor <- 0.75}
else {factor <- 'Error : [lane_width] must be eqal to or more than 2.75. Please check that'}
}
else {factor <- 'Error : [lane] must be 4 or 6 or more. Please check that.'}
}
else if (side_clearance >= 1.0 & side_clearance < 1.5){
if (lane == 4){
if (lane_width >= 3.5){factor <- 0.96}
else if (lane_width >= 3.25 & lane_width < 3.5){factor <- 0.93}
else if (lane_width >= 3.00 & lane_width < 3.25){factor <- 0.87}
else if (lane_width >= 2.75 & lane_width < 3.00){factor <- 0.77}
else {factor <- 'Error : [lane_width] must be eqal to or more than 2.75. Please check that'}
}
else if (lane >= 6){
if (lane_width >= 3.5){factor <- 0.97}
else if (lane_width >= 3.25 & lane_width < 3.5){factor <- 0.93}
else if (lane_width >= 3.00 & lane_width < 3.25){factor <- 0.86}
else if (lane_width >= 2.75 & lane_width < 3.00){factor <- 0.76}
else {factor <- 'Error : [lane_width] must be eqal to or more than 2.75. Please check that'}
}
else {factor <- 'Error : [lane] must be 4 or 6 or more. Please check that.'}
}
else if (side_clearance >= 1.5){
if (lane == 4){
if (lane_width >= 3.5){factor <- 0.99}
else if (lane_width >= 3.25 & lane_width < 3.5){factor <- 0.96}
else if (lane_width >= 3.00 & lane_width < 3.25){factor <- 0.90}
else if (lane_width >= 2.75 & lane_width < 3.00){factor <- 0.80}
else {factor <- 'Error : [lane_width] must be eqal to or more than 2.75. Please check that'}
}
else if (lane >= 6){
if (lane_width >= 3.5){factor <- 0.99}
else if (lane_width >= 3.25 & lane_width < 3.5){factor <- 0.95}
else if (lane_width >= 3.00 & lane_width < 3.25){factor <- 0.88}
else if (lane_width >= 2.75 & lane_width < 3.00){factor <- 0.77}
else {factor <- 'Error : [lane_width] must be eqal to or more than 2.75. Please check that'}
}
else {factor <- 'Error : [lane] must be 4 or 6 or more. Please check that.'}
}
else {factor <- 'Error : [side_clearance] must be >= 0. Please check that.'}
}
else{factor <- 'Error : [obs] must be one of [one_side] and [both_sides]. Please check that.'}
factor
}
f_w_expwy_basic(obs = 'one_side', side_clearance = 1.4, lane = 8, lane_width = 3.1)
f_w_expwy_basic(obs = 'both_sides', side_clearance = 1, lane = 8, lane_width = 3)
f_w_expwy_basic('both_sides', 1, 8, 3)
