#' @keywords Average Travel Speed ATS 2-lane Road
#' @export ATS_2_i_2l Average travel speed in type1 2-lane road, i section(kph)
#' @seealso \code{\link{ATS_1_i_2l}}, \code{\link{ATS_2l}}, \code{\link{d_2l}}
#' @examples
#' ATS_2_i_2l()
ATS_2_i_2l <- function(FFS_up = NULL, L_2_i = NULL, d = NULL){
if (FFS_up >= 0){
if (L_2_i >= 0){
if (d >= 0){
ats <- 3.6 * L_2_i / ((d + 3.6 * L_2_i)/FFS_up)
}
else {ats <- 'Error : [d] must be positive(seconds/veh). Please check that.'}
}
else {ats <- 'Error : [L_2_i] must be positive(m). Please check that.'}
}
else {ats <- 'Error : [FFS_up] must be positive(kph). Please check that.'}
ats
}
ATS_2_i_2l(FFS_up = 70, L_2_i = 2.4, d = 19.2)
#' Total delay rate (%) in section i of section type 2 of the two-lane road
#'    It follows <Formula 7-10> in KHCM(2013), p.175.
#' @param FFS Free speed(kph)
#' @param L_2_i Section i length (m) of section type 2 (signal intersection influence zone)
#' @param d Average control delay per vehicle in 2-lane Road(seconds/veh). See \code{\link{d_2l}}
#' @keywords TDR Total Delay Rate
#' @export TDR_2_i_2l Total delay rate (%) in section i of section type 2 of the two-lane road
#' @seealso \code{\link{TDR_2l}}, \code{\link{TDR_thr_2l}}, \code{\link{TDR_2_i_2l}}, \code{\link{d_2l}}
#' @examples
#' TDR_2_i_2l
TDR_2_i_2l <- function(FFS = NULL, L_2_i = NULL, d = NULL){
if (FFS >= 0){
if (L_2_i >= 0){
if (d >= 0){
tdr <- d / ((3.6 * L_2_i)/FFS)
}
else {tdr <- 'Error : [d] must be positive(seconds/veh). Please check that.'}
}
else {tdr <- 'Error : [L_2_i] must be positive(m). Please check that.'}
}
else {tdr <- 'Error : [FFS] must be positive(kph). Please check that.'}
tdr
}
TDR_2_i_2l(FFS = 87, L_2_i = 3.2, d = 3.2)
#'     This function follows <Formula 7-11> in KHCM(2013), p.176.
#' @param L Total length(km).
#' @param L_1 Series of ection i length (km) of section type1 2-lane road. See \code{\link{type_2l}}
#' @param L_2 Series of ection i length (km) of section type2 2-lane road. See \code{\link{type_2l}}
#' @param ATS_1 Series of average travel speed (km/h) in section i of section type1 2-lane road. See \code{\link{ATS_1_i_2l}}
#' @param ATS_2 Series of average travel speed (km/h) in section i of section type2 2-lane road. See \code{\link{ATS_2_i_2l}}
#' @keywords Average Travel Speed ATS 2-lane Road
#' @seealso \code{\link{ATS_1_i_2l}}, \code{\link{ATS_2_i_2l}}
#' @export ATS_total_2l Total average travel speed in type1 2-lane road(kph)
#' @examples
ATS_total_2l <- function(L = NULL, L_1 = NULL, L_2 = NULL, ATS_1 = NULL, ATS_2 = NULL){
lats1_sum <- 0
lats2_sum <- 0
if (L > 0){
if (length(L_1) == length(ATS_1)){
if (length(L_2) == length(ATS_2)){
for (i in 1:length(L_1)){
lats1 <- L_1[i]/ATS_1[i]
lats1_sum <- lsts1_sum + lats1
}
for (i in 1:length(L_2)){
lats2 <- L_2[i]/ATS_2[i]
lats2_sum <- lsts2_sum + lats2
}
ats <- L / (lats1_sum + lats2_sum)
}
else {ats <- 'Error : The length of [L_2] series must be same with the length of [ATS_2] series.'}
}
else {ats <- 'Error : The length of [L_1] series must be same with the length of [ATS_1] series.'}
}
else {ats <- 'Error : [L] must be positive(km). Please check that.'}
ats
}
ATS_total_2l <- function(L = 5, L_1 = c(1, 1.1, 0.9), L_2 = c(0.3, 1.7), ATS_1 = c(74, 28.2, 49.4), ATS_2 = c(56.5, 75.2))
#'     This function follows <Formula 7-11> in KHCM(2013), p.176.
#' @param L Total length(km).
#' @param L_1 Series of ection i length (km) of section type1 2-lane road. See \code{\link{type_2l}}
#' @param L_2 Series of ection i length (km) of section type2 2-lane road. See \code{\link{type_2l}}
#' @param ATS_1 Series of average travel speed (km/h) in section i of section type1 2-lane road. See \code{\link{ATS_1_i_2l}}
#' @param ATS_2 Series of average travel speed (km/h) in section i of section type2 2-lane road. See \code{\link{ATS_2_i_2l}}
#' @keywords Average Travel Speed ATS 2-lane Road
#' @seealso \code{\link{ATS_1_i_2l}}, \code{\link{ATS_2_i_2l}}
#' @export ATS_total_2l Total average travel speed in type1 2-lane road(kph)
#' @examples
ATS_total_2l <- function(L = NULL, L_1 = NULL, L_2 = NULL, ATS_1 = NULL, ATS_2 = NULL){
lats1_sum <- 0
lats2_sum <- 0
if (L > 0){
if (length(L_1) == length(ATS_1)){
if (length(L_2) == length(ATS_2)){
for (i in 1:length(L_1)){
lats1 <- L_1[i]/ATS_1[i]
lats1_sum <- lsts1_sum + lats1
}
for (i in 1:length(L_2)){
lats2 <- L_2[i]/ATS_2[i]
lats2_sum <- lsts2_sum + lats2
}
ats <- L / (lats1_sum + lats2_sum)
}
else {ats <- 'Error : The length of [L_2] series must be same with the length of [ATS_2] series.'}
}
else {ats <- 'Error : The length of [L_1] series must be same with the length of [ATS_1] series.'}
}
else {ats <- 'Error : [L] must be positive(km). Please check that.'}
ats
}
ATS_total_2l(L = 5, L_1 = c(1, 1.1, 0.9), L_2 = c(0.3, 1.7), ATS_1 = c(74, 28.2, 49.4), ATS_2 = c(56.5, 75.2))
#'     This function follows <Formula 7-11> in KHCM(2013), p.176.
#' @param L Total length(km).
#' @param L_1 Series of ection i length (km) of section type1 2-lane road. See \code{\link{type_2l}}
#' @param L_2 Series of ection i length (km) of section type2 2-lane road. See \code{\link{type_2l}}
#' @param ATS_1 Series of average travel speed (km/h) in section i of section type1 2-lane road. See \code{\link{ATS_1_i_2l}}
#' @param ATS_2 Series of average travel speed (km/h) in section i of section type2 2-lane road. See \code{\link{ATS_2_i_2l}}
#' @keywords Average Travel Speed ATS 2-lane Road
#' @seealso \code{\link{ATS_1_i_2l}}, \code{\link{ATS_2_i_2l}}
#' @export ATS_total_2l Total average travel speed in type1 2-lane road(kph)
#' @examples
ATS_total_2l <- function(L = NULL, L_1 = NULL, L_2 = NULL, ATS_1 = NULL, ATS_2 = NULL){
lats1_sum <- 0
lats2_sum <- 0
if (L > 0){
if (length(L_1) == length(ATS_1)){
if (length(L_2) == length(ATS_2)){
for (i in 1:length(L_1)){
lats1 <- L_1[i]/ATS_1[i]
lats1_sum <- lsts1_sum + lats1
}
for (i in 1:length(L_2)){
lats2 <- L_2[i]/ATS_2[i]
lats2_sum <- lsts2_sum + lats2
}
ats <- L / (lats1_sum + lats2_sum)
}
else {ats <- 'Error : The length of [L_2] series must be same with the length of [ATS_2] series.'}
}
else {ats <- 'Error : The length of [L_1] series must be same with the length of [ATS_1] series.'}
}
else {ats <- 'Error : [L] must be positive(km). Please check that.'}
ats
}
ATS_total_2l(L = 5, L_1 = c(1, 1.1, 0.9), L_2 = c(0.3, 1.7), ATS_1 = c(74, 28.2, 49.4), ATS_2 = c(56.5, 75.2))
#'     This function follows <Formula 7-11> in KHCM(2013), p.176.
#' @param L Total length(km).
#' @param L_1 Series of ection i length (km) of section type1 2-lane road. See \code{\link{type_2l}}
#' @param L_2 Series of ection i length (km) of section type2 2-lane road. See \code{\link{type_2l}}
#' @param ATS_1 Series of average travel speed (km/h) in section i of section type1 2-lane road. See \code{\link{ATS_1_i_2l}}
#' @param ATS_2 Series of average travel speed (km/h) in section i of section type2 2-lane road. See \code{\link{ATS_2_i_2l}}
#' @keywords Average Travel Speed ATS 2-lane Road
#' @seealso \code{\link{ATS_1_i_2l}}, \code{\link{ATS_2_i_2l}}
#' @export ATS_total_2l Total average travel speed in type1 2-lane road(kph)
#' @examples
ATS_total_2l <- function(L = NULL, L_1 = NULL, L_2 = NULL, ATS_1 = NULL, ATS_2 = NULL){
lats1_sum <- 0
lats2_sum <- 0
if (L > 0){
if (length(L_1) == length(ATS_1)){
if (length(L_2) == length(ATS_2)){
for (i in 1:length(L_1)){
lats1 <- L_1[i]/ATS_1[i]
lats1_sum <- lats1_sum + lats1
}
for (i in 1:length(L_2)){
lats2 <- L_2[i]/ATS_2[i]
lats2_sum <- lats2_sum + lats2
}
ats <- L / (lats1_sum + lats2_sum)
}
else {ats <- 'Error : The length of [L_2] series must be same with the length of [ATS_2] series.'}
}
else {ats <- 'Error : The length of [L_1] series must be same with the length of [ATS_1] series.'}
}
else {ats <- 'Error : [L] must be positive(km). Please check that.'}
ats
}
ATS_total_2l(L = 5, L_1 = c(1, 1.1, 0.9), L_2 = c(0.3, 1.7), ATS_1 = c(74, 28.2, 49.4), ATS_2 = c(56.5, 75.2))
#'     This function follows <Formula 7-12> in KHCM(2013), p.176.
#' @param L Total length(km).
#' @param L_1 Series of ection i length (km) of section type1 2-lane road. See \code{\link{type_2l}}
#' @param L_2 Series of ection i length (km) of section type2 2-lane road. See \code{\link{type_2l}}
#' @param TDR_1 Series of TDR(%) in section i of section type1 2-lane road. See \code{\link{TDR_1_i_2l}}
#' @param TDR_2 Series of TDR(%) in section i of section type2 2-lane road. See \code{\link{TDR_2_i_2l}}
#' @keywords Average Travel Speed ATS 2-lane Road
#' @seealso \code{\link{TDR_1_i_2l}}, \code{\link{TDR_2_i_2l}}
#' @export TDR_total_2l TDR in type1 2-lane road(kph)
#' @examples
TDR_total_2l <- function(L = NULL, L_1 = NULL, L_2 = NULL, TDR_1 = NULL, TDR_2 = NULL){
tdr1_sum <- 0
tdr2_sum <- 0
if (L > 0){
if (length(L_1) == length(TDR_1)){
if (length(L_2) == length(TDR_2)){
for (i in 1:length(L_1)){
tdr1 <- TDR_1[i] * L_1[i] / L
tdr1_sum <- tdr1_sum + tdr1
}
for (i in 1:length(L_2)){
tdr2 <- TDR_2[i] * L_2[i] / L
tdr2_sum <- tdr2_sum + tdr2
}
tdr <- tdr1_sum + tdr2_sum
}
else {tdr <- 'Error : The length of [L_2] series must be same with the length of [TDR_2] series.'}
}
else {tdr <- 'Error : The length of [L_1] series must be same with the length of [TDR_1] series.'}
}
else {tdr <- 'Error : [L] must be positive(km). Please check that.'}
tdr
=======
#' Correction Coefficient of Total Delay Ratio in 2+1 Lane Road
#'
#' It correct TDR(Total Delay Rate) in 2+1 lane road.
#'     This function follows <Table 7-14> in KHCM(2013), p.186.
#' @param v Traffic volume in 2+1 lane road(pcphpl).
#' @keywords 2+1 lane road correction coefficient TDR total delay ratio
#' @export f_pl Correction Coefficient of Total Delay in 2+1 Lane Road Section(f_pl)
#' @examples
#' f_pl(v = 1391)
#' f_pl(999)
f_pl_2lp1 <- function(v = NULL){
if (v > 0 & v <= 100){f <- 0.789}
else if (v > 100 & v <= 200){f <- 0.761}
else if (v > 200 & v <= 300){f <- 0.735}
else if (v > 300 & v <= 400){f <- 0.713}
else if (v > 400 & v <= 500){f <- 0.694}
else if (v > 500 & v <= 600){f <- 0.678}
else if (v > 600 & v <= 700){f <- 0.665}
else if (v > 700 & v <= 800){f <- 0.655}
else if (v > 800 & v <= 900){f <- 0.648}
else if (v > 900 & v <= 1000){f <- 0.645}
else if (v > 1000 & v <= 1100){f <- 0.644}
else if (v > 1100 & v <= 1200){f <- 0.646}
else if (v > 1200 & v <= 1300){f <- 0.651}
else if (v > 1300 & v <= 1400){f <- 0.660}
else if (v > 1400 & v <= 1500){f <- 0.671}
else if (v > 1500 & v <= 1600){f <- 0.686}
else if (v > 1600 & v <= 1700){f <- 0.704}
else {f <- 'Error : [v] must be positive(pcphpl). Please check that.'}
f
}
#' @param L_up Analysis section length (m) upstream of the overtaking lane section among the i-th analysis target section
#' @param L_dn The length of the analysis target section before entering the i-th overtaking lane (m)
#' @param L_pl Section length of the i-th overtaking lane (m)
#' @param f_pl Total delay rate correction factor for the i-th overtaking lane section. See \code{\link{f_pl_2lp1}}.
#' @param f_w_D_up Lane width and lateral margin correction factor in the upstream section of the i-th overtaking lane. See \code{\link{f_w_D_2l}}.
#' @param f_w_D_pl Lane width and side clearance width correction factor for the i-th overtaking lane section. See \code{\link{f_w_D_2l}}.
#' @param f_w_D_dn Lane width and side clearance width correction factor in the downstream section of the i-th overtaking lane. See \code{\link{f_w_D_2l}}.
#' @keywords
#' @export TDR_2lp1 Total Delay Rate for i Sections in One Direction on a 2+1 Lane Road(TDR_2lane_plus1, %)
#' @examples
TDR_2lp1 <- function(TDR_up = NULL, TDR_dn = NULL, L_up = NULL, L_dn = NULL, L_pl = NULL, f_pl = NULL, f_w_D_up = NULL, f_w_D_dn = NULL, f_w_D_pl = NULL){
if (length(TDR_up) == length(TDR_dn) & length(TDR_up) == length(L_up) & length(TDR_up) == length(L_dn) & length(TDR_up) == length(L_pl) & length(TDR_up) == length(f_pl) & length(TDR_up) == length(f_w_D_up) & length(TDR_up) == length(f_w_D_dn) & length(TDR_up) == length(f_w_D_pl)){
tdr_sum <- 0
for (i in 1:length(TDR_up)){
tdr <- ((TDR_up[i] * (L_up[i] + f_pl[i] * ((1 + f_w_D_pl[i]/100)/(1 + f_w_D_up[i]/100)) * L_pl[i])) + (TDR_dn[i] * ((1 + f_w_D_pl[i]/100)/(1 + f_w_D_dn[i]/100)) * L_dn[i]))/(L_up[i] + L_dn[i] + L_pl[i])
tdr_sum <- tdr + tdr_sum
}
}
else {tdr_sum <- 'Error : Length of each arguments must be same with each other. Please check that.'}
tdr_sum
}
#' @param L_up Analysis section length (m) upstream of the overtaking lane section among the i-th analysis target section
#' @param L_dn The length of the analysis target section before entering the i-th overtaking lane (m)
#' @param L_pl Section length of the i-th overtaking lane (m)
#' @param f_pl Total delay rate correction factor for the i-th overtaking lane section. See \code{\link{f_pl_2lp1}}.
#' @param f_w_D_up Lane width and lateral margin correction factor in the upstream section of the i-th overtaking lane. See \code{\link{f_w_D_2l}}.
#' @param f_w_D_pl Lane width and side clearance width correction factor for the i-th overtaking lane section. See \code{\link{f_w_D_2l}}.
#' @param f_w_D_dn Lane width and side clearance width correction factor in the downstream section of the i-th overtaking lane. See \code{\link{f_w_D_2l}}.
#' @keywords TDR Total Delay Rate 2+1 lane road
#' @export TDR_21_i_2lp1 Total Delay Rate for i Sections in One Direction on a 2+1 Lane Road(TDR_2lane_plus1, %)
#' @examples
TDR_21_i_2lp1 <- function(TDR_up = NULL, TDR_dn = NULL, L_up = NULL, L_dn = NULL, L_pl = NULL, f_pl = NULL, f_w_D_up = NULL, f_w_D_dn = NULL, f_w_D_pl = NULL){
if (length(TDR_up) == length(TDR_dn) & length(TDR_up) == length(L_up) & length(TDR_up) == length(L_dn) & length(TDR_up) == length(L_pl) & length(TDR_up) == length(f_pl) & length(TDR_up) == length(f_w_D_up) & length(TDR_up) == length(f_w_D_dn) & length(TDR_up) == length(f_w_D_pl)){
tdr_sum <- 0
for (i in 1:length(TDR_up)){
tdr <- ((TDR_up[i] * (L_up[i] + f_pl[i] * ((1 + f_w_D_pl[i]/100)/(1 + f_w_D_up[i]/100)) * L_pl[i])) + (TDR_dn[i] * ((1 + f_w_D_pl[i]/100)/(1 + f_w_D_dn[i]/100)) * L_dn[i]))/(L_up[i] + L_dn[i] + L_pl[i])
tdr_sum <- tdr + tdr_sum
}
}
else {tdr_sum <- 'Error : Length of each arguments must be same with each other. Please check that.'}
tdr_sum
}
#' Bi-directional total delay rate(TDR) in 2+lane road.
#' This function follows <Formula 7-14> in KHCM(2013), p.186.
#' @param TDR_in TDR in the direction of progress(%).
#' @param TDR_out TDR in opposite direction(%).
#' @param L_in Section length for analysis in the direction of progress(m)
#' @param L_out Section length for analysis in the opposite direction(m)
#' @keywords
#' @export TDR_TD_2lp1 Total Delay Rate for i Sections in One Direction on a 2+1 Lane Road(TDR_2lane_plus1, %)
#' @examples
#' TDR_TD_2lp1(10.8, 2.1, 3.4, 3.2)
TDR_TD_2lp1 <- function(TDR_in = NULL, TDR_out = NULL, L_in = NULL, L_out = NULL){
if (TDR_in >= 0 & TDR_out >= 0 & L_in >= 0 & L_out >= 0){
result <- ((TDR_in * L_in) + (TDR_out * L_out))/(L_in + L_out)
result
}
else {result <- 'Error : [TDR_in], [TDR_out], [L_in], [L_out] must be positive. Please check that.'}
}
#' Correction Coefficient of Travel Speed in 2+1 Lane Road
#'
#' It correct travel speed in 2+1 lane road.
#'     This function follows <Table 7-15> in KHCM(2013), p.188.
#' @param v Traffic volume in 2+1 lane road(pcphpl).
#' @keywords 2+1 lane road correction coefficient TDR total delay ratio
#' @export fs_pl_2lp1 Correction coefficient of travel speed in 2+1 lane road Section(f_pl)
#' @examples
#' fs_pl_2lp1(v = 1391)
#' fs_pl_2lp1(999)
fs_pl_2lp1 <- function(v = NULL){
if (v > 0 & v <= 100){f <- 1.025}
else if (v > 100 & v <= 200){f <- 1.034}
else if (v > 200 & v <= 300){f <- 1.042}
else if (v > 300 & v <= 400){f <- 1.050}
else if (v > 400 & v <= 500){f <- 1.057}
else if (v > 500 & v <= 600){f <- 1.063}
else if (v > 600 & v <= 700){f <- 1.069}
else if (v > 700 & v <= 800){f <- 1.074}
else if (v > 800 & v <= 900){f <- 1.078}
else if (v > 900 & v <= 1000){f <- 1.081}
else if (v > 1000 & v <= 1100){f <- 1.084}
else if (v > 1100 & v <= 1200){f <- 1.086}
else if (v > 1200 & v <= 1300){f <- 1.088}
else if (v > 1300 & v <= 1400){f <- 1.089}
else if (v > 1400 & v <= 1500){f <- 1.089}
else if (v > 1500 & v <= 1600){f <- 1.088}
else if (v > 1600 & v <= 1700){f <- 1.087}
else {f <- 'Error : [v] must be >= 0 and <= 1700(pcphpl). Please check that.'}
f
}
& length(ATS_up) == length(f_w_ATS_pl)){
ats_sum <- 0
for (i in 1:length(ATS_up)){
p <- (ATS_up[i] - f_w_ATS_up[i])/(ATS_up[i] - f_w_ATS_pl[i])
q <- (ATS_up[i] * fs_pl[i] * p - f_w_ATS_pl[i])/(ATS_up[i] * fs_pl[i] * p - f_w_ATS_dn[i])
ats <- (L_up[i] + L_pl[i] + L_dn[i])/((L_up[i] / ATS_up[i]) + (L_pl[i] / (ATS_up[i] * fs_pl[i] * p)) + (L_dn / (ATS_dn * q)))
ats_sum <- ats_sum + ats
}
else {ats_sum <- 'Error : Length of each arguments must be same with each other. Please check that.'}
ats_sum
}
#' @param fs_pl Travel speed correction factor for the i-th overtaking lane section. See \code{\link{fs_pl_2lp1}}
#' @param L_up Analysis section length (m) upstream of the overtaking lane section among the i-th analysis target section
#' @param L_dn The length of the analysis target section before entering the i-th overtaking lane (m)
#' @param L_pl Section length of the i-th overtaking lane (m)
#' @param f_w_ATS_up Lane width and side clearance width of the downstream section of the i-th overtaking lane. See \code{\link{f_w_ATS_2l}}
#' @param f_w_ATS_pl Lane width and side clearance width of the i-th overtaking lane section. See \code{\link{f_w_ATS_2l}}
#' @param f_w_ATS_dn Lane width and side clearance width of the downstream section of the i-th overtaking lane. See \code{\link{f_w_ATS_2l}}
#' @keywords
#' @export ATS_21_i_2lp1 Average travel speed of a 2+1 lane road
#' @examples
ATS_21_i_2lp1 <- function(ATS_up = NULL, ATS_dn = NULL, fs_pl = NULL, L_up = NULL, L_dn = NULL, L_pl = NULL, f_w_ATS_up = NULL, f_w_ATS_dn = NULL, f_w_ATS_pl = NULL){
if (length(ATS_up) == length(ATS_dn)
& length(ATS_up) == length(ATS_dn)
& length(ATS_up) == length(fs_pl)
& length(ATS_up) == length(L_up)
$ length(ATS_up) == length(L_dn)
& length(ATS_up) == length(L_pl)
& length(ATS_up) == length(f_w_ATS_up)
& length(ATS_up) == length(f_w_ATS_dn)
& length(ATS_up) == length(f_w_ATS_pl)){
ats_sum <- 0
for (i in 1:length(ATS_up)){
p <- (ATS_up[i] - f_w_ATS_up[i])/(ATS_up[i] - f_w_ATS_pl[i])
q <- (ATS_up[i] * fs_pl[i] * p - f_w_ATS_pl[i])/(ATS_up[i] * fs_pl[i] * p - f_w_ATS_dn[i])
ats <- (L_up[i] + L_pl[i] + L_dn[i])/((L_up[i] / ATS_up[i]) + (L_pl[i] / (ATS_up[i] * fs_pl[i] * p)) + (L_dn / (ATS_dn * q)))
ats_sum <- ats_sum + ats
}
else {ats_sum <- 'Error : Length of each arguments must be same with each other. Please check that.'}
ats_sum
}
}
#' @param fs_pl Travel speed correction factor for the i-th overtaking lane section. See \code{\link{fs_pl_2lp1}}
#' @param L_up Analysis section length (m) upstream of the overtaking lane section among the i-th analysis target section
#' @param L_dn The length of the analysis target section before entering the i-th overtaking lane (m)
#' @param L_pl Section length of the i-th overtaking lane (m)
#' @param f_w_ATS_up Lane width and side clearance width of the downstream section of the i-th overtaking lane. See \code{\link{f_w_ATS_2l}}
#' @param f_w_ATS_pl Lane width and side clearance width of the i-th overtaking lane section. See \code{\link{f_w_ATS_2l}}
#' @param f_w_ATS_dn Lane width and side clearance width of the downstream section of the i-th overtaking lane. See \code{\link{f_w_ATS_2l}}
#' @keywords
#' @export ATS_21_i_2lp1 Average travel speed of a 2+1 lane road
#' @examples
ATS_21_i_2lp1 <- function(ATS_up = NULL, ATS_dn = NULL, fs_pl = NULL, L_up = NULL, L_dn = NULL, L_pl = NULL, f_w_ATS_up = NULL, f_w_ATS_dn = NULL, f_w_ATS_pl = NULL){
if (length(ATS_up) == length(ATS_dn)
& length(ATS_up) == length(ATS_dn)
& length(ATS_up) == length(fs_pl)
& length(ATS_up) == length(L_up)
$ length(ATS_up) == length(L_dn)
& length(ATS_up) == length(L_pl)
& length(ATS_up) == length(f_w_ATS_up)
& length(ATS_up) == length(f_w_ATS_dn)
& length(ATS_up) == length(f_w_ATS_pl)){
ats_sum <- 0
for (i in 1:length(ATS_up)){
p <- (ATS_up[i] - f_w_ATS_up[i])/(ATS_up[i] - f_w_ATS_pl[i])
q <- (ATS_up[i] * fs_pl[i] * p - f_w_ATS_pl[i])/(ATS_up[i] * fs_pl[i] * p - f_w_ATS_dn[i])
ats <- (L_up[i] + L_pl[i] + L_dn[i])/((L_up[i] / ATS_up[i]) + (L_pl[i] / (ATS_up[i] * fs_pl[i] * p)) + (L_dn / (ATS_dn * q)))
ats_sum <- ats_sum + ats
}
}
else {ats_sum <- 'Error : Length of each arguments must be same with each other. Please check that.'}
ats_sum
}
#' @param fs_pl Travel speed correction factor for the i-th overtaking lane section. See \code{\link{fs_pl_2lp1}}
#' @param L_up Analysis section length (m) upstream of the overtaking lane section among the i-th analysis target section
#' @param L_dn The length of the analysis target section before entering the i-th overtaking lane (m)
#' @param L_pl Section length of the i-th overtaking lane (m)
#' @param f_w_ATS_up Lane width and side clearance width of the downstream section of the i-th overtaking lane. See \code{\link{f_w_ATS_2l}}
#' @param f_w_ATS_pl Lane width and side clearance width of the i-th overtaking lane section. See \code{\link{f_w_ATS_2l}}
#' @param f_w_ATS_dn Lane width and side clearance width of the downstream section of the i-th overtaking lane. See \code{\link{f_w_ATS_2l}}
#' @keywords
#' @export ATS_21_i_2lp1 Average travel speed of a 2+1 lane road
#' @examples
ATS_21_i_2lp1 <- function(ATS_up = NULL, ATS_dn = NULL, fs_pl = NULL, L_up = NULL, L_dn = NULL, L_pl = NULL, f_w_ATS_up = NULL, f_w_ATS_dn = NULL, f_w_ATS_pl = NULL){
if (length(ATS_up) == length(ATS_dn) & length(ATS_up) == length(ATS_dn) & length(ATS_up) == length(fs_pl) & length(ATS_up) == length(L_up) $ length(ATS_up) == length(L_dn) & length(ATS_up) == length(L_pl) & length(ATS_up) == length(f_w_ATS_up) & length(ATS_up) == length(f_w_ATS_dn) & length(ATS_up) == length(f_w_ATS_pl)){
ats_sum <- 0
for (i in 1:length(ATS_up)){
p <- (ATS_up[i] - f_w_ATS_up[i])/(ATS_up[i] - f_w_ATS_pl[i])
q <- (ATS_up[i] * fs_pl[i] * p - f_w_ATS_pl[i])/(ATS_up[i] * fs_pl[i] * p - f_w_ATS_dn[i])
ats <- (L_up[i] + L_pl[i] + L_dn[i])/((L_up[i] / ATS_up[i]) + (L_pl[i] / (ATS_up[i] * fs_pl[i] * p)) + (L_dn / (ATS_dn * q)))
ats_sum <- ats_sum + ats
}
}
else {ats_sum <- 'Error : Length of each arguments must be same with each other. Please check that.'}
ats_sum
}
#' @param fs_pl Travel speed correction factor for the i-th overtaking lane section. See \code{\link{fs_pl_2lp1}}
#' @param L_up Analysis section length (m) upstream of the overtaking lane section among the i-th analysis target section
#' @param L_dn The length of the analysis target section before entering the i-th overtaking lane (m)
#' @param L_pl Section length of the i-th overtaking lane (m)
#' @param f_w_ATS_up Lane width and side clearance width of the downstream section of the i-th overtaking lane. See \code{\link{f_w_ATS_2l}}
#' @param f_w_ATS_pl Lane width and side clearance width of the i-th overtaking lane section. See \code{\link{f_w_ATS_2l}}
#' @param f_w_ATS_dn Lane width and side clearance width of the downstream section of the i-th overtaking lane. See \code{\link{f_w_ATS_2l}}
#' @keywords
#' @export ATS_21_i_2lp1 Average travel speed of a 2+1 lane road
#' @examples
ATS_21_i_2lp1 <- function(ATS_up = NULL, ATS_dn = NULL, fs_pl = NULL, L_up = NULL, L_dn = NULL, L_pl = NULL, f_w_ATS_up = NULL, f_w_ATS_dn = NULL, f_w_ATS_pl = NULL){
if (length(ATS_up) == length(ATS_dn) & length(ATS_up) == length(ATS_dn) & length(ATS_up) == length(fs_pl) & length(ATS_up) == length(L_up) $ length(ATS_up) == length(L_dn) & length(ATS_up) == length(L_pl) & length(ATS_up) == length(f_w_ATS_up) & length(ATS_up) == length(f_w_ATS_dn) & length(ATS_up) == length(f_w_ATS_pl)){
ats_sum <- 0
for (i in 1:length(ATS_up)){
p <- (ATS_up[i] - f_w_ATS_up[i])/(ATS_up[i] - f_w_ATS_pl[i])
q <- (ATS_up[i] * fs_pl[i] * p - f_w_ATS_pl[i])/(ATS_up[i] * fs_pl[i] * p - f_w_ATS_dn[i])
ats <- (L_up[i] + L_pl[i] + L_dn[i])/((L_up[i] / ATS_up[i]) + (L_pl[i] / (ATS_up[i] * fs_pl[i] * p)) + (L_dn[i] / (ATS_dn[i] * q)))
ats_sum <- ats_sum + ats
}
}
else {ats_sum <- 'Error : Length of each arguments must be same with each other. Please check that.'}
ats_sum
}
#' @param fs_pl Travel speed correction factor for the i-th overtaking lane section. See \code{\link{fs_pl_2lp1}}
#' @param L_up Analysis section length (m) upstream of the overtaking lane section among the i-th analysis target section
#' @param L_dn The length of the analysis target section before entering the i-th overtaking lane (m)
#' @param L_pl Section length of the i-th overtaking lane (m)
#' @param f_w_ATS_up Lane width and side clearance width of the downstream section of the i-th overtaking lane. See \code{\link{f_w_ATS_2l}}
#' @param f_w_ATS_pl Lane width and side clearance width of the i-th overtaking lane section. See \code{\link{f_w_ATS_2l}}
#' @param f_w_ATS_dn Lane width and side clearance width of the downstream section of the i-th overtaking lane. See \code{\link{f_w_ATS_2l}}
#' @keywords
#' @export ATS_21_i_2lp1 Average travel speed of a 2+1 lane road
#' @examples
ATS_21_i_2lp1 <- function(ATS_up = NULL, ATS_dn = NULL, fs_pl = NULL, L_up = NULL, L_dn = NULL, L_pl = NULL, f_w_ATS_up = NULL, f_w_ATS_dn = NULL, f_w_ATS_pl = NULL){
if (length(ATS_up) == length(ATS_dn) & length(ATS_up) == length(ATS_dn) & length(ATS_up) == length(fs_pl) & length(ATS_up) == length(L_up) $ length(ATS_up) == length(L_dn) & length(ATS_up) == length(L_pl) & length(ATS_up) == length(f_w_ATS_up) & length(ATS_up) == length(f_w_ATS_dn) & length(ATS_up) == length(f_w_ATS_pl)){
ats_sum <- 0
for (i in 1:length(ATS_up)){
}
}
else {ats_sum <- 'Error : Length of each arguments must be same with each other. Please check that.'}
ats_sum
}
#' @param fs_pl Travel speed correction factor for the i-th overtaking lane section. See \code{\link{fs_pl_2lp1}}
#' @param L_up Analysis section length (m) upstream of the overtaking lane section among the i-th analysis target section
#' @param L_dn The length of the analysis target section before entering the i-th overtaking lane (m)
#' @param L_pl Section length of the i-th overtaking lane (m)
#' @param f_w_ATS_up Lane width and side clearance width of the downstream section of the i-th overtaking lane. See \code{\link{f_w_ATS_2l}}
#' @param f_w_ATS_pl Lane width and side clearance width of the i-th overtaking lane section. See \code{\link{f_w_ATS_2l}}
#' @param f_w_ATS_dn Lane width and side clearance width of the downstream section of the i-th overtaking lane. See \code{\link{f_w_ATS_2l}}
#' @keywords
#' @export ATS_21_i_2lp1 Average travel speed of a 2+1 lane road
#' @examples
ATS_21_i_2lp1 <- function(ATS_up = NULL, ATS_dn = NULL, fs_pl = NULL, L_up = NULL, L_dn = NULL, L_pl = NULL, f_w_ATS_up = NULL, f_w_ATS_dn = NULL, f_w_ATS_pl = NULL){
if (length(ATS_up) == length(ATS_dn) & length(ATS_up) == length(ATS_dn) & length(ATS_up) == length(fs_pl) & length(ATS_up) == length(L_up) & length(ATS_up) == length(L_dn) & length(ATS_up) == length(L_pl) & length(ATS_up) == length(f_w_ATS_up) & length(ATS_up) == length(f_w_ATS_dn) & length(ATS_up) == length(f_w_ATS_pl)){
ats_sum <- 0
for (i in 1:length(ATS_up)){
p <- (ATS_up[i] - f_w_ATS_up[i])/(ATS_up[i] - f_w_ATS_pl[i])
q <- (ATS_up[i] * fs_pl[i] * p - f_w_ATS_pl[i])/(ATS_up[i] * fs_pl[i] * p - f_w_ATS_dn[i])
ats <- (L_up[i] + L_pl[i] + L_dn[i])/((L_up[i] / ATS_up[i]) + (L_pl[i] / (ATS_up[i] * fs_pl[i] * p)) + (L_dn / (ATS_dn * q)))
ats_sum <- ats_sum + ats
}
}
else {ats_sum <- 'Error : Length of each arguments must be same with each other. Please check that.'}
ats_sum
}
#' Bi-directional average travel speed in 2+l lane road(kph)
#'     This function follows <Formula 7-16> in KHCM(2013), p.188.
#' @param ATS_in ATS in the direction of progress(kph).
#' @param ATS_out ATS in opposite direction(kph).
#' @param L_in Section length for analysis in the direction of progress(m)
#' @param L_out Section length for analysis in the opposite direction(m)
#' @keywords
#' @export ATS_TD_2lp1
#' @examples
#' ATS_TD_2lp1(70, 55, 0.4, 1.3)
ATS_TD_2lp1 <- function(ATS_in = NULL, ATS_out = NULL, L_in = NULL, L_out = NULL){
if (ATS_in >= 0 & ATS_out >= 0 & L_in >= 0 & L_out >= 0){
result <- (L_in + L_out) / ((L_in / ATS_in) + (L_out / ATS_out))
}
else {result <- 'Error : [ATS_in], [ATS_out], [L_in], [L_out] must be positive. Please check that.'}
result
>>>>>>> c90bd71a58460eb94469a8e9c60bd3b05c595038
}
