else if (v > 1500 & v < 1600){result <- 16 + (v - 1500) * 0.03}
else if (v == 1600){result <- 19}
else if (v > 1600 & v < 1700){result <- 19 + (v - 1600) * 0.03}
else if (v == 1700){result <- 22}
else if (v > 1700 & v < 1800){result <- 22 + (v - 1700) * 0.02}
else if (v == 1800){result <- 24}
else {result <- 'Error : [v] must be >= 500(vphpl). Please check that.'}
}
else {result <- 'Error : [tl_density] must be >= 0 and <= 0.5. Please check that.'}
}
else if (vehicle_type == 'middle_heavy' | vehicle_type == 'large_heavy'){
if (tl_density >= 0 & tl_density <= 0.1){
if (v == 500){result <- 1}
else if (v > 500 & v < 600){result <- 1}
else if (v == 600){result <- 1}
else if (v > 600 & v < 700){result <- 1 + (v - 600) * 0.01}
else if (v == 700){result <- 2}
else if (v > 700 & v < 800){result <- 2}
else if (v == 800){result <- 2}
else if (v > 800 & v < 900){result <- 2}
else if (v == 900){result <- 2}
else if (v > 900 & v < 1000){result <- 1 + (v - 900) * 0.01}
else if (v == 1000){result <- 3}
else if (v > 1000 & v < 1100){result <- 3}
else if (v == 1100){result <- 3}
else if (v > 1100 & v < 1200){result <- 4 + (v - 1100) * 0.01}
else if (v == 1200){result <- 4}
else if (v > 1200 & v < 1300){result <- 4}
else if (v == 1300){result <- 4}
else if (v > 1300 & v < 1400){result <- 4 + (v - 1300) * 0.01}
else if (v == 1400){result <- 5}
else if (v > 1400 & v < 1500){result <- 5 + (v - 1400) * 0.01}
else if (v == 1500){result <- 6}
else if (v > 1500 & v < 1600){result <- 6 + (v - 1500) * 0.01}
else if (v == 1600){result <- 7}
else if (v > 1600 & v < 1700){result <- 7 + (v - 1600) * 0.02}
else if (v == 1700){result <- 9}
else if (v > 1700 & v < 1800){result <- 9 + (v - 1600) * 0.01}
else if (v == 1800){result <- 10}
else {result <- 'Error : [v] must be >= 500(vphpl). Please check that.'}
}
else if (tl_density >= 0.1 & tl_density <= 0.3){
if (v == 500){result <- 1}
else if (v > 500 & v < 600){result <- 1 + (v - 500) * 0.01}
else if (v == 600){result <- 2}
else if (v > 600 & v < 700){result <- 2}
else if (v == 700){result <- 2}
else if (v > 700 & v < 800){result <- 2 + (v - 700) * 0.01}
else if (v == 800){result <- 3}
else if (v > 800 & v < 900){result <- 3}
else if (v == 900){result <- 3}
else if (v > 900 & v < 1000){result <- 3 + (v - 900) * 0.01}
else if (v == 1000){result <- 4}
else if (v > 1000 & v < 1100){result <- 4}
else if (v == 1100){result <- 4}
else if (v > 1100 & v < 1200){result <- 4 + (v - 1100) * 0.01}
else if (v == 1200){result <- 5}
else if (v > 1200 & v < 1300){result <- 5 + (v - 1200) * 0.01}
else if (v == 1300){result <- 6}
else if (v > 1300 & v < 1400){result <- 6 + (v - 1300) * 0.01}
else if (v == 1400){result <- 7}
else if (v > 1400 & v < 1500){result <- 7 + (v - 1400) * 0.01}
else if (v == 1500){result <- 8}
else if (v > 1500 & v < 1600){result <- 8 + (v - 1500) * 0.01}
else if (v == 1600){result <- 9}
else if (v > 1600 & v < 1700){result <- 9 + (v - 1600) * 0.03}
else if (v == 1700){result <- 12}
else if (v > 1700 & v < 1800){result <- 12 + (v - 1700) * 0.03}
else if (v == 1800){result <- 15}
else {result <- 'Error : [v] must be >= 500(vphpl). Please check that.'}
}
else if (tl_density >= 0.3 & tl_density <= 0.5){
if (v == 500){result <- 3}
else f (v > 500 & v < 600){result <- 3 + (v - 500) * 0.01}
else if (v == 600){result <- 4}
else if (v > 600 & v < 700){result <- 4}
else if (v == 700){result <- 4}
else if (v > 700 & v < 800){result <- 4 + (v - 700) * 0.01}
else if (v == 800){result <- 5}
else if (v > 800 & v < 900){result <- 5 + (v - 800) * 0.01}
else if (v == 900){result <- 6}
else if (v > 900 & v < 1000){result <- 6 + (v - 900) * 0.01}
else if (v == 1000){result <- 7}
else if (v > 1000 & v < 1100){result <- 7 + (v - 1000) * 0.01}
else if (v == 1100){result <- 8}
else if (v > 1100 & v < 1200){result <- 8 + (v - 1100) * 0.01}
else if (v == 1200){result <- 9}
else if (v > 1200 & v < 1300){result <- 9 + (v - 1200) * 0.01}
else if (v == 1300){result <- 10}
else if (v > 1300 & v < 1400){result <- 10 + (v - 1300) * 0.02}
else if (v == 1400){result <- 12}
else if (v > 1400 & v < 1500){result <- 12 + (v - 1400) * 0.02}
else if (v == 1500){result <- 14}
else if (v > 1500 & v < 1600){result <- 14 + (v - 1500) * 0.03}
else if (v == 1600){result <- 17}
else if (v > 1600 & v < 1700){result <- 17 + (v - 1600) * 0.03}
else if (v == 1700){result <- 20}
else if (v > 1700 & v < 1800){result <- 20 + (v - 1700) * 0.04}
else if (v == 1800){result <- 24}
else {result <- 'Error : [v] must be >= 500(vphpl). Please check that.'}
}
else {result <- 'Error : [tl_density] must be >= 0 and <= 0.5. Please check that.'}
}
else {result <- 'Error : [vehicle_type] must be one of [normal], [small_heavy], [middle_heavy], [large_heavy]. Please check that.'}
result
}
#'     It follows <Table 6-7> in KHCM(2013), p.143-144.
#' @param v Traffic volume(vphpl). This factor is available when traffic volume is under than 500vphpl.
#' @param tl_density Density of traffic lights(ea/km)
#' @param vehicle_type Type of vehicle. Choose one from : \code{'normal'}, \code{'small_heavy'}, \code{'middle_heavy'}, \code{'large_heavy'}
#' @keywords speed correction factor traffic light
#' @seealso \code{\link{F_S_ml}}
#' @export F_V_ml Speed correction factor from traffic volume
#' @examples
#' F_V_ml(v = 1231, vehicle_type = 'normal_vehicle', tl_density = 0.45)
#' F_V_ml(999, 'heavy_vehicle', 0.3293)
F_V_ml <- function(v = NULL, vehicle_type = NULL, tl_density = NULL){
if (vehicle_type == 'normal' | vehicle_type == 'small_heavy'){
if (tl_density >= 0 & tl_density <= 0.1){
if (v == 500){result <- 1}
else if (v > 500 & v < 600){result <- 1}
else if (v == 600){result <- 1}
else if (v > 600 & v < 700){result <- 1}
else if (v == 700){result <- 1}
else if (v > 700 & v < 800){result <- 1 + (v - 700) * 0.01}
else if (v == 800){result <- 2}
else if (v > 800 & v < 900){result <- 2}
else if (v == 900){result <- 2}
else if (v > 900 & v < 1000){result <- 1 + (v - 900) * 0.01}
else if (v == 1000){result <- 3}
else if (v > 1000 & v < 1100){result <- 1 + (v - 1000) * 0.01}
else if (v == 1100){result <- 4}
else if (v > 1100 & v < 1200){result <- 4}
else if (v == 1200){result <- 4}
else if (v > 1200 & v < 1300){result <- 4 + (v - 1200) * 0.02}
else if (v == 1300){result <- 6}
else if (v > 1300 & v < 1400){result <- 6 + (v - 1300) * 0.02}
else if (v == 1400){result <- 8}
else if (v > 1400 & v < 1500){result <- 8 + (v - 1400) * 0.01}
else if (v == 1500){result <- 9}
else if (v > 1500 & v < 1600){result <- 9 + (v - 1500) * 0.03}
else if (v == 1600){result <- 12}
else if (v > 1600 & v < 1700){result <- 12 + (v - 1600) * 0.04}
else if (v == 1700){result <- 16}
else if (v > 1700 & v < 1800){result <- 12 + (v - 1600) * 0.04}
else if (v == 1800){result <- 20}
else {result <- 'Error : [v] must be >= 500(vphpl). Please check that.'}
}
else if (tl_density >= 0.1 & tl_density <= 0.3){
if (v == 500){result <- 1}
else if (v > 500 & v < 600){result <- 1}
else if (v == 600){result <- 1}
else if (v > 600 & v < 700){result <- 1 + (v - 600) * 0.01}
else if (v == 700){result <- 2}
else if (v > 700 & v < 800){result <- 2}
else if (v == 800){result <- 2}
else if (v > 800 & v < 900){result <- 2 + (v - 800) * 0.01}
else if (v == 900){result <- 3}
else if (v > 900 & v < 1000){result <- 3 + (v - 900) * 0.01}
else if (v == 1000){result <- 4}
else if (v > 1000 & v < 1100){result <- 4 + (v - 1000) * 0.01}
else if (v == 1100){result <- 5}
else if (v > 1100 & v < 1200){result <- 5 + (v - 1100) * 0.01}
else if (v == 1200){result <- 6}
else if (v > 1200 & v < 1300){result <- 6 + (v - 1200) * 0.02}
else if (v == 1300){result <- 8}
else if (v > 1300 & v < 1400){result <- 8 + (v - 1300) * 0.02}
else if (v == 1400){result <- 10}
else if (v > 1400 & v < 1500){result <- 10 + (v - 1400) * 0.01}
else if (v == 1500){result <- 11}
else if (v > 1500 & v < 1600){result <- 11 + (v - 1500) * 0.03}
else if (v == 1600){result <- 14}
else if (v > 1600 & v < 1700){result <- 14 + (v - 1600) * 0.05}
else if (v == 1700){result <- 19}
else if (v > 1700 & v < 1800){result <- 19 + (v - 1700) * 0.04}
else if (v == 1800){result <- 23}
else {result <- 'Error : [v] must be >= 500(vphpl). Please check that.'}
}
else if (tl_density >= 0.3 & tl_density <= 0.5){
if (v == 500){result <- 1}
else if (v > 500 & v < 600){result <- 1 + (v - 500) * 0.01}
else if (v == 600){result <- 2}
else if (v > 600 & v < 700){result <- 2 + (v - 600) * 0.01}
else if (v == 700){result <- 3}
else if (v > 700 & v < 800){result <- 3 + (v - 700) * 0.01}
else if (v == 800){result <- 4}
else if (v > 800 & v < 900){result <- 4 + (v - 800) * 0.01}
else if (v == 900){result <- 5}
else if (v > 900 & v < 1000){result <- 5 + (v - 900) * 0.01}
else if (v == 1000){result <- 6}
else if (v > 1000 & v < 1100){result <- 6 + (v - 1000) * 0.01}
else if (v == 1100){result <- 7}
else if (v > 1100 & v < 1200){result <- 7 + (v - 1100) * 0.01}
else if (v == 1200){result <- 8}
else if (v > 1200 & v < 1300){result <- 7 + (v - 1200) * 0.02}
else if (v == 1300){result <- 10}
else if (v > 1300 & v < 1400){result <- 10 + (v - 1300) * 0.02}
else if (v == 1400){result <- 12}
else if (v > 1400 & v < 1500){result <- 12 + (v - 1400) * 0.04}
else if (v == 1500){result <- 16}
else if (v > 1500 & v < 1600){result <- 16 + (v - 1500) * 0.03}
else if (v == 1600){result <- 19}
else if (v > 1600 & v < 1700){result <- 19 + (v - 1600) * 0.03}
else if (v == 1700){result <- 22}
else if (v > 1700 & v < 1800){result <- 22 + (v - 1700) * 0.02}
else if (v == 1800){result <- 24}
else {result <- 'Error : [v] must be >= 500(vphpl). Please check that.'}
}
else {result <- 'Error : [tl_density] must be >= 0 and <= 0.5. Please check that.'}
}
else if (vehicle_type == 'middle_heavy' | vehicle_type == 'large_heavy'){
if (tl_density >= 0 & tl_density <= 0.1){
if (v == 500){result <- 1}
else if (v > 500 & v < 600){result <- 1}
else if (v == 600){result <- 1}
else if (v > 600 & v < 700){result <- 1 + (v - 600) * 0.01}
else if (v == 700){result <- 2}
else if (v > 700 & v < 800){result <- 2}
else if (v == 800){result <- 2}
else if (v > 800 & v < 900){result <- 2}
else if (v == 900){result <- 2}
else if (v > 900 & v < 1000){result <- 1 + (v - 900) * 0.01}
else if (v == 1000){result <- 3}
else if (v > 1000 & v < 1100){result <- 3}
else if (v == 1100){result <- 3}
else if (v > 1100 & v < 1200){result <- 4 + (v - 1100) * 0.01}
else if (v == 1200){result <- 4}
else if (v > 1200 & v < 1300){result <- 4}
else if (v == 1300){result <- 4}
else if (v > 1300 & v < 1400){result <- 4 + (v - 1300) * 0.01}
else if (v == 1400){result <- 5}
else if (v > 1400 & v < 1500){result <- 5 + (v - 1400) * 0.01}
else if (v == 1500){result <- 6}
else if (v > 1500 & v < 1600){result <- 6 + (v - 1500) * 0.01}
else if (v == 1600){result <- 7}
else if (v > 1600 & v < 1700){result <- 7 + (v - 1600) * 0.02}
else if (v == 1700){result <- 9}
else if (v > 1700 & v < 1800){result <- 9 + (v - 1600) * 0.01}
else if (v == 1800){result <- 10}
else {result <- 'Error : [v] must be >= 500(vphpl). Please check that.'}
}
else if (tl_density >= 0.1 & tl_density <= 0.3){
if (v == 500){result <- 1}
else if (v > 500 & v < 600){result <- 1 + (v - 500) * 0.01}
else if (v == 600){result <- 2}
else if (v > 600 & v < 700){result <- 2}
else if (v == 700){result <- 2}
else if (v > 700 & v < 800){result <- 2 + (v - 700) * 0.01}
else if (v == 800){result <- 3}
else if (v > 800 & v < 900){result <- 3}
else if (v == 900){result <- 3}
else if (v > 900 & v < 1000){result <- 3 + (v - 900) * 0.01}
else if (v == 1000){result <- 4}
else if (v > 1000 & v < 1100){result <- 4}
else if (v == 1100){result <- 4}
else if (v > 1100 & v < 1200){result <- 4 + (v - 1100) * 0.01}
else if (v == 1200){result <- 5}
else if (v > 1200 & v < 1300){result <- 5 + (v - 1200) * 0.01}
else if (v == 1300){result <- 6}
else if (v > 1300 & v < 1400){result <- 6 + (v - 1300) * 0.01}
else if (v == 1400){result <- 7}
else if (v > 1400 & v < 1500){result <- 7 + (v - 1400) * 0.01}
else if (v == 1500){result <- 8}
else if (v > 1500 & v < 1600){result <- 8 + (v - 1500) * 0.01}
else if (v == 1600){result <- 9}
else if (v > 1600 & v < 1700){result <- 9 + (v - 1600) * 0.03}
else if (v == 1700){result <- 12}
else if (v > 1700 & v < 1800){result <- 12 + (v - 1700) * 0.03}
else if (v == 1800){result <- 15}
else {result <- 'Error : [v] must be >= 500(vphpl). Please check that.'}
}
else if (tl_density >= 0.3 & tl_density <= 0.5){
if (v == 500){result <- 3}
else if (v > 500 & v < 600){result <- 3 + (v - 500) * 0.01}
else if (v == 600){result <- 4}
else if (v > 600 & v < 700){result <- 4}
else if (v == 700){result <- 4}
else if (v > 700 & v < 800){result <- 4 + (v - 700) * 0.01}
else if (v == 800){result <- 5}
else if (v > 800 & v < 900){result <- 5 + (v - 800) * 0.01}
else if (v == 900){result <- 6}
else if (v > 900 & v < 1000){result <- 6 + (v - 900) * 0.01}
else if (v == 1000){result <- 7}
else if (v > 1000 & v < 1100){result <- 7 + (v - 1000) * 0.01}
else if (v == 1100){result <- 8}
else if (v > 1100 & v < 1200){result <- 8 + (v - 1100) * 0.01}
else if (v == 1200){result <- 9}
else if (v > 1200 & v < 1300){result <- 9 + (v - 1200) * 0.01}
else if (v == 1300){result <- 10}
else if (v > 1300 & v < 1400){result <- 10 + (v - 1300) * 0.02}
else if (v == 1400){result <- 12}
else if (v > 1400 & v < 1500){result <- 12 + (v - 1400) * 0.02}
else if (v == 1500){result <- 14}
else if (v > 1500 & v < 1600){result <- 14 + (v - 1500) * 0.03}
else if (v == 1600){result <- 17}
else if (v > 1600 & v < 1700){result <- 17 + (v - 1600) * 0.03}
else if (v == 1700){result <- 20}
else if (v > 1700 & v < 1800){result <- 20 + (v - 1700) * 0.04}
else if (v == 1800){result <- 24}
else {result <- 'Error : [v] must be >= 500(vphpl). Please check that.'}
}
else {result <- 'Error : [tl_density] must be >= 0 and <= 0.5. Please check that.'}
}
else {result <- 'Error : [vehicle_type] must be one of [normal], [small_heavy], [middle_heavy], [large_heavy]. Please check that.'}
result
}
F_V_ml(v = 1231, vehicle_type = 'normal', tl_density = 0.45)
F_V_ml(999, 'large_heavy', 0.3293)
#' @param design_speed If \code{type == 'type1'}, design_speed must be used(kph). Choose one from : \code{100}, \code{80}
#' @param N Number of lanes going straight at the intersection.
#' @param S Saturation flow(pcphpl).
#' @param g_c_ratio Average green time ratio
#' @keywords capacity weaving section freeway main line link
#' @seealso \link{\code{type_ml}}
#' @export capa_ml The Capacity of Multi-lane Road(pcph)
#' @examples
#' capa_ml(type = 'type1', design_speed = 80, N = 3)
#' capa_ml(type = 'type_2', N = 3, S = 2000, g_c_ratio = 0.2)
capa_ml <- function(type = NULL, design_speed = NULL, N = NULL, S = NULL, g_c_ratio = NULL){
if (type == 'type1'){
if (design_speed == 100){cap <- 2200 * N}
else if (design_speed == 80){cap <- 2000 * N}
else {cap <- 'Error : [design_speed] must be one of 100 or 80. Please check that.'}
}
else if (type == 'type2'){
if (N >= 1 & S > 0 & g_c_ratio >=0 & g_c_ratio < 1){cap <- N * S * g_c_ratio}
else {cap <- 'Error : Please check that --- [N] >= 1, [S] >= 0, [g_c_ratio] >= 0, [g_c_ratio] <= 1.'}
}
else {cap <- 'Error : [type] must be one of [type1], [type2]. Please check that.'}
cap
}
capa_ml(type = 'type1', design_speed = 80, N = 3)
capa_ml(type = 'type_2', N = 3, S = 2000, g_c_ratio = 0.2)
capa_ml(type = 'type2', N = 3, S = 2000, g_c_ratio = 0.2)
#'
#' Boundary value of service level i for the entire section (average travel speed, kph)
#'     It follows <Formula 6-3> in KHCM(2013), p.146.
#' @param L Total section length (km)
#' @param n Number of divided sections
#' @param L_n Ln = Length of section n (km)
#' @param S_n_i Boundary value of service level i of section n (average travel speed, kph)
#' @export S_i Saturated traffic flow rate of lane group i
#' @seealso \code{\link{S_ml}}
#' @examples
S_i_ml <- function(L = NULL, n = NULL, L_n = NULL, S_n_i = NULL){
lssum <- 0
if (L > 0 & n > 0){
if (length(L_n) == n & length(S_n_i) == n){
if (is.numeric(L_n[i]) == TRUE & is.numeric(S_n_i[i]) == TRUE){
for (i in 1:n){
ls <- L_n[i]/S_n_i[i]
lssum <- lssum + ls
}
result <- L / lssum
}
else {result <- 'Error : [L_n], [S_n_i] must be numeric series. Please check that.'}
}
else {result <- 'Error : [n] must be same with length(L_n) and length(S_n_i). Please check that.'}
}
else {result <- 'Error : [L], [n] must be positive. Please check that.'}
result
}
S_i_ml(L = 3.2, n = 4, L_n = c(1, 0.4, 0.5, 1.3), S_n_i = c(80, 74, 62, 67))
S_i_ml(L = 3.2, n = 4, L_n = c(1, 0.4, 0.5, 1.3), S_n_i = c(80, 74, 62, 67))
#'
#' Boundary value of service level i for the entire section (average travel speed, kph)
#'     It follows <Formula 6-3> in KHCM(2013), p.146.
#' @param L Total section length (km)
#' @param n Number of divided sections
#' @param L_n Ln = Length of section n (km)
#' @param S_n_i Boundary value of service level i of section n (average travel speed, kph)
#' @export S_i Saturated traffic flow rate of lane group i
#' @seealso \code{\link{S_ml}}
#' @examples
S_i_ml <- function(L = NULL, L_n = NULL, S_n_i = NULL){
lssum <- 0
if (L > 0 & n > 0){
if (length(L_n) == length(S_n_i)){
if (is.numeric(L_n[i]) == TRUE & is.numeric(S_n_i[i]) == TRUE){
for (i in 1:length(L_n)){
ls <- L_n[i]/S_n_i[i]
lssum <- lssum + ls
}
result <- L / lssum
}
else {result <- 'Error : [L_n], [S_n_i] must be same. Please check that.'}
}
else {result <- 'Error : [n] must be same with length(L_n) and length(S_n_i). Please check that.'}
}
else {result <- 'Error : [L], [n] must be positive. Please check that.'}
result
}
S_i_ml(L = 3.2, L_n = c(1, 0.4, 0.5, 1.3), S_n_i = c(80, 74, 62, 67))
S_i_ml(L = 3.2, L_n = c(1, 0.4, 0.5, 1.3), S_n_i = c(80, 74, 62, 67))
#'
#' Boundary value of service level i for the entire section (average travel speed, kph)
#'     It follows <Formula 6-3> in KHCM(2013), p.146.
#' @param L Total section length (km)
#' @param n Number of divided sections
#' @param L_n Ln = Length of section n (km)
#' @param S_n_i Boundary value of service level i of section n (average travel speed, kph)
#' @export S_i Saturated traffic flow rate of lane group i
#' @seealso \code{\link{S_ml}}
#' @examples
S_i_ml <- function(L = NULL, L_n = NULL, S_n_i = NULL){
lssum <- 0
if (L > 0){
if (length(L_n) == length(S_n_i)){
if (is.numeric(L_n[i]) == TRUE & is.numeric(S_n_i[i]) == TRUE){
for (i in 1:length(L_n)){
ls <- L_n[i]/S_n_i[i]
lssum <- lssum + ls
}
result <- L / lssum
}
else {result <- 'Error : [L_n], [S_n_i] must have positive values.. Please check that.'}
}
else {result <- 'Error : length(L_n) == length(S_n_i). Please check that.'}
}
else {result <- 'Error : [L], ust be positive. Please check that.'}
result
}
S_i_ml(L = 3.2, L_n = c(1, 0.4, 0.5, 1.3), S_n_i = c(80, 74, 62, 67))
#'
#' Boundary value of service level i for the entire section (average travel speed, kph)
#'     It follows <Formula 6-3> in KHCM(2013), p.146.
#' @param L Total section length (km)
#' @param n Number of divided sections
#' @param L_n Ln = Length of section n (km)
#' @param S_n_i Boundary value of service level i of section n (average travel speed, kph)
#' @export S_i Saturated traffic flow rate of lane group i
#' @seealso \code{\link{S_ml}}
#' @examples
S_i_ml <- function(L = NULL, L_n = NULL, S_n_i = NULL){
lssum <- 0
if (L > 0){
if (length(L_n) == length(S_n_i)){
for (i in 1:length(L_n)){
ls <- L_n[i]/S_n_i[i]
lssum <- lssum + ls
}
result <- L / lssum
}
else {result <- 'Error : length(L_n) == length(S_n_i). Please check that.'}
}
else {result <- 'Error : [L], ust be positive. Please check that.'}
result
}
S_i_ml(L = 3.2, L_n = c(1, 0.4, 0.5, 1.3), S_n_i = c(80, 74, 62, 67))
#' Boundary value of service level i for the entire section (average travel speed, kph)
#'     It follows <Formula 6-3> in KHCM(2013), p.146.
#' @param L Total section length (km)
#' @param n Number of divided sections
#' @param L_n Ln = Length of section n (km)
#' @param S_n Boundary value of service level i of section n (average travel speed, kph)
#' @export S_i Average travel speed of section n (kph).
#' @seealso \code{\link{S_i_ml}}
#' @examples
#' S_ml(L = 3.2, L_n = c(1, 0.4, 0.5, 1.3), S_n_i = c(80, 74, 62, 67))
S_ml <- function(L = NULL, L_n = NULL, S_n = NULL){
lssum <- 0
if (L > 0){
if (length(L_n) == length(S_n)){
for (i in 1:length(L_n)){
ls <- L_n[i]/S_n[i]
lssum <- lssum + ls
}
result <- L / lssum
}
else {result <- 'Error : length(L_n) == length(S_n). Please check that.'}
}
else {result <- 'Error : [L], ust be positive. Please check that.'}
result
}
S_ml(L = 5, L_n = c(1, 1.5, 1.8, 0.7), S_n_i = c(78, 68.2, 84.5, 50.7))
S_ml(L = 5, L_n = c(1, 1.5, 1.8, 0.7), S_n = c(78, 68.2, 84.5, 50.7))
#'     and the number of points of entry and exit.
#'     It follows <Formula 6-5> in KHCM(2013), p.148.
#' @param B_SP Maximum travel speed (kph) of a passenger car under basic conditions. See \code{\link{B_SP_ml}}
#' @param F_WC The One Side Lane Width and Side Clearance Speed Correction Factor. See \code{\link{F_wc_ml}}
#' @param F_B Bendiness Speed Correction Factor. See \code{\link{F_B_ml}}
#' @param F_H Speed Correction Factor from Hillness. See \code{\link{F_H_ml}}
#' @param F_A Speed Correction Factor from Number of inflow & outflow Points. See \code{\link{F_A_ml}}
#' @export S_P1_ml The maximum travel speed of a passenger car for a given road condition (kph).
#' @seealso \code{\link{B_SP_ml}}, \code{\link{F_B_ml}}, \code{\link{F_H_ml}}, \code{\link{F_A_ml}}, \code{\link{F_wc_ml}}
#' @examples
S_P1_ml <- function(B_SP = NULL, F_WC = NULL, F_B = NULL, F_H = NULL, F_A = NULL){
if (B_SP >= 0 & F_WC >= 0 & F_B >= 0 & F_H >= 0 & F_A >= 0){
res <- B_SP - F_WC - F_B - F_H - F_A
}
else {res <- 'Error : [B_SP], [F_WC], [F_B], [F_H], [F_A] must be positive. Please check that.'}
res
}
S_P1_m1(87, 4, 2, 8, 3)
#'     and the number of points of entry and exit.
#'     It follows <Formula 6-5> in KHCM(2013), p.148.
#' @param B_SP Maximum travel speed (kph) of a passenger car under basic conditions. See \code{\link{B_SP_ml}}
#' @param F_WC The One Side Lane Width and Side Clearance Speed Correction Factor. See \code{\link{F_wc_ml}}
#' @param F_B Bendiness Speed Correction Factor. See \code{\link{F_B_ml}}
#' @param F_H Speed Correction Factor from Hillness. See \code{\link{F_H_ml}}
#' @param F_A Speed Correction Factor from Number of inflow & outflow Points. See \code{\link{F_A_ml}}
#' @export S_P1_ml The maximum travel speed of a passenger car for a given road condition (kph).
#' @seealso \code{\link{B_SP_ml}}, \code{\link{F_B_ml}}, \code{\link{F_H_ml}}, \code{\link{F_A_ml}}, \code{\link{F_wc_ml}}
#' @examples
S_P1_ml <- function(B_SP = NULL, F_WC = NULL, F_B = NULL, F_H = NULL, F_A = NULL){
if (B_SP >= 0 & F_WC >= 0 & F_B >= 0 & F_H >= 0 & F_A >= 0){
res <- B_SP - F_WC - F_B - F_H - F_A
}
else {res <- 'Error : [B_SP], [F_WC], [F_B], [F_H], [F_A] must be positive. Please check that.'}
res
}
S_P1_ml(87, 4, 2, 8, 3)
