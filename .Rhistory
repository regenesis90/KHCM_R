#' @examples
d_1_nq_si <- function(case = NULL, Q_b = NULL, C = NULL, g = NULL, X = NULL, R = NULL, y = NULL, t = NULL, S = NULL){
if (Q_b = 0){
if (g > 0 & C > 0){
if (X >= 1){d <- (0.5 * c * (1 - (g/C)**2))/(1 - (g/C))}
else if (X < 1 & X >= 0){d <- (0.5 * c * (1 - (g/C)**2))/(1 - X * (g/C))}
else {d <- 'Error : [X] must be positive. Please check that.'}
}
else {d <- 'Error : [g], [C] must be positive(sec) and [g] != [C]. Please check that.'}
}
else {
if (case == 'case1'){
if (C > 0 & R > 0){
if (t > 0){
if (y > 0){
if (Q_b > 0){
if (S > 0){d <- R**2/(2 * C * (1 - y)) + (Q_b * R / (2 * t * S * (1 - y)))}
else {d <- 'Error : [S] must be positive(vphg). Please check that.'}
}
else {d <- 'Error : [Q_b] must be positive(veh). Please check that.'}
}
else {d <- 'Error : [y] must be positive(flow ratio). Please check that.'}
}
else {d <- 'Error : [t] must be positive(hours). Please check that.'}
}
else {d <- 'Error : [C], [R] must be positive(sec). Please check that.'}
}
else if (case == 'case2' | case == 'case3'){
if (R > 0){d <- R/2}
else {d <- 'Error : [R] must be positive(sec). Please check that.'}
}
else {d <- 'Error : [case] must be one of [case1], [case2], [case3]. Please check that.'}
}
d
}
#' @param Q_b Initial number of waiting vehicles (units)
#' @param C Signal period(seconds)
#' @param g Effective green time allocated to the relevant lane group (seconds)
#' @param X The saturation of the lane group
#' @param R Red signal time (sec)
#' @param y Flow rate(= V/S)
#' @param t Analysis period length (hours)
#' @param S Saturated traffic volume of the lane group (vphg)
#' @export d_1_nq_si Uniform delay
#' @examples
d_1_nq_si <- function(case = NULL, Q_b = NULL, C = NULL, g = NULL, X = NULL, R = NULL, y = NULL, t = NULL, S = NULL){
if (Q_b = 0){
}
else {
if (case == 'case1'){
if (C > 0 & R > 0){
if (t > 0){
if (y > 0){
if (Q_b > 0){
if (S > 0){d <- R**2/(2 * C * (1 - y)) + (Q_b * R / (2 * t * S * (1 - y)))}
else {d <- 'Error : [S] must be positive(vphg). Please check that.'}
}
else {d <- 'Error : [Q_b] must be positive(veh). Please check that.'}
}
else {d <- 'Error : [y] must be positive(flow ratio). Please check that.'}
}
else {d <- 'Error : [t] must be positive(hours). Please check that.'}
}
else {d <- 'Error : [C], [R] must be positive(sec). Please check that.'}
}
else if (case == 'case2' | case == 'case3'){
if (R > 0){d <- R/2}
else {d <- 'Error : [R] must be positive(sec). Please check that.'}
}
else {d <- 'Error : [case] must be one of [case1], [case2], [case3]. Please check that.'}
}
d
}
#' @param C Signal period(seconds)
#' @param g Effective green time allocated to the relevant lane group (seconds)
#' @param X The saturation of the lane group
#' @param R Red signal time (sec)
#' @param y Flow rate(= V/S)
#' @param t Analysis period length (hours)
#' @param S Saturated traffic volume of the lane group (vphg)
#' @seealso \code{\link{d_3_case_si}}
#' @export d_1_nq_si Uniform delay
#' @examples
d_1_nq_si <- function(case = NULL, Q_b = NULL, C = NULL, g = NULL, X = NULL, R = NULL, y = NULL, t = NULL, S = NULL){
if (Q_b = 0){
if (g > 0 & C > 0){
if (X >= 1){d <- (0.5 * c * (1 - (g/C)**2))/(1 - (g/C))}
else if (X < 1 & X >= 0){d <- (0.5 * c * (1 - (g/C)**2))/(1 - X * (g/C))}
else {d <- 'Error : [X] must be positive. Please check that.'}
}
else {d <- 'Error : [g], [C] must be positive(sec) and [g] != [C]. Please check that.'}
}
else {
if (case == 'case1'){
if (C > 0 & R > 0){
if (t > 0){
if (y > 0){
if (Q_b > 0){
if (S > 0){d <- R**2/(2 * C * (1 - y)) + (Q_b * R / (2 * t * S * (1 - y)))}
else {d <- 'Error : [S] must be positive(vphg). Please check that.'}
}
else {d <- 'Error : [Q_b] must be positive(veh). Please check that.'}
}
else {d <- 'Error : [y] must be positive(flow ratio). Please check that.'}
}
else {d <- 'Error : [t] must be positive(hours). Please check that.'}
}
else {d <- 'Error : [C], [R] must be positive(sec). Please check that.'}
}
else if (case == 'case2' | case == 'case3'){
if (R > 0){d <- R/2}
else {d <- 'Error : [R] must be positive(sec). Please check that.'}
}
else {d <- 'Error : [case] must be one of [case1], [case2], [case3]. Please check that.'}
}
d
}
warnings()
warnings()
#' @param C Signal period(seconds)
#' @param g Effective green time allocated to the relevant lane group (sec)
#' @param X The saturation of the lane group
#' @param R Red signal time (sec)
#' @param y Flow rate(= V/S)
#' @param t Analysis period length (hours)
#' @param S Saturated traffic volume of the lane group (vphg)
#' @seealso \code{\link{d_3_case_si}}
#' @export d_1_nq_si Uniform delay
#' @examples
d_1_nq_si <- function(case = NULL, Q_b = NULL, C = NULL, g = NULL, X = NULL, R = NULL, y = NULL, t = NULL, S = NULL){
if (Q_b = 0){
if (g > 0 & C > 0){
if (X >= 1){d <- (0.5 * c * (1 - (g/C)**2))/(1 - (g/C))}
else if (X < 1 & X >= 0){d <- (0.5 * c * (1 - (g/C)**2))/(1 - X * (g/C))}
else {d <- 'Error : [X] must be positive. Please check that.'}
}
else {d <- 'Error : [g], [C] must be positive(sec) and [g] != [C]. Please check that.'}
}
else {
if (case == 'case1'){
if (C > 0 & R > 0){
if (t > 0){
if (y > 0){
if (Q_b > 0){
if (S > 0){d <- R**2/(2 * C * (1 - y)) + (Q_b * R / (2 * t * S * (1 - y)))}
else {d <- 'Error : [S] must be positive(vphg). Please check that.'}
}
else {d <- 'Error : [Q_b] must be positive(veh). Please check that.'}
}
else {d <- 'Error : [y] must be positive(flow ratio). Please check that.'}
}
else {d <- 'Error : [t] must be positive(hours). Please check that.'}
}
else {d <- 'Error : [C], [R] must be positive(sec). Please check that.'}
}
else if ((case == 'case2') | (case == 'case3')){
if (R > 0){d <- R/2}
else {d <- 'Error : [R] must be positive(sec). Please check that.'}
}
else {d <- 'Error : [case] must be one of [case1], [case2], [case3]. Please check that.'}
}
d
}
if (X >= 1){d <- 2}
#' @param C Signal period(seconds)
#' @param g Effective green time allocated to the relevant lane group (sec)
#' @param X The saturation of the lane group
#' @param R Red signal time (sec)
#' @param y Flow rate(= V/S)
#' @param t Analysis period length (hours)
#' @param S Saturated traffic volume of the lane group (vphg)
#' @seealso \code{\link{d_3_case_si}}
#' @export d_1_nq_si Uniform delay
#' @examples
d_1_nq_si <- function(case = NULL, Q_b = NULL, C = NULL, g = NULL, X = NULL, R = NULL, y = NULL, t = NULL, S = NULL){
if (Q_b = 0){
if (g > 0 & C > 0){
if (X >= 1){d <- 2}
else if (X < 1 & X >= 0){d <- 1}
else {d <- 'Error : [X] must be positive. Please check that.'}
}
else {d <- 'Error : [g], [C] must be positive(sec) and [g] != [C]. Please check that.'}
}
else {
if (case == 'case1'){
if (C > 0 & R > 0){
if (t > 0){
if (y > 0){
if (Q_b > 0){
if (S > 0){d <- 1}
else {d <- 'Error : [S] must be positive(vphg). Please check that.'}
}
else {d <- 'Error : [Q_b] must be positive(veh). Please check that.'}
}
else {d <- 'Error : [y] must be positive(flow ratio). Please check that.'}
}
else {d <- 'Error : [t] must be positive(hours). Please check that.'}
}
else {d <- 'Error : [C], [R] must be positive(sec). Please check that.'}
}
else if (case == 'case2' | case == 'case3'){
if (R > 0){d <- R/2}
else {d <- 'Error : [R] must be positive(sec). Please check that.'}
}
else {d <- 'Error : [case] must be one of [case1], [case2], [case3]. Please check that.'}
}
d
}
#' @param C Signal period(seconds)
#' @param g Effective green time allocated to the relevant lane group (sec)
#' @param X The saturation of the lane group
#' @param R Red signal time (sec)
#' @param y Flow rate(= V/S)
#' @param t Analysis period length (hours)
#' @param S Saturated traffic volume of the lane group (vphg)
#' @seealso \code{\link{d_3_case_si}}
#' @export d_1_nq_si Uniform delay
#' @examples
d_1_nq_si <- function(case = NULL, Q_b = NULL, C = NULL, g = NULL, X = NULL, R = NULL, y = NULL, t = NULL, S = NULL){
if (Q_b == 0){
if (g > 0 & C > 0){
if (X >= 1){d <- (0.5 * c * (1 - (g/C)**2))/(1 - (g/C))}
else if (X < 1 & X >= 0){d <- (0.5 * c * (1 - (g/C)**2))/(1 - X * (g/C))}
else {d <- 'Error : [X] must be positive. Please check that.'}
}
else {d <- 'Error : [g], [C] must be positive(sec) and [g] != [C]. Please check that.'}
}
else {
if (case == 'case1'){
if (C > 0 & R > 0){
if (t > 0){
if (y > 0){
if (Q_b > 0){
if (S > 0){d <- R**2/(2 * C * (1 - y)) + (Q_b * R / (2 * t * S * (1 - y)))}
else {d <- 'Error : [S] must be positive(vphg). Please check that.'}
}
else {d <- 'Error : [Q_b] must be positive(veh). Please check that.'}
}
else {d <- 'Error : [y] must be positive(flow ratio). Please check that.'}
}
else {d <- 'Error : [t] must be positive(hours). Please check that.'}
}
else {d <- 'Error : [C], [R] must be positive(sec). Please check that.'}
}
else if (case == 'case2' | case == 'case3'){
if (R > 0){d <- R/2}
else {d <- 'Error : [R] must be positive(sec). Please check that.'}
}
else {d <- 'Error : [case] must be one of [case1], [case2], [case3]. Please check that.'}
}
d
}
d_1_nq_si(case = 'case1', C = 180, g = 55, X = 0.7)
d_1_nq_si(Q_b = 0, C = 180, g = 55, X = 0.7)
#' @param C Signal period(seconds)
#' @param g Effective green time allocated to the relevant lane group (sec)
#' @param X The saturation of the lane group
#' @param R Red signal time (sec)
#' @param y Flow rate(= V/S)
#' @param t Analysis period length (hours)
#' @param S Saturated traffic volume of the lane group (vphg)
#' @seealso \code{\link{d_3_case_si}}
#' @export d_1_nq_si Uniform delay
#' @examples
d_1_nq_si <- function(case = NULL, Q_b = NULL, C = NULL, g = NULL, X = NULL, R = NULL, y = NULL, t = NULL, S = NULL){
if (Q_b == 0){
if (g > 0 & C > 0){
if (X >= 1){d <- (0.5 * c * (1 - (g/C)**2))/(1 - (g/C))}
else if (X < 1 & X >= 0){d <- (0.5 * C * (1 - (g/C)**2))/(1 - X * (g/C))}
else {d <- 'Error : [X] must be positive. Please check that.'}
}
else {d <- 'Error : [g], [C] must be positive(sec) and [g] != [C]. Please check that.'}
}
else {
if (case == 'case1'){
if (C > 0 & R > 0){
if (t > 0){
if (y > 0){
if (Q_b > 0){
if (S > 0){d <- R**2/(2 * C * (1 - y)) + (Q_b * R / (2 * t * S * (1 - y)))}
else {d <- 'Error : [S] must be positive(vphg). Please check that.'}
}
else {d <- 'Error : [Q_b] must be positive(veh). Please check that.'}
}
else {d <- 'Error : [y] must be positive(flow ratio). Please check that.'}
}
else {d <- 'Error : [t] must be positive(hours). Please check that.'}
}
else {d <- 'Error : [C], [R] must be positive(sec). Please check that.'}
}
else if (case == 'case2' | case == 'case3'){
if (R > 0){d <- R/2}
else {d <- 'Error : [R] must be positive(sec). Please check that.'}
}
else {d <- 'Error : [case] must be one of [case1], [case2], [case3]. Please check that.'}
}
d
}
d_1_nq_si(Q_b = 0, C = 180, g = 55, X = 0.7)
d_1_nq_si(case = 'case1', C = 180, g = 55, R = 120, T = 1.5, S = 800, y = 0.6)
d_1_nq_si(case = 'case1', C = 180, g = 55, R = 120, t = 1.5, S = 800, y = 0.6)
d_1_nq_si(case = 'case1', Q_b = 222, C = 180, g = 55, R = 120, t = 1.5, S = 800, y = 0.6)
d_1_nq_si(case = 'case2', R = 120)
d_1_nq_si(case = 'case2', Q_b = 222, R = 120)
#'
#' Incremental delay indicating the effect of random arrival and oversaturation
#'     within the analysis period when there is no initial waiting vehicle at the signal intersection.
#'     It follows <Formula 8-50> in KHCM(2013), p.255.
#' @param c The capacity (vph) of the corresponding vehicle group during the analysis period
#' @param t Analysis period length (hours)
#' @param X The saturation of the lane group
#' @seealso \code{\link{d_si}}
#' @export d_2_nq_si
#' @examples
d_2_nq_si <- function(c = NULL, t = NULL, X = NULL){
if (c > 0){
if (t > 0){
if (X > 0){d <- 900 * t * ((X - 1) + ((X - 1)**2 + (4 * X / (c * t)))**(1/2))}
else {d <- 'Error : [X] must be positive. Please check that.'}
}
else {d <- 'Error : [t] must be positive(hours). Please check that.'}
}
else {d <- 'Error : [c] must be positive(vph). Please check that.'}
d
}
d_2_nq_si(c = 1800, t = 1.2, X = 0.556)
#'     It follows <Formula 8-51>, <Formula 8-52>, <Formula 8-53> in KHCM(2013), p.255.
#' @param case Choose one from : \code{'case1'}, \code{'case2'}, \code{'case3'}. See \code{\link{d_3_case_si}}
#' @param Q_b Initial number of vehicles on standby at the beginning of the analysis period (T) (veh)
#' @param c The capacity (vph) of the corresponding vehicle group during the analysis period
#' @param v Arrival traffic volume (vph) for the corresponding lane group during the analysis period
#' @param t Analysis period length (hours)
#' @param X The saturation of the lane group
#' @seealso \code{\link{d_3_case_si}}, \code{\link{d_si}}
#' @export d_3_si
#' @examples
d_3_si <- function(case = NULL, Q_b = NULL, c = NULL, v = NULL, t = NULL){
if (case == 'case1'){
if (Q_b > 0){
if (c > 0){
if (t > 0){
if (v > 0){d <- 1800 * (Q_b**2) / (c * t * (c - v))}
else {d <- 'Error : [v] must be positive(vph). Please check that.'}
}
else {d <- 'Error : [t] must be positive(hours). Please check that.'}
}
else {d <- 'Error : [c] must be positive(vph). Please check that.'}
}
else {d <- 'Error : [d] must be positive(veh). Please check that.'}
}
else if (case == 'case2'){
if (Q_b > 0){
if (c > 0){
if (t > 0){
if (X > 0){d <- 3600 * Q_b / c - (1800 * t * (1 - X))}
else {d <- 'Error : [X] must be positive. Please check that.'}
}
else {d <- 'Error : [t] must be positive(hours). Please check that.'}
}
else {d <- 'Error : [c] must be positive(vph). Please check that.'}
}
else {d <- 'Error : [d] must be positive(veh). Please check that.'}
}
else if (case == 'case3'){
if (Q_b > 0){
if (c > 0){d <- 3600 * Q_b / c}
else {d <- 'Error : [c] must be positive(vph). Please check that.'}
}
else {d <- 'Error : [d] must be positive(veh). Please check that.'}
}
else {d <- 'Error : [case] must be one of [case1], [case2], [case3]. Please check that.'}
d
}
d_3_si(case = 'case1', Q_b = 322, c = 1800, v = 400, t = 1.2)
d_3_si(case = 'case2', Q_b = 322, c = 1800, t = 1.2, X = 0.7)
#'     It follows <Formula 8-51>, <Formula 8-52>, <Formula 8-53> in KHCM(2013), p.255.
#' @param case Choose one from : \code{'case1'}, \code{'case2'}, \code{'case3'}. See \code{\link{d_3_case_si}}
#' @param Q_b Initial number of vehicles on standby at the beginning of the analysis period (T) (veh)
#' @param c The capacity (vph) of the corresponding vehicle group during the analysis period
#' @param v Arrival traffic volume (vph) for the corresponding lane group during the analysis period
#' @param t Analysis period length (hours)
#' @param X The saturation of the lane group
#' @seealso \code{\link{d_3_case_si}}, \code{\link{d_si}}
#' @export d_3_si
#' @examples
d_3_si <- function(case = NULL, Q_b = NULL, c = NULL, v = NULL, t = NULL, X = NULL){
if (case == 'case1'){
if (Q_b > 0){
if (c > 0){
if (t > 0){
if (v > 0){d <- 1800 * (Q_b**2) / (c * t * (c - v))}
else {d <- 'Error : [v] must be positive(vph). Please check that.'}
}
else {d <- 'Error : [t] must be positive(hours). Please check that.'}
}
else {d <- 'Error : [c] must be positive(vph). Please check that.'}
}
else {d <- 'Error : [d] must be positive(veh). Please check that.'}
}
else if (case == 'case2'){
if (Q_b > 0){
if (c > 0){
if (t > 0){
if (X > 0){d <- 3600 * Q_b / c - (1800 * t * (1 - X))}
else {d <- 'Error : [X] must be positive. Please check that.'}
}
else {d <- 'Error : [t] must be positive(hours). Please check that.'}
}
else {d <- 'Error : [c] must be positive(vph). Please check that.'}
}
else {d <- 'Error : [d] must be positive(veh). Please check that.'}
}
else if (case == 'case3'){
if (Q_b > 0){
if (c > 0){d <- 3600 * Q_b / c}
else {d <- 'Error : [c] must be positive(vph). Please check that.'}
}
else {d <- 'Error : [d] must be positive(veh). Please check that.'}
}
else {d <- 'Error : [case] must be one of [case1], [case2], [case3]. Please check that.'}
d
}
d_3_si(case = 'case2', Q_b = 322, c = 1800, t = 1.2, X = 0.7)
d_3_si(case = 'case2', Q_b = 322, c = 1200, t = 1.2, X = 0.7)
d_3_si(case = 'case3', Q_b = 322, c = 1200)
#'
#' Offset convenience rate at signalized intersection.
#'     It is calculated to calculate the fixed time signal interlocking factor (PF) of the signal intersection.
#'     It follows <Formula 8-54> in KHCM(2013) p.256.
#' @param T_c In the section from the stop line of the upstream intersection to the stop line of the analysis intersection,Time (seconds) obtained from the speed and link length of the section not affected by acceleration, deceleration, and stop
#' @param offset The difference (in seconds) between the upstream intersection and the analysis intersection in the continuous direction green signal start time. Use less value than period
#' @param C Common cycle required for arterial linkage (seconds)
#' @export TVO_si
#' @seealso \code{\link{PF_si}}
#' @examples
TVO_si <- function(T_c = NULL,  offset = NULL, C = NULL){
if (T_c >= 0){
if (offset >= 0){
if (C > 0){tvo <- (T_c - offset)/C}
else {tvo <- 'Error : [C] must be positive(sec). Please check that.'}
}
else {tvo <- 'Error : [offset] must be positive(sec). Please check that.'}
}
else {tvo <- 'Error : [T_c] must be positive(sec). Please check that.'}
tvo
}
TVO_si(T_c = 24.2, offset = 10, C = 150)
#' Average Control Delay per Vehicle on Approach A at Signalized Intersection I
#'
#' Average control delay per vehicle on approach A at signalized intersection I(sec/veh).
#'     It follows <Formula 8-56> in KHCM(2013), p.258.
#' @param d_i Average control delay per vehicle in approach A, i-lane group (sec/veh)
#' @param v_i Corrected traffic volume (vph) in approach A, i-lane group(vph)
#' @seealso \code{\link{d_I_si}}
#' @export d_A_si
#' @examples
#' d_A_si(d_i = c(10, 2.4, 3.5, 6.2), v_i = c(230, 432, 581, 398))
d_A_si <- function(d_i = NULL, v_i = NULL){
di_sum <- 0
vi_sum <- 0
for (i in 1:length(d_i)){
di <- d_i[i] * v_i[i]
vi <- v_i[i]
di_sum <- di_sum + di
vi_sum <- vi_sum + vi
}
di_sum/vi_sum
}
d_A_si(d_i = c(10, 2.4, 3.5, 6.2), v_i = c(230, 432, 581, 398))
#' Average Control Delay per Vehicle on Approach A at Signalized Intersection I
#'
#' Average control delay per vehicle on approach A at signalized intersection I(sec/veh).
#'     It follows <Formula 8-56> in KHCM(2013), p.258.
#' @param d_A Average control delay per vehicle in approach A(sec/veh), See \code{\link{d_A_si}}
#' @param v_A Corrected traffic volume (vph) in approach A(vph)
#' @seealso \code{\link{d_A_si}}
#' @export d_A_si
#' @examples
#' d_I_si(d_A = c(10, 2.4, 3.5, 6.2), v_A = c(230, 432, 581, 398))
d_I_si <- function(d_A = NULL, v_A = NULL){
da_sum <- 0
va_sum <- 0
for (i in 1:length(d_A)){
da <- d_A[i] * v_A[i]
va <- v_A[i]
da_sum <- da_sum + da
va_sum <- va_sum + va
}
da_sum/va_sum
}
#' Average Control Delay per Vehicle at Signalized Intersection I
#'
#' Average control delay per vehicle at signalized intersection I(sec/veh).
#'     It follows <Formula 8-56> in KHCM(2013), p.258.
#' @param d_A Average control delay per vehicle in approach A(sec/veh), See \code{\link{d_A_si}}
#' @param v_A Corrected traffic volume (vph) in approach A(vph)
#' @seealso \code{\link{d_A_si}}
#' @export d_A_si
#' @examples
#' d_I_si(d_A = c(10, 2.4, 3.5, 6.2), v_A = c(230, 432, 581, 398))
d_I_si <- function(d_A = NULL, v_A = NULL){
da_sum <- 0
va_sum <- 0
for (i in 1:length(d_A)){
da <- d_A[i] * v_A[i]
va <- v_A[i]
da_sum <- da_sum + da
va_sum <- va_sum + va
}
da_sum/va_sum
}
d_I_si(d_A = c(10, 2.4, 3.5, 6.2), v_A = c(230, 432, 581, 398))
