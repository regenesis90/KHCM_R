}
#' Total number of conflicts on the bike-pedestrian road(type2) in pedestrians view.
#'     It follows <Formula 15-11>, <Formula 15-25> in KHCM(2013), p.646, p.651.
#' @param Q_bike_sm Same direction Bicycle traffic flow rate (vph)
#' @param Q_bike_op Bicycle traffic flow rate in opposite direction (vph)
#' @param U_bike Average bike speed (kph)
#' @param U_ped Average walking speed (kph)
#' @keywords bicycle-pedestrian road total number of conflicts pedestrian
#' @seealso \code{\link{F_pass_type2_pb_bk}}, \code{\link{F_meet_type2_pb_bk}}
#' @export F_total_type2_p_bk Total number of conflicts on the bike-pedestrian road(type2) in pedestrians view(times/h)
#' @examples
F_total_type2_p_bk <- function(Q_bike_sm = NULL, Q_bike_op = NULL, U_bike = NULL, U_ped = NULL){
if (Q_bike_sm >= 0 & Q_bike_op >= 0){
if (is.null(U_bike) == TRUE & is.null(U_ped) == TRUE){
f <- (Q_bike_sm + Q_bike_op) * 2/3
}
else {
if (U_bike > 0 & U_ped > 0){
F_pass_pb <- F_pass_type2_pb_bk(Q_bike_sm = Q_bike_sm, U_bike = U_bike, U_ped = U_ped)
F_meet_pb <- F_meet_type2_pb_bk(Q_bike_op = Q_bike_op, U_bike = U_bike, U_ped = U_ped)
f <- F_pass_pb + 0.5 * (F_meet_pb)
}
else {f <- 'Error : [U_bike], [U_ped] must be positive. Please check that.'}
}
}
else {f <- 'Error : [Q_bike_sm], [Q_bike_op] must be positive(vph). Please check that.'}
f
}
F_total_type2_p_bk(Q_bike_sm = 239, Q_bike_op = 382)
F_total_type2_p_bk(Q_bike_sm = 239, Q_bike_op = 382, U_bike = 12.33, U_ped = 5.03)
#'
#' It calculates pedestrian traffic flow rate(person/min/m) in pedestrian facilities.
#'     It follows <Formula 14-1>, <Formula 14-2> in KHCM(2013), p.613.
#' @param S Walking speed(m/min).
#' @param D Walking density(person/㎡). It is same with \code{1/M}
#' @param M Pedestrian occupied space.(㎡/person) It is same with \code{1/D}
#' @export V_ped
#' @examples
#' V_ped(S = 50, D = 3)
#' V_ped(S = 32.3, M = 12)
V_ped <- function(S = NULL, D = NULL, M = NULL){
if (S >= 0){
if (is.null(D) == FALSE){
if (D > 0){v <- S * D}
else {v <- 'Error : [D] must be positive(person/㎡). Please check that.'}
}
else {
if (is.null(M) == FALSE){
if (M > 0){v <- S / M}
else {v <- 'Error : [M] must be positive(㎡/person). Please check that.'}
}
else {v <- 'Error : One of [D] or [M] is necessary. Please check that.'}
}
}
else {v <- 'Error : [S] must be positive(m/min). Please check that.'}
v
}
V_ped(S = 50, D = 3)
V_ped(S = 32.3, M = 12)
V_ped(S = 32.3, M = 0.2)
#'     - It follows <Table 14-1> in KHCM(2013), p.616.
#' @param S Pedestrian walking speed(m/min).
#' @param D Pedestrian walking density(person/㎡).
#' @param M Pedestrian occupied space(㎡/person).
#' @keywords pedestrian LOS level of service road
#' @seealso \code{\link{V_ped}}
#' @export LOS_road_ped
#' @examples
#' LOS_road_ped(S = 15.32, D = 2.3)
#' LOS_road_ped(S = 43.21, M = 19.22)
LOS_road_ped <- function(S = NULL, D = NULL, M = NULL){
V <- V_ped(S = S, D = D, M = M)
if (is.numeric(V) == TRUE){
if (V >= 0 & V <= 20){los <- 'A'}
else if (V > 20 & V <= 32){los <- 'B'}
else if (V > 32 & V <= 46){los <- 'C'}
else if (V > 46 & V <= 70){los <- 'D'}
else if (V > 70 & V <= 106){los <- 'E'}
else if (V > 106){los <- 'F'}
else {los <- 'Error : Please check [S], [D], [M].'}
}
else{
if (is.null(M) == FALSE){
if (M >= 3.3){los <- 'A'}
else if (M >= 2.0 & M < 3.3){los <- 'B'}
else if (M >= 1.4 & M < 2.0){los <- 'C'}
else if (M >= 0.9 & M < 1.4){los <- 'D'}
else if (M >= 0.38 & M < 0.9){los <- 'E'}
else if (M < 0.38 & M > 0){los <- 'F'}
else {los <- 'Error : [M] must be positive. Please check that.'}
}
else {
if (is.null(D) == FALSE){
if (D <= 0.3){los <- 'A'}
else if (D <= 0.5 & D > 0.3){los <- 'B'}
else if (D <= 0.7 & D > 0.5){los <- 'C'}
else if (D <= 1.1 & D > 0.7){los <- 'D'}
else if (D <= 2.6 & D > 1.1){los <- 'E'}
else if (D > 2.6){los <- 'F'}
else {los <- 'Error : [D] must be positive. Please check that.'}
}
else {
if (is.null(S) == FALSE){
if (S >= 75){los <- 'A'}
else if (S >= 72 & S < 75){los <- 'B'}
else if (S >= 69 & S < 72){los <- 'C'}
else if (S >= 62 & S < 69){los <- 'D'}
else if (S >= 40 & S < 62){los <- 'E'}
else if (S < 40 & S > 0){los <- 'F'}
else {los <- 'Error : [M] must be positive. Please check that.'}
}
else {los <- 'Error : [S] must be positive. Please check that.'}
}
}
}
los
}
LOS_road_ped(S = 15.32, D = 2.3)
LOS_road_ped(S = 43.21, M = 19.22)
#'       it is considered to form a pedestrian group.
#'     * It follows <Table 14-1> in KHCM(2013), p.616
#' @param V_15 Observed peak hour 15-minute pedestrian traffic volume(person/15min/m)
#' @param S Walking speed (m/min)
#' @param D Walking density (person/㎡)
#' @param M Pedestrian occupied space (㎡/person)
#' @export LOS_stair_ped
#' @examples
#' LOS_stair_ped(group = 'no', S = 13.2, D = 33.92)
#' LOS_stair_ped(group = 'yes', S = 75.233, M = 21.74)
LOS_stair_ped <- function(V_15 = NULL, S = NULL, D = NULL, M = NULL){
v <- V_ped(S = S, D = D, M = M)
if (is.numeric(v) == TRUE){
if (V_15 < 450 & V_15 > 0){
if (v >= 0 & v <= 18){los <- 'A'}
else if (v > 18 & v <= 20){los <- 'B'}
else if (v > 20 & v <= 25){los <- 'C'}
else if (v > 25 & v <= 32){los <- 'D'}
else if (v > 32 & v <= 52){los <- 'E'}
else if (v > 52){los <- 'F'}
else {los <- 'Error : Please check [S], [D], [M].'}
}
else if (V_15 >= 450){
if (v >= 0 & v <= 43){los <- 'A'}
else if (v > 43 & v <= 50){los <- 'B'}
else if (v > 50 & v <= 65){los <- 'C'}
else if (v > 95 & v <= 69){los <- 'D'}
else if (v > 69 & v <= 74){los <- 'E'}
else if (v > 74){los <- 'F'}
else {los <- 'Error : Please check [S], [D], [M].'}
}
else {los <- 'Error : [V_15] must be positive(person/15min/m). Please check that.'}
}
else {los <- v}
los
}
LOS_stair_ped(V_15 = 322, S = 13.2, D = 33.92)
LOS_stair_ped(V_15 = 944, S = 75.233, M = 21.74)
#' Pedestrian service level in the waiting area. According to the standard Korean body type,
#'     the area including the extra width is calculated as about 0.2㎡ (this is the standard for service level E),
#'     and this is expressed as the service level in the waiting space.
#'     It follows <Table 14-5> in KHCM(2013), p.618.
#' @param D Pedestrian walking density (person/㎡)
#' @param M Pedestrian occupied space (㎡/person)
#' @export LOS_wait_ped
#' @examples
#' LOS_wait_ped(D = 0.45)
#' LOS_wait_ped(M = 1.44456)
LOS_wait_ped <- function(D = NULL, M = NULL){
if (is.null(D) == FALSE){
if (D >= 1.0){los <- 'A'}
else if (D >= 0.8 & D < 1.0){los <- 'B'}
else if (D >= 0.6 & D < 0.8){los <- 'C'}
else if (D >= 0.4 & D < 0.6){los <- 'D'}
else if (D >= 0.2 & D < 0.4){los <- 'E'}
else if (D < 0.2 & D > 0){los <- 'F'}
else {los <- 'Error : [D] must be positive. Please check that.'}
}
else{
if (is.null(M) == FALSE){
if (M <= 1.1){los <- 'A'}
else if (M <= 1.6 & M > 1.1){los <- 'B'}
else if (M <= 2.0 & M > 1.6){los <- 'C'}
else if (M <= 2.5 & M > 2.0){los <- 'D'}
else if (M <= 5.0 & M > 2.5){los <- 'E'}
else if (M > 5.0){los <- 'F'}
else {los <- 'Error : [M] must be positive. Please check that.'}
}
else {los <- 'Error : At least one of [D] or [M] is necessary. Please check that.'}
}
los
}
LOS_wait_ped(D = 0.45)
LOS_wait_ped(M = 1.44456)
#'     It is determined for the average pedestrian delay that a pedestrian waits to cross the crosswalk,
#'     and the size of the space occupied by the pedestrian crossing the crosswalk.
#'     It follows <Table 14-6> in KHCM(2013), p.619.
#' @param d Average pedestrian delay (sec/person). See \code{\link{d_p_ped}}
#' @export LOS_cross_ped
#' @keywords LOS level of service signalized cross section crossroad crosswalk pedestrian
#' @seealso \code{\link{d_p_ped}}
#' @examples
#' LOS_cross_ped(d = 34.2)
#' LOS_cross_ped(84.56)
LOS_cross_ped <- function(d = NULL){
if (d >= 0 & d <= 15){los <- 'A'}
else if (d > 15 & d <= 30){los <- 'B'}
else if (d > 30 & d <= 45){los <- 'C'}
else if (d > 45 & d <= 60){los <- 'D'}
else if (d > 60 & d <= 90){los <- 'E'}
else if (d > 90){los <- 'F'}
else {los <- 'Error : [d] must be positive(sec/person). Please check that.'}
los
}
LOS_cross_ped(d = 34.2)
LOS_cross_ped(84.56)
#'
#' Effective sidewalk width on pedestrian roads.
#'     The actual sidewalk width is subtracted from the sidewalk width obstructed by the facility.
#'     It follows <Formula 14-3> in KHCM(2013), p.620.
#' @param W_T Actual sidewalk width(m)
#' @param W_O The width of the sidewalk obstructed by the facility(m). See \code{\link{W_O_ped}}
#' @keywords Effective Sidewalk Width pedestrian
#' @seealso \code{\link{W_O_ped}}
#' @export W_E_ped
#' @examples
W_E_ped <- function(W_T = NULL, W_O = NULL){
if (W_T > 0){
if (W_O >= 0){
w <- W_T - W_O
}
else {w <- 'Error : [W_O] must be >= 0(m). Please check that.'}
}
else {w <- 'Error : [W_T] must be positive(m). Please check that.'}
w
}
W_E_ped(3.5, 1.1)
#' Effective sidewalk width
#'
#' Calculation of effective sidewalk width for pedestrian roads for the planning and design of pedestrian roads
#'     It follows <Formula 14-10> in KHCM(2013), p.625.
#' @param V Future Demand Pedestrian Traffic Volume (person/min)
#' @param SV_i Service pedestrian traffic flow rate at service level i (person/min/m)
#' @keywords
#' @export W_E_plan_ped
#' @examples
W_E_plan_ped <- function(V = NULL, SV_i = NULL){
if (V > 0){
if (SV_i > 0){w <- V / SV_i}
else {w <- 'Error : [SV_i] must be positive(person/min/m). Please check that.'}
}
else {w <- 'Error : [V] must be positive(person/min). Please check that.'}
w
}
W_E_plan_ped(V = 382, SV_i = 100)
#' @param tree_guard Number of tree guard
#' @param pillar Number of pillar
#' @param main_door Number of main door
#' @param revolving_door Number of revolving door
#' @param pipe Number of pipe connection
#' @param awn_pillar Number of awning pillar
#' @param valtype Choose one from : \code{'max'}, \code{'min'}, \code{'mean'}
#' @export W_O(m)
#' @seealso
#' @examples
W_O <- function(lamppost = 0, signal_controller = 0, fireplug = 0,
sign = 0, mailbox = 0, p_booth = 0, trash_can = 0,
curb = 0, subway_stair = 0, tree = 0, tree_guard = 0,
pillar = 0, entrance_stair = 0, revolving_door = 0, pipe = 0, awn_pillar = 0,
valtype = 0){
if (valtype == 'max'){
w <- lamppost * 1.1 + signal_controller * 1.2 + fireplug * 0.9 +
sign * 0.6 + mailbox * 1.1 + p_booth * 1.2 + trash_can * 0.9 +
curb * 0.5 + subway_stair * 2.1 + tree * 1.2 + tree_guard * 1.5 +
pillar * 0.9 + entrance_stair * 1.8 + revolving_dor * 2.1 + pipe * 0.3 + awn_pillar * 0.8
}
else if (valtype == 'min'){
w <- lamppost * 0.8 + signal_controller * 0.9 + fireplug * 0.8 +
sign * 0.6 + mailbox * 1.0 + p_booth * 1.2 + trash_can * 0.9 +
curb * 0.5 + subway_stair * 1.7 + tree * 0.6 + tree_guard * 1.5 +
pillar * 0.8 + entrance_stair * 0.6 + revolving_dor * 1.5 + pipe * 0.3 + awn_pillar * 0.8
}
else if (valtype == 'mean'){
w <- lamppost *0.95 + signal_controller * 1.05 + fireplug * 0.85 +
sign * 0.6 + mailbox * 1.05 + p_booth * 1.2 + trash_can * 0.9 +
curb * 0.5 + subway_stair * 1.9 + tree * 0.9 + tree_guard * 1.5 +
pillar * 0.85 + entrance_stair * 1.2 + revolving_dor * 1.8 + pipe * 0.3 + awn_pillar * 0.8
}
else {w <- 'Error : [valtype] must be one of [max], [min], [mean]. Please check that.'}
w
}
W_O_ped(lamppost = 3, signal_controller = 1, fireplug = 1, trash_can = 3, tree = 2, valtype = 'max')
#' @param tree_guard Number of tree guard
#' @param pillar Number of pillar
#' @param main_door Number of main door
#' @param revolving_door Number of revolving door
#' @param pipe Number of pipe connection
#' @param awn_pillar Number of awning pillar
#' @param valtype Choose one from : \code{'max'}, \code{'min'}, \code{'mean'}
#' @export W_O_ped(m)
#' @seealso
#' @examples
W_O_ped <- function(lamppost = 0, signal_controller = 0, fireplug = 0,
sign = 0, mailbox = 0, p_booth = 0, trash_can = 0,
curb = 0, subway_stair = 0, tree = 0, tree_guard = 0,
pillar = 0, entrance_stair = 0, revolving_door = 0, pipe = 0, awn_pillar = 0,
valtype = 0){
if (valtype == 'max'){
w <- lamppost * 1.1 + signal_controller * 1.2 + fireplug * 0.9 +
sign * 0.6 + mailbox * 1.1 + p_booth * 1.2 + trash_can * 0.9 +
curb * 0.5 + subway_stair * 2.1 + tree * 1.2 + tree_guard * 1.5 +
pillar * 0.9 + entrance_stair * 1.8 + revolving_dor * 2.1 + pipe * 0.3 + awn_pillar * 0.8
}
else if (valtype == 'min'){
w <- lamppost * 0.8 + signal_controller * 0.9 + fireplug * 0.8 +
sign * 0.6 + mailbox * 1.0 + p_booth * 1.2 + trash_can * 0.9 +
curb * 0.5 + subway_stair * 1.7 + tree * 0.6 + tree_guard * 1.5 +
pillar * 0.8 + entrance_stair * 0.6 + revolving_dor * 1.5 + pipe * 0.3 + awn_pillar * 0.8
}
else if (valtype == 'mean'){
w <- lamppost *0.95 + signal_controller * 1.05 + fireplug * 0.85 +
sign * 0.6 + mailbox * 1.05 + p_booth * 1.2 + trash_can * 0.9 +
curb * 0.5 + subway_stair * 1.9 + tree * 0.9 + tree_guard * 1.5 +
pillar * 0.85 + entrance_stair * 1.2 + revolving_dor * 1.8 + pipe * 0.3 + awn_pillar * 0.8
}
else {w <- 'Error : [valtype] must be one of [max], [min], [mean]. Please check that.'}
w
}
W_O_ped(lamppost = 3, signal_controller = 1, fireplug = 1, trash_can = 3, tree = 2, valtype = 'max')
#' @param tree_guard Number of tree guard
#' @param pillar Number of pillar
#' @param main_door Number of main door
#' @param revolving_door Number of revolving door
#' @param pipe Number of pipe connection
#' @param awn_pillar Number of awning pillar
#' @param valtype Choose one from : \code{'max'}, \code{'min'}, \code{'mean'}
#' @export W_O_ped(m)
#' @seealso
#' @examples
W_O_ped <- function(lamppost = 0, signal_controller = 0, fireplug = 0,
sign = 0, mailbox = 0, p_booth = 0, trash_can = 0,
curb = 0, subway_stair = 0, tree = 0, tree_guard = 0,
pillar = 0, entrance_stair = 0, revolving_door = 0, pipe = 0, awn_pillar = 0,
valtype = 0){
if (valtype == 'max'){
w <- lamppost * 1.1 + signal_controller * 1.2 + fireplug * 0.9 +
sign * 0.6 + mailbox * 1.1 + p_booth * 1.2 + trash_can * 0.9 +
curb * 0.5 + subway_stair * 2.1 + tree * 1.2 + tree_guard * 1.5 +
pillar * 0.9 + entrance_stair * 1.8 + revolving_door * 2.1 + pipe * 0.3 + awn_pillar * 0.8
}
else if (valtype == 'min'){
w <- lamppost * 0.8 + signal_controller * 0.9 + fireplug * 0.8 +
sign * 0.6 + mailbox * 1.0 + p_booth * 1.2 + trash_can * 0.9 +
curb * 0.5 + subway_stair * 1.7 + tree * 0.6 + tree_guard * 1.5 +
pillar * 0.8 + entrance_stair * 0.6 + revolving_door * 1.5 + pipe * 0.3 + awn_pillar * 0.8
}
else if (valtype == 'mean'){
w <- lamppost *0.95 + signal_controller * 1.05 + fireplug * 0.85 +
sign * 0.6 + mailbox * 1.05 + p_booth * 1.2 + trash_can * 0.9 +
curb * 0.5 + subway_stair * 1.9 + tree * 0.9 + tree_guard * 1.5 +
pillar * 0.85 + entrance_stair * 1.2 + revolving_door * 1.8 + pipe * 0.3 + awn_pillar * 0.8
}
else {w <- 'Error : [valtype] must be one of [max], [min], [mean]. Please check that.'}
w
}
W_O_ped(lamppost = 3, signal_controller = 1, fireplug = 1, trash_can = 3, tree = 2, valtype = 'max')
#' Peak-converted pedestrian traffic flow rate.(person/min/m)
#'     The peak 15-minute pedestrian walking traffic volume surveyed was converted to the pedestrian traffic flow rate (person/min/m).
#'     This value is used to determine the LOS using \code{\link{LOS_road_ped}}.
#'     It follows <Formula 14-4> in KHCM(2013), p.620.
#' @param V_15 Pedestrian traffic volume during peak 15 minutes(person/15min/m)
#' @param W_E Effective pedestrian sidewalk width(m). See \code{\link{W_E_ped}}
#' @keywords peak hour converted pedestrian traffic flow rate
#' @seealso \code{\link{LOS_road_ped}}, \code{\link{W_E_ped}}
#' @export V_P_ped pedestrian traffic flow rate (person/min/m)
#' @examples
V_P_ped <- function(V_15 = NULL, W_E = NULL){
if (V_15 >= 0){
if (W_E > 0){
vp <- V_15 / (15 * W_E)
}
else {vp <- 'Error : [W_E] must be positive(m). Please check that.'}
}
else {vp <- 'Error : [V_15] must be positive(person/15min/m). Please check that.'}
vp
}
V_P_ped(V_15 = 393, W_E = 11)
V_P_ped(V_15 = 393, W_E = 3.2)
#'
#' Average pedestrian delay(seconds).
#'     It is used when analyzing the service level at signal crosswalks.
#'     It follows <Formula 14-5> in KHCM(2013), p.623.
#' @param C Signal period(seconds)
#' @param g Effective green time for pedestrians (seconds)
#' @keywords average pedestrian delay
#' @seealso \code{\link{LOS_cross_ped}}
#' @export d_p_ped Average pedestrian delay(seconds)
#' @examples
d_p_ped <- function(C = NULL, g = NULL){
if (C > 0){
if (g > 0){
d <- (C - g)**2 / (2 * C)
}
else {d <- 'Error : [g] must be positive(seconds). Please check that.'}
}
else {d <- 'Error : [C] must be positive(seconds). Please check that'}
d
}
d_p_ped(C = 120, g = 30)
#' @param L Crosswalk length (m)
#' @param S_p Average speed of pedestrians (m/s)
#' @param N_ped Pedestrians (persons) traversed in one cycle
#' @param W_E Effective crosswalk width(m). See \code{\link{W_E_ped}}
#' @keywords total crossing time pedestrian signal crosswalk
#' @seealso \code{\link{W_E_ped}}, \code{\link{T_cross_ped}}, \code{\link{LOS_cross_ped}}
#' @details 3.2 means pedestrian start-up time(seconds).
#'     It means the time until the first and last pedestrians in the preceding platoon completely enter the crosswalk.
#' @export t_ped
#' @examples
t_ped <- function(L = NULL, S_p = NULL, N_ped = NULL, W_E = NULL){
if (L > 0){
if (S_p > 0){
if (N_ped > 0){
if (W_E > 0){t <- 3.2 + (L / S_p) + (0.81 * N_ped / W_E)}
else {t <- 'Error : [W_E] must be positive(m). Please check that.'}
}
else {t <- 'Error : [N_ped] must be positive(persons). Please check that.'}
}
else {t <- 'Error : [S_p] must be positive(m/s). Please check that.'}
}
else {t <- 'Error : [L] must be positive(m). Please check that.'}
t
}
t_ped(L = 30, S_p = 3.3, N_ped = 100, W_E = 3)
#' Time-space area of pedestrians at signal crosswalks (㎡-person)
#' It follows <Formula 14-7> in KHCM(2013), p.624
#' @param L Crosswalk length (m)
#' @param S_p Average speed of pedestrians (m/s)
#' @param WALK_FDW Effective pedestrian green time at crosswalks (seconds)
#' @param W_E Effective crosswalk width(m). See \code{\link{W_E_ped}}
#' @keywords time-space area pedestrian signal crosswalk
#' @seealso \code{\link{W_E_ped}}, \code{\link{T_cross_ped}}, \code{\link{M_cross_ped}}, \code{\link{LOS_road_ped}}
#' @export TS_cross_ped
#' @examples
TS_cross_ped <- function(L = NULL, W_E = NULL, S_p = NULL, WALK_FDW = NULL){
if (L > 0){
if (W_E > 0){
if (S_p > 0){
if (WALK_FDW > 0){ts <- L * W_E * (WALK_FDW - (L / (2 * S_p)))}
else {ts <- 'Error : [WALK_FDW] must be positive(s). Please check that.'}
}
else {ts <- 'Error : [S_p] must be positive(m/s). Please check that.'}
}
else {ts <- 'Error : [W_E] must be positive(m). Please check that.'}
}
else {ts <- 'Error : [L] must be positive(m). Please check that.'}
ts
}
TS_cross_ped(L = 25, W_E = 3.3, S_p = 3, WALK_FDW = 50)
#' Total Crosswalk Occupation Time of Pedestrians at Signal Crosswalks
#'
#' Total crosswalk occupation time of pedestrians at signal crosswalks(person-second)
#'     It follows <Formula 14-8> in KHCM(2013), p.624.
#' @param V_i Number of pedestrians crossing in direction (persons)
#' @param V_o Number of pedestrians crossing opposite direction (persons)
#' @param t Total traversing time (seconds)
#' @keywords total crosswalk occupation time pedestrian signal crosswalk
#' @export T_cross_ped
#' @examples
T_cross_ped <- function(V_i = NULL, V_o = NULL, t = NULL){
if (V_i > 0 & V_o > 0 & t > 0){res <- (V_i + V_o) / t}
else {res <- 'Error : [V_i], [V_o], [t] must be positive. Please check that.'}
res
}
T_cross_ped(V_i = 132, V_o = 22, t = 40)
#'
#' Total crosswalk occupation time of pedestrians at signal crosswalks(person-second)
#'     It follows <Formula 14-8> in KHCM(2013), p.624.
#' @param V_i Number of pedestrians crossing in direction (persons)
#' @param V_o Number of pedestrians crossing opposite direction (persons)
#' @param t Total traversing time (seconds)
#' @keywords total crosswalk occupation time pedestrian signal crosswalk
#' @export T_cross_ped
#' @examples
#' T_cross_ped(V_i = 132, V_o = 22, t = 40)
T_cross_ped <- function(V_i = NULL, V_o = NULL, t = NULL){
if (V_i > 0 & V_o > 0 & t > 0){res <- (V_i + V_o) * t}
else {res <- 'Error : [V_i], [V_o], [t] must be positive. Please check that.'}
res
}
#'
#' Crosswalk occupied space per pedestrian at signal crosswalk(㎡/person).
#'     It follows <Formula 14-7> in KHCM(2013), p.624
#'     Based on this result, the service level is judged according to the value of the occupied space presented in <Table 14-1>.
#' @param TS Time-space area of pedestrians at signal crosswalks (㎡-person). See \code{\link{TS_cross_ped}}
#' @param TT Total crosswalk occupation time of pedestrians at signal crosswalks(person-second). See \code{\link{T_cross_ped}}
#' @keywords crosswalk signal occupied space pedestrian
#' @seealso \code{\link{TS_cross_ped}}, \code{\link{T_cross_ped}}
#' @export M_cross_ped
#' @examples
M_cross_ped <- function(TS = NULL, TT = NULL){
if (TS > 0 & TT > 0){m <- TS / TT}
else {m <- 'Error : [TS], [TT] must be positive. Please check that.'}
m
}
M_cross_ped(TS = 3000, T = 2134)
M_cross_ped(TS = 3000, T = 253)
M_cross_ped(TS = 100, T = 253)
M_cross_ped(TS = 2000, T = 253)
M_cross_ped(TS = 1200, T = 253)
M_cross_ped(TS = 1000, T = 253)
M_cross_ped(TS = 900, T = 253)
M_cross_ped(TS = 800, T = 253)
