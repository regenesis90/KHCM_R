if (V_o == 400){f <- 6.3}
if (V_o == 600){f <- 5.5}
if (V_o == 800){f <- 4.8}
if (V_o == 1000){f <- 4.0}
if (V_o == 1200){f <- 3.2}
if (V_o == 1400){f <- 2.4}
if (V_o == 1600){f <- 1.7}
}
if (V_d == 1200){
if (V_o == 200){f <- 7.5}
if (V_o == 400){f <- 6.7}
if (V_o == 600){f <- 5.9}
if (V_o == 800){f <- 5.1}
if (V_o == 1000){f <- 4.4}
if (V_o == 1200){f <- 3.6}
if (V_o == 1400){f <- 2.8}
if (V_o == 1600){f <- 2.0}
}
if (V_d == 1400){
if (V_o == 200){f <- 7.8}
if (V_o == 400){f <- 7.1}
if (V_o == 600){f <- 6.3}
if (V_o == 800){f <- 5.5}
if (V_o == 1000){f <- 4.7}
if (V_o == 1200){f <- 4.0}
if (V_o == 1400){f <- 3.2}
if (V_o == 1600){f <- 2.4}
}
if (V_d >= 1600){
if (V_o == 200){f <- 8.2}
if (V_o == 400){f <- 7.4}
if (V_o == 600){f <- 6.7}
if (V_o == 800){f <- 5.9}
if (V_o == 1000){f <- 5.1}
if (V_o == 1200){f <- 4.3}
if (V_o == 1400){f <- 3.5}
if (V_o == 1600){f <- 2.8}
}
}
if (overtaking_prop == 0.8){
if (V_d == 200){
if (V_o == 200){f <- 6.0}
if (V_o == 400){f <- 5.3}
if (V_o == 600){f <- 4.5}
if (V_o == 800){f <- 3.7}
if (V_o == 1000){f <- 2.9}
if (V_o == 1200){f <- 2.2}
if (V_o == 1400){f <- 1.4}
if (V_o == 1600){f <- 0.6}
}
if (V_d == 400){
if (V_o == 200){f <- 6.4}
if (V_o == 400){f <- 5.6}
if (V_o == 600){f <- 4.9}
if (V_o == 800){f <- 4.1}
if (V_o == 1000){f <- 3.3}
if (V_o == 1200){f <- 2.5}
if (V_o == 1400){f <- 1.7}
if (V_o == 1600){f <- 1.0}
}
if (V_d == 600){
if (V_o == 200){f <- 6.8}
if (V_o == 400){f <- 6.0}
if (V_o == 600){f <- 5.2}
if (V_o == 800){f <- 4.4}
if (V_o == 1000){f <- 3.7}
if (V_o == 1200){f <- 2.9}
if (V_o == 1400){f <- 2.1}
if (V_o == 1600){f <- 1.3}
}
if (V_d == 800){
if (V_o == 200){f <- 7.2}
if (V_o == 400){f <- 6.4}
if (V_o == 600){f <- 5.6}
if (V_o == 800){f <- 4.8}
if (V_o == 1000){f <- 4.0}
if (V_o == 1200){f <- 3.3}
if (V_o == 1400){f <- 2.5}
if (V_o == 1600){f <- 1.7}
}
if (V_d == 1000){
if (V_o == 200){f <- 7.5}
if (V_o == 400){f <- 6.7}
if (V_o == 600){f <- 6.0}
if (V_o == 800){f <- 5.2}
if (V_o == 1000){f <- 4.4}
if (V_o == 1200){f <- 3.6}
if (V_o == 1400){f <- 2.9}
if (V_o == 1600){f <- 2.1}
}
if (V_d == 1200){
if (V_o == 200){f <- 7.9}
if (V_o == 400){f <- 7.1}
if (V_o == 600){f <- 6.3}
if (V_o == 800){f <- 5.6}
if (V_o == 1000){f <- 4.8}
if (V_o == 1200){f <- 4.0}
if (V_o == 1400){f <- 3.2}
if (V_o == 1600){f <- 2.4}
}
if (V_d == 1400){
if (V_o == 200){f <- 8.3}
if (V_o == 400){f <- 7.5}
if (V_o == 600){f <- 6.7}
if (V_o == 800){f <- 5.9}
if (V_o == 1000){f <- 5.1}
if (V_o == 1200){f <- 4.4}
if (V_o == 1400){f <- 3.6}
if (V_o == 1600){f <- 2.8}
}
if (V_d >= 1600){
if (V_o == 200){f <- 8.6}
if (V_o == 400){f <- 7.9}
if (V_o == 600){f <- 7.1}
if (V_o == 800){f <- 6.3}
if (V_o == 1000){f <- 5.5}
if (V_o == 1200){f <- 4.7}
if (V_o == 1400){f <- 4.0}
if (V_o == 1600){f <- 3.2}
}
}
if (overtaking_prop == 1.0){
if (V_d == 200){
if (V_o == 200){f <- 6.5}
if (V_o == 400){f <- 5.7}
if (V_o == 600){f <- 4.9}
if (V_o == 800){f <- 4.1}
if (V_o == 1000){f <- 3.4}
if (V_o == 1200){f <- 2.6}
if (V_o == 1400){f <- 1.8}
if (V_o == 1600){f <- 1.0}
}
if (V_d == 400){
if (V_o == 200){f <- 6.8}
if (V_o == 400){f <- 6.1}
if (V_o == 600){f <- 5.3}
if (V_o == 800){f <- 4.5}
if (V_o == 1000){f <- 3.7}
if (V_o == 1200){f <- 2.9}
if (V_o == 1400){f <- 2.2}
if (V_o == 1600){f <- 1.4}
}
if (V_d == 600){
if (V_o == 200){f <- 7.2}
if (V_o == 400){f <- 6.4}
if (V_o == 600){f <- 5.6}
if (V_o == 800){f <- 4.9}
if (V_o == 1000){f <- 4.1}
if (V_o == 1200){f <- 3.3}
if (V_o == 1400){f <- 2.5}
if (V_o == 1600){f <- 1.8}
}
if (V_d == 800){
if (V_o == 200){f <- 7.6}
if (V_o == 400){f <- 6.8}
if (V_o == 600){f <- 6.0}
if (V_o == 800){f <- 5.2}
if (V_o == 1000){f <- 4.5}
if (V_o == 1200){f <- 3.7}
if (V_o == 1400){f <- 2.9}
if (V_o == 1600){f <- 2.1}
}
if (V_d == 1000){
if (V_o == 200){f <- 7.9}
if (V_o == 400){f <- 7.2}
if (V_o == 600){f <- 6.4}
if (V_o == 800){f <- 5.6}
if (V_o == 1000){f <- 4.8}
if (V_o == 1200){f <- 4.1}
if (V_o == 1400){f <- 3.3}
if (V_o == 1600){f <- 2.5}
}
if (V_d == 1200){
if (V_o == 200){f <- 8.3}
if (V_o == 400){f <- 7.5}
if (V_o == 600){f <- 6.8}
if (V_o == 800){f <- 6.0}
if (V_o == 1000){f <- 5.2}
if (V_o == 1200){f <- 4.4}
if (V_o == 1400){f <- 3.6}
if (V_o == 1600){f <- 2.9}
}
if (V_d == 1400){
if (V_o == 200){f <- 8.7}
if (V_o == 400){f <- 7.9}
if (V_o == 600){f <- 7.1}
if (V_o == 800){f <- 6.3}
if (V_o == 1000){f <- 5.6}
if (V_o == 1200){f <- 4.8}
if (V_o == 1400){f <- 4.0}
if (V_o == 1600){f <- 3.2}
}
if (V_d >= 1600){
if (V_o == 200){f <- 9.1}
if (V_o == 400){f <- 8.3}
if (V_o == 600){f <- 7.5}
if (V_o == 800){f <- 6.7}
if (V_o == 1000){f <- 5.9}
if (V_o == 1200){f <- 5.2}
if (V_o == 1400){f <- 4.4}
if (V_o == 1600){f <- 3.6}
}
}
}
f
}
}
f_np(V_d = 800, V_o = 600, overtaking_prop = 0.4, output = 'travel_speed')
f_np(1000, 1200, 0.2, 'TDR')
#' Correction Coefficient of Total Delay in 2+1 Lane Road Section(f_pl)
#'
#' This function follows <Table 7-14>
#' @param V *Numeric* Traffic Volume(pcphpl)
#' @keywords
#' @export f_pl Correction Coefficient of Total Delay in 2+1 Lane Road Section(f_pl)
#' @examples
f_pl <- function(V = NULL){
if (V > 0 & V <= 100){f <- 0.789}
if (V > 100 & V <= 200){f <- 0.761}
if (V > 200 & V <= 300){f <- 0.735}
if (V > 300 & V <= 400){f <- 0.713}
if (V > 400 & V <= 500){f <- 0.694}
if (V > 500 & V <= 600){f <- 0.678}
if (V > 600 & V <= 700){f <- 0.665}
if (V > 700 & V <= 800){f <- 0.655}
if (V > 800 & V <= 900){f <- 0.648}
if (V > 900 & V <= 1000){f <- 0.645}
if (V > 1000 & V <= 1100){f <- 0.644}
if (V > 1100 & V <= 1200){f <- 0.646}
if (V > 1200 & V <= 1300){f <- 0.651}
if (V > 1300 & V <= 1400){f <- 0.660}
if (V > 1400 & V <= 1500){f <- 0.671}
if (V > 1500 & V <= 1600){f <- 0.686}
if (V > 1600 & V <= 1700){f <- 0.704}
f
}
f_pl(V = 1391)
f_pl(999)
#' @param L_up_i *Numeric* Analysis section length (m) upstream of the overtaking lane section among the i-th analysis target section
#' @param L_dn_i *Numeric* The length of the analysis target section before entering the i-th overtaking lane (m)
#' @param L_pl_i *Numeric* Section length of the i-th overtaking lane (m)
#' @param f_pl_i *Numeric* Total delay rate correction factor for the i-th overtaking lane section. See f_pl().
#' @param f_w_D_up_i *Numeric* Lane width and lateral margin correction factor in the upstream section of the i-th overtaking lane. See f_w_D().
#' @param f_w_D_pl_i *Numeric* Lane width and side clearance width correction factor for the i-th overtaking lane section. See f_w_D().
#' @param f_w_D_dn_i *Numeric* Lane width and side clearance width correction factor in the downstream section of the i-th overtaking lane. See f_w_D().
#' @keywords
#' @export TDR_2lane_plus1 Correction Coefficient of Total Delay in 2+1 Lane Road Section(f_pl)
#' @examples
TDR_2lane_plus1 <- function(TDR_up_i = NULL, TDR_dn_i = NULL, L_up_i = NULL, L_dn_i = NULL, L_pl_i = NULL, f_pl_i = NULL, f_w_D_up_i = NULL, f_w_D_dn_i = NULL, f_w_D_pl_i = NULL){
tdr_sum <- 0
for (i in 1:length[TDR_up_i]){
tdr <- (TDR_up_i * (L_up_i + (f_pl_i * ((1 + f_w_D_pl_i/100)/(1 + f_w_D_up_i/100)) * L_pl_i)) + TDR_dn_i * ((1 + f_w_D_pl_i/100)/(1 + f_w_D_dn_i/100)) * L_dn_i)/(L_up_i[i] + L_pl_i[i] + L_dn_i[i])
tdr_sum <- tdr_sum + tdr
}
tdr_sum
}
#' @param L_up_i *Numeric* Analysis section length (m) upstream of the overtaking lane section among the i-th analysis target section
#' @param L_dn_i *Numeric* The length of the analysis target section before entering the i-th overtaking lane (m)
#' @param L_pl_i *Numeric* Section length of the i-th overtaking lane (m)
#' @param f_pl_i *Numeric* Total delay rate correction factor for the i-th overtaking lane section. See f_pl().
#' @param f_w_D_up_i *Numeric* Lane width and lateral margin correction factor in the upstream section of the i-th overtaking lane. See f_w_D().
#' @param f_w_D_pl_i *Numeric* Lane width and side clearance width correction factor for the i-th overtaking lane section. See f_w_D().
#' @param f_w_D_dn_i *Numeric* Lane width and side clearance width correction factor in the downstream section of the i-th overtaking lane. See f_w_D().
#' @keywords
#' @export TDR_2lane_plus1 Correction Coefficient of Total Delay in 2+1 Lane Road Section(f_pl)
#' @examples
TDR_2lane_plus1 <- function(TDR_up_i = NULL, TDR_dn_i = NULL, L_up_i = NULL, L_dn_i = NULL, L_pl_i = NULL, f_pl_i = NULL, f_w_D_up_i = NULL, f_w_D_dn_i = NULL, f_w_D_pl_i = NULL){
tdr_sum <- 0
for (i in 1:length[TDR_up_i]){
tdr <- (TDR_up_i * (L_up_i + (f_pl_i * ((1 + f_w_D_pl_i/100)/(1 + f_w_D_up_i/100)) * L_pl_i)) + TDR_dn_i * ((1 + f_w_D_pl_i/100)/(1 + f_w_D_dn_i/100)) * L_dn_i)/(L_up_i[i] + L_pl_i[i] + L_dn_i[i])
tdr_sum <- tdr_sum + tdr
}
tdr_sum
}
#' @param L_up_i *Numeric* Analysis section length (m) upstream of the overtaking lane section among the i-th analysis target section
#' @param L_dn_i *Numeric* The length of the analysis target section before entering the i-th overtaking lane (m)
#' @param L_pl_i *Numeric* Section length of the i-th overtaking lane (m)
#' @param f_pl_i *Numeric* Total delay rate correction factor for the i-th overtaking lane section. See f_pl().
#' @param f_w_D_up_i *Numeric* Lane width and lateral margin correction factor in the upstream section of the i-th overtaking lane. See f_w_D().
#' @param f_w_D_pl_i *Numeric* Lane width and side clearance width correction factor for the i-th overtaking lane section. See f_w_D().
#' @param f_w_D_dn_i *Numeric* Lane width and side clearance width correction factor in the downstream section of the i-th overtaking lane. See f_w_D().
#' @keywords
#' @export TDR_2lane_plus1 Total Delay Rate for i Sections in One Direction on a 2+1 Lane Road(TDR_2lane_plus1, %)
#' @examples
TDR_2lane_plus1 <- function(TDR_up_i = NULL, TDR_dn_i = NULL, L_up_i = NULL, L_dn_i = NULL, L_pl_i = NULL, f_pl_i = NULL, f_w_D_up_i = NULL, f_w_D_dn_i = NULL, f_w_D_pl_i = NULL){
tdr_sum <- 0
for (i in 1:n){
tdr <- (TDR_up_i * (L_up_i + (f_pl_i * ((1 + f_w_D_pl_i/100)/(1 + f_w_D_up_i/100)) * L_pl_i)) + TDR_dn_i * ((1 + f_w_D_pl_i/100)/(1 + f_w_D_dn_i/100)) * L_dn_i)/(L_up_i[i] + L_pl_i[i] + L_dn_i[i])
tdr_sum <- tdr_sum + tdr
}
tdr_sum
}
#' @param fs_pl_i *Numeric* Traffic speed correction factor for the i-th overtaking lane section (<Table 7-15>)
#' @param L_up_i *Numeric* Analysis section length (m) upstream of the overtaking lane section among the i-th analysis target section
#' @param L_dn_i *Numeric* The length of the analysis target section before entering the i-th overtaking lane (m)
#' @param L_pl_i *Numeric* Section length of the i-th overtaking lane (m)
#' @param f_w_ATS_up_i *Numeric*
#' @param f_w_ATS_pl_i *Numeric* Lane width and side clearance width of the i-th overtaking lane section
#' @param f_w_ATS_dn_i *Numeric* Lane width and side clearance width of the downstream section of the i-th overtaking lane
#' @keywords
#' @export ATS_2lane_plus1 Average travel speed of a 2+1 lane road
#' @examples
ATS_2lane_plus1 <- function(n = NULL, ATS_up_i = NULL, ATS_dn_i = NULL, fs_pl_i = NULL, L_up_i = NULL, L_dn_i = NULL, L_pl_i = NULL, f_w_ATS_up_i = NULL, f_w_ATS_dn_i = NULL, f_w_ATS_pl_i = NULL){
ats_sum <- 0
for (i in 1:n){
p <- (ATS_up_i - f_w_ATS_up_i)/(ATS_up_i - f_w_ATS_pl_i)
q <- (ATS_up_i * fs_pl_i * p - f_w_ATS_pl_i)/(ATS_up_i * fs_pl_i * P - f_w_ATS_dn_i)
ats <- (L_up_i + L_pl_i + L_dn_i)/((L_up_i / ATS_up_i) + (L_pl_i / (ATS_up_i * fs_pl_i * p)) + (L_dn_i / (ATS_dn_i * q)))
ats_sum <- ats_sum + ats
}
ats_sum
}
#' Total Delay Rate Entire section in a 2+1 Lane Road(TDR_2lane_plus1_TD, %)
#'
#' This function follows <Formula 7-14>
#' @param TDR_2lane_plus1_IN *Numeric* TDR in the direction of progress
#' @param TDR_2lane_plus1_OUT *Numeric* TDR in opposite direction
#' @param L_IN *Numeric* Section length for analysis in the direction of progress(m)
#' @param L_OUT *Numeric* Section length for analysis in the opposite direction(m)
#' @keywords
#' @export TDR_2lane_plus1_TD Total Delay Rate for i Sections in One Direction on a 2+1 Lane Road(TDR_2lane_plus1, %)
#' @examples
TDR_2lane_plus1_TD <- function(TDR_2lane_plus1_IN = NULL, TDR_2lane_plus1_OUT = NULL, L_IN = NULL, L_OUT = NULL){
if (TDR_2lane_plus1_IN >= 0 ^ TDR_2lane_plus1_OUT >= 0 & L_IN >= 0 & L_OUT >= 0){
result <- ((TDR_2lane_plus1_IN * L_IN) + (TDR_2lane_plus1_OUT * L_OUT))/(L_IN + L_OUT)
result
}
}
#' Total Delay Rate Entire section in a 2+1 Lane Road(TDR_2lane_plus1_TD, %)
#'
#' This function follows <Formula 7-14>
#' @param TDR_2lane_plus1_IN *Numeric* TDR in the direction of progress
#' @param TDR_2lane_plus1_OUT *Numeric* TDR in opposite direction
#' @param L_IN *Numeric* Section length for analysis in the direction of progress(m)
#' @param L_OUT *Numeric* Section length for analysis in the opposite direction(m)
#' @keywords
#' @export TDR_2lane_plus1_TD Total Delay Rate for i Sections in One Direction on a 2+1 Lane Road(TDR_2lane_plus1, %)
#' @examples
TDR_2lane_plus1_TD <- function(TDR_2lane_plus1_IN = NULL, TDR_2lane_plus1_OUT = NULL, L_IN = NULL, L_OUT = NULL){
if (TDR_2lane_plus1_IN >= 0 & TDR_2lane_plus1_OUT >= 0 & L_IN >= 0 & L_OUT >= 0){
result <- ((TDR_2lane_plus1_IN * L_IN) + (TDR_2lane_plus1_OUT * L_OUT))/(L_IN + L_OUT)
result
}
}
TDR_2lane_plus1_TD(10.8, 2.1, 3.4, 3.2)
#'
#' This function follows <Formula 7-16>
#' @param ATS_2lane_plus1_IN *Numeric* ATS in the direction of progress
#' @param ATS_2lane_plus1_OUT *Numeric* ATS in opposite direction
#' @param L_IN *Numeric* Section length for analysis in the direction of progress(m)
#' @param L_OUT *Numeric* Section length for analysis in the opposite direction(m)
#' @keywords
#' @export ATS_2lane_plus1_TD
#' @examples
#' TDR_2lane_plus1_TD(10.8, 2.1, 3.4, 3.2)
ATS_2lane_plus1_TD <- function(ATS_2lane_plus1_IN = NULL, ATS_2lane_plus1_OUT = NULL, L_IN = NULL, L_OUT = NULL){
if (ATS_2lane_plus1_IN >= 0 & ATS_2lane_plus1_OUT >= 0 & L_IN >= 0 & L_OUT >= 0){
result <- (L_IN + L_OUT) / ((L_IN / ATS_2lane_plus1_IN) + (L_OUT / ATS_2lane_plus1_OUT))
result
}
}
ATS_2lane_plus1_TD(70, 55, 0.4, 1.3)
#' Level of Service(LOS) in Signalized Intersections.
#'
#' This function decides Level of Service(LOS). It follows <Table 8-2>
#' @param control_delay *Numeric* (s) Delay due to the reduction or stop of the lane group due to signal control, The increase in travel time compared to travel time when there is no deceleration or stop.
#' @keywords LOS Level of Service
#' @export LOS_signalized_intersection Level of Service. \code{A}, \code{B}, \code{C}, \code{D}, \code{E}, \code{F}, \code{FF}, \code{FFF}
#' @examples
LOS_signalized_intersection <- function(control_delay = NULL){
if (control_delay >= 0 & control_delay <= 15){LOS <- 'A'}
if (control_delay > 15 & control_delay <= 30){LOS <- 'B'}
if (control_delay > 30 & control_delay <= 50){LOS <- 'C'}
if (control_delay > 50 & control_delay <= 70){LOS <- 'D'}
if (control_delay > 70 & control_delay <= 100){LOS <- 'E'}
if (control_delay > 100 & control_delay <= 220){LOS <- 'F'}
if (control_delay > 220 & control_delay <= 340){LOS <- 'FF'}
if (control_delay > 340){LOS <- 'FFF'}
LOS
}
LOS_signalized_intersection(control_delay = 44)
LOS_signalized_intersection(157)
#' Lane Use Coefficient(F_U)
#'
#' This function decides Level of Service(LOS). It follows <Table 8-5>
#' @param V_avg *Numeric* Average traffic volume by lane.(vphpl)
#' @param design_level *Categorical* Choose one from : \code{C}, \code{D}, \code{E}
#' @param N *Numeric* Number of exclusive lanes going straight
#' @keywords Lane Use Coefficient
#' @export F_U
#' @examples
F_U <- function(V_avg = NULL, design_level = NULL, N = NULL){
if (V_avg <= 800 | design_level == 'C' | design_level == 'D'){
if (N == 1){f <- 1.00}
if (N == 2){f <- 1.02}
if (N == 3){f <- 1.10}
if (N >= 4){f <- 1.15}
}
if (V_avg > 800 | design_level == 'E'){
if (N == 1){f <- 1.00}
if (N == 2){f <- 1.00}
if (N == 3){f <- 1.05}
if (N >= 4){f <- 1.08}
}
}
F_U(V_avg = 1200, N = 3)
#' Lane Use Coefficient(F_U)
#'
#' This function decides Level of Service(LOS). It follows <Table 8-5>
#' @param V_avg *Numeric* Average traffic volume by lane.(vphpl)
#' @param design_level *Categorical* Choose one from : \code{C}, \code{D}, \code{E}
#' @param N *Numeric* Number of exclusive lanes going straight
#' @keywords Lane Use Coefficient
#' @export F_U
#' @examples
F_U <- function(V_avg = NULL, design_level = NULL, N = NULL){
if (V_avg <= 800 | design_level == 'C' | design_level == 'D'){
if (N == 1){f <- 1.00}
if (N == 2){f <- 1.02}
if (N == 3){f <- 1.10}
if (N >= 4){f <- 1.15}
}
if (V_avg > 800 | design_level == 'E'){
if (N == 1){f <- 1.00}
if (N == 2){f <- 1.00}
if (N == 3){f <- 1.05}
if (N >= 4){f <- 1.08}
}
f
}
F_U(V_avg = 1200, N = 3)
#' Lane Use Coefficient(F_U)
#'
#' This function decides Level of Service(LOS). It follows <Table 8-5>
#' @param V_avg *Numeric* Average traffic volume by lane.(vphpl)
#' @param design_level *Categorical* Choose one from : \code{C}, \code{D}, \code{E}
#' @param N *Numeric* Number of exclusive lanes going straight
#' @keywords Lane Use Coefficient
#' @export F_U
#' @examples
F_U <- function(V_avg = NULL, design_level = NULL, N = NULL){
if (is.null(V_avg) == FALSE){
if (V_avg <= 800){
if (N == 1){f <- 1.00}
if (N == 2){f <- 1.02}
if (N == 3){f <- 1.10}
if (N >= 4){f <- 1.15}
}
if (V_avg > 800){
if (N == 1){f <- 1.00}
if (N == 2){f <- 1.00}
if (N == 3){f <- 1.05}
if (N >= 4){f <- 1.08}
}
}
else {
if (design_level == 'C' | design_level == 'D'){
if (N == 1){f <- 1.00}
if (N == 2){f <- 1.02}
if (N == 3){f <- 1.10}
if (N >= 4){f <- 1.15}
}
if (design_level == 'E'){
if (N == 1){f <- 1.00}
if (N == 2){f <- 1.00}
if (N == 3){f <- 1.05}
if (N >= 4){f <- 1.08}
}
}
}
F_U(V_avg = 1200, N = 3)
#' Lane Use Coefficient(F_U)
#'
#' This function decides Level of Service(LOS). It follows <Table 8-5>
#' @param V_avg *Numeric* Average traffic volume by lane.(vphpl)
#' @param design_level *Categorical* Choose one from : \code{C}, \code{D}, \code{E}
#' @param N *Numeric* Number of exclusive lanes going straight
#' @keywords Lane Use Coefficient
#' @export F_U
#' @examples
F_U <- function(V_avg = NULL, design_level = NULL, N = NULL){
if (is.null(V_avg) == FALSE){
if (V_avg <= 800){
if (N == 1){f <- 1.00}
if (N == 2){f <- 1.02}
if (N == 3){f <- 1.10}
if (N >= 4){f <- 1.15}
}
if (V_avg > 800){
if (N == 1){f <- 1.00}
if (N == 2){f <- 1.00}
if (N == 3){f <- 1.05}
if (N >= 4){f <- 1.08}
}
}
else {
if (design_level == 'C' | design_level == 'D'){
if (N == 1){f <- 1.00}
if (N == 2){f <- 1.02}
if (N == 3){f <- 1.10}
if (N >= 4){f <- 1.15}
}
if (design_level == 'E'){
if (N == 1){f <- 1.00}
if (N == 2){f <- 1.00}
if (N == 3){f <- 1.05}
if (N >= 4){f <- 1.08}
}
}
f
}
F_U(V_avg = 1200, N = 3)
