#' @export TVO It must between 0 ~ 1.0
#' @examples
TVO <- function(T_c = NULL,  offset = NULL, C = NULL){
(T_c - offset)/C
}
#'
#' It follows <Formula 8-51>, <Formula 8-52>, <Formula 8-53> in KHCM(2013)
#' @param type Choose one from : \code{1}, \code{2}, \code{3}
#' @param Q_b Initial number of vehicles on standby at the beginning of the analysis period (T) (units)
#' @param c The capacity (vph) of the corresponding vehicle group during the analysis period
#' @param V Arrival traffic volume (vph) for the corresponding lane group during the analysis period
#' @param T ?
#' @param X ??
#' @export d3
#' @examples
d3 <- function(type = NULL, Q_b = NULL, c = NULL, V = NULL, T = NULL){
if (type == 1){d3 <- 1800 * Q_b**2 / (c * T * (c - V))}
if (type == 2){d3 <- (3600 * Q_b / c) - 1800 * T * (1 - X)}
if (type == 3){d3 <- 3600 * Q_b / c}
d3
}
View(TVO)
#' Offset convenience rate(TVO)
#'
#' It follows <Formula 8-51>, <Formula 8-52>, <Formula 8-53> in KHCM(2013)
#' @param T_c In the section from the stop line of the upstream intersection to the stop line of the analysis intersection,Time (seconds) obtained from the speed and link length of the section not affected by acceleration, deceleration, and stop
#' @param offset The difference (in seconds) between the upstream intersection and the analysis intersection in the continuous direction green signal start time. Use less value than period
#' @param C Common cycle required for arterial linkage (seconds)
#' @export TVO
#' @examples
function(T_c = NULL,  offset = NULL, C = NULL){
(T_c - offset)/C
}
#' Incremental delay(d2)
#'
#' It follows <Formula 8-51>, <Formula 8-52>, <Formula 8-53> in KHCM(2013)
#' @param c The capacity (vph) of the corresponding vehicle group during the analysis period
#' @param t Analysis period length (hours)
#' @param X The saturation of the lane group
#' @export d2 Incremental lags showing random arrival and supersaturation effects within the analysis period
#' @examples
d2 <- function(c = NULL, t = NULL, X = NULL, c= NULL){
900 * t * ((X - 1) + ((X - 1)**2 + (4 * X / (c * T)))**(1/2))
}
#' Incremental delay(d2)
#'
#' It follows <Formula 8-51>, <Formula 8-52>, <Formula 8-53> in KHCM(2013)
#' @param c The capacity (vph) of the corresponding vehicle group during the analysis period
#' @param t Analysis period length (hours)
#' @param X The saturation of the lane group
#' @export d2 Incremental lags showing random arrival and supersaturation effects within the analysis period
#' @examples
d2 <- function(c = NULL, t = NULL, X = NULL){
900 * t * ((X - 1) + ((X - 1)**2 + (4 * X / (c * T)))**(1/2))
}
#' @param Q_b Initial number of waiting vehicles (units)
#' @param C Signal period(seconds)
#' @param g Effective green time allocated to the relevant lane group (seconds)
#' @param X The saturation of the lane group
#' @param R Red signal time (sec)
#' @param y Flow rate(= V/S)
#' @param T Analysis period length (hours)
#' @param S Saturated traffic volume of the lane group (vphg)
#' @export d_1 Uniform delay
#' @examples
d_1 <- function(type = NULL, Q_b = NULL, C = NULL, g = NULL, X = NULL, R = NULL, y = NULL, T = NULL, S = NULL){
if (Q_b == 0){
if (X >= 1){d1 <- (0.5 * C * (1 - g/C)**2)/(1 - X * g/C)}
if (X < 1){d1 <- (0.5 * C * (1 - g/C)**2)/(1 - g/C)}
}
if (type == 1){d1 <- (R**2/(2 * C * (1 - y))) + (Q_b * R / (2 * T * S * (1 - y)))}
if (type == 2 | type == 3){d1 <- R / 2}
d1
}
#' 3 types of extra lag d3 present(type_d3exist)
#'
#' It follows <Formula 8-44>, <Formula 8-45>, <Formula 8-46> in KHCM(2013)
#' @param Q_b
#' @param X
#' @param C
#' @param T
#' @export type_d3exist
#' @examples
type_d3exist <- function(Q_b = NULL, X = NULL, C = NULL, T = NULL){
k <- (1 - X) * c * T
if (Q_b > 0 & Q_b < k){type <- 1}
if (Q_b > k & k > 0){type <- 2}
if (Q_b > 0 & k < 0){type <- 3}
type
}
#' Average control delay per vehicle (d, sec/set)
#'
#' It follows <Formula 8-43> in KHCM(2013)
#' @param d_1
#' @param d_2
#' @param d_3
#' @param PF
#' @export d Average control delay per vehicle
#' @examples
d <- function(d_1 = NULL, d_2 = NULL, d_3 = NULL, PF = NULL){
d_1 * PF + d_2 + d_3
}
#' Critical V/c ratio(X_c)
#'
#' It follows <Formula 8-42> in KHCM(2013)
#' @param C period(sec)
#' @param L Total loss time per cycle (sec)
#' @param y_i Traffic volume ratio for critical lane groups in each prefecture
#' @export X_c Critical V/c ratio of the entire intersection
#' @examples
X_c <- function(C = NULL, L = NULL, y_i = NULL){
y_sum <- 0
for (i in 1:length(y_i)){
y <- y_i[i]
y_sum <- y_sum + y
}
X_c <- C * y_sum / (C - L)
X_c
}
#' Capacity of the i-th lane group(c_i, vph)
#'
#' It follows <Formula 8-40> in KHCM(2013)
#' @param S_i Saturated traffic flow rate (vph) for the i lane group
#' @param g_i Effective green time for i lane group (seconds)
#' @param C signal period(seconds)
#' @export c_i capacity of the i-th lane group
#' @examples
c_i <- function(S_i = NULL, g_i = NULL, C = NULL){
S_i * g_i / C
}
#' Saturation of lane group i(X_i)
#'
#' It follows <Formula 8-41> in KHCM(2013)
#' @param S_i Saturated traffic flow rate (vph) for the i lane group
#' @param g_i Effective green time for i lane group (seconds)
#' @param C signal period(seconds)
#' @param V_i i traffic volume in lane group (vph)
#' @export c_i capacity of the i-th lane group
#' @examples
X_i <- function(S_i = NULL, g_i = NULL, C = NULL, V_i = NULL){
V_i * C / (S_i * g_i)
}
#' Heavy Vehicle Factors in Signalized Intersection(f_hv3)
#'
#' It follows <Formula 8-39> in KHCM(2013)
#' @param P Mixing ratio of heavy vehicles to actual traffic volume
#' @export f_hv3 Heavy vehicle Factor
#' @examples
f_hv3 <- function(P = NULL){
1 / (1 + 0.8 * P)
}
#' Inclination correction factor(f_g)
#'
#' It follows <Table 8-16> in KHCM(2013)
#' @param gradient %
#' @export f_g
#' @examples
f_g <- function(gradient){
if (gradient <= 0){f <- 1.00}
if (gradient > 0 & gradient < 3){f <- 1.00 + ((0.96 - 1.00)/3) * (gradient - 0)}
if (gradient == 3){f <- 0.96}
if (gradient > 3 & gradient < 6){f <- 0.96 + ((0.93 - 0.96)/3) * (gradient - 3)}
if (gradient >= 6){f <- 0.93}
f
}
f_g(gradient = 2.72)
f_g(3.945)
f_w3(2.89)
#' Lane width correction factor(f_w3)
#'
#' It follows <Table 8-15> in KHCM(2013)
#' @param lane_width When the lane widths within a lane group are different, the average value of these is used.
#' @export f_w3
#' @examples
f_w3 <- function(lane_width = NULL){
if (lane_width > 0 & lane_width <= 2.6){f <- 0.88}
if (lane_width > 2.6 & lane_width <= 2.9){f <- 0.94}
if (lane_width >= 3.0){f <- 1.00}
}
f_w3(2.89)
#' Lane width correction factor(f_w3)
#'
#' It follows <Table 8-15> in KHCM(2013)
#' @param lane_width When the lane widths within a lane group are different, the average value of these is used.
#' @export f_w3
#' @examples
f_w3 <- function(lane_width = NULL){
if (lane_width > 0 & lane_width <= 2.6){f <- 0.88}
if (lane_width > 2.6 & lane_width <= 2.9){f <- 0.94}
if (lane_width >= 3.0){f <- 1.00}
f
}
f_w3(2.89)
#' Saturated traffic flow rate of lane group i (S_ivphg)
#'
#' It follows <Formula 8-38> in KHCM(2013)
#' @param N_i number of lanes in the i lane group
#' @param f_LRT f_LT or f_RT
#' @param f_w3 Lane width correction factor
#' @param f_g Approach slope correction factor
#' @param f_hv3 Heavy vehicle factor
#' @export S_i Saturated traffic flow rate of lane group i
#' @examples
S_i <- function(N_i = NULL, f_LRT = NULL, f_w3 = NULL, f_g = NULL, f_hw3 = NULL){
2200 * N_i * f_LRT * f_w3 * f_g * f_hv3
}
#' Capacity reduction rate index by construction type(CRF)
#'
#' It follows <Table 8-20> in KHCM(2013)
#' @param construction_type Choose one from: \code{'lane_reduce'}, \code{'width_reduce'}, \code{'lane_moved'}, \code{'court_board'}
#' @param lane_reduce Choose one from : \code{'2_to_1'}, \code{'3_to_2'}, \code{'4_to_3'}
#' @param lane_width
#' @export CRF Capacity reduction rate index
#' @examples
CRF <- function(construction_type = NULL, lane_reduce = NULL, width_reduce = NULL){
if (construction_type == 'lane_reduce'){
if (lane_reduce == '2_to_1'){crf <- 0.83}
if (lane_reduce == '3_to_2'){crf <- 0.85}
if (lane_reduce == '4_to_3'){crf <- 0.87}
}
if (construction_type == 'width_reduce'){
if (lane_width < 2.6){crf <- 0.88}
if (lane_width >= 2.6 & lane_width < 2.9){crf <- 0.94}
if (lane_width >= 3.0){crf <- 1.00}
}
if (construction_type == 'lane_moved'){crf <- 0.90}
if (construction_type == 'court_board'){crf <- 0.90}
crf
}
crf('court_board')
CRF('court_board')
CRF('lane_reduce', '3_to_2')
#' Saturated traffic flow rate of i-lane group reflecting special circumstances (construction section, weather). vphg, S_i_backtick
#'
#' It follows <Formula 8-38> in KHCM(2013)
#' @param S_i i Saturated traffic flow rate(vphg)
#' @param f_WZ Construction impact correction factor
#' @param f_IW weather correction factor
#' @export S_i_backtick Saturated traffic flow rate of i-lane group reflecting special circumstances (construction section, weather)
#' @examples
S_i_backtick <- function(S_i = NULL, f_WZ = NULL, f_IW = NULL){
S_i * f_WZ * f_IW
}
#' Upstream stop influence correction factor(f_ub)
#'
#' It follows <Table 8-19> in KHCM(2013)
#' @param sep_l The separation distance of the upstream stop(m)
#' @export f_ub Upstream stop influence correction factor
#' @examples
f_ub <- function(sep_l = NULL){
if (sep_l >= 0 & sep_l <= 20){f <- 0.51}
if (sep_l > 20 & sep_l < 70){f <- 0.51 + ((0.68 - 0.51)/50) * (sep_l - 20)}
if (sep_l == 70){f <- 0.68}
if (sep_l > 70 & sep_l < 120){f <- 0.68 + ((1.00 - 0.68)/50) * (sep_l - 70)}
if (sep_l >= 120){f <- 1.00}
f
}
f_ub(112.45)
#' Turn correction factor for dedicated left-turn lane group(f_BLT)
#'
#' It follows <Formula 8-57> in KHCM(2013)
#' @param E_L
#' @export f_BLT Turn correction factor for dedicated left-turn lane group
#' @examples
f_BLT <- function(E_L = NULL){
if (E_L != 0){
f <- 1/E_L
f
}
}
#' Green time erasable distance (d_g, m)
#'
#' It follows <Formula 8-58> in KHCM(2013)
#' @param d_fb Headspace spacing when the vehicle is stopped (m)
#' @param g_i Effective green time (s)
#' @param h_bar Saturation difference time (s)
#' @export d_g Green time erasable distance
#' @examples
d_g <- function(d_fb = NULL, g_i = NULL, h_bar = NULL){
g_i / h_bar * d_fb
}
#' Total shock wave session time(g_T)
#'
#' It follows <Formula 8-60>, <Formula 8-61> in KHCM(2013)
#' @param d_T Construction section taper length (m)
#' @param d_WZ Construction section separation distance (m)
#' @param d_IW Intersection width (m)
#' @param u_o Average moving speed(m/s)
#' @param w Shock wave speed(m/s)
#' @export g_T Total shock wave session time(g_T)
#' @examples
g_T <- function(d_T = NULL, d_WZ = NULL, d_IW = NULL, u_o = NULL, w = NULL){
g_F <- (d_T + d_WZ + d_IW)/u_o
g_B <- (d_WZ + 0.5 * d_IW)/w
if (g_F >= 0 & g_B >= 0){
g_T <- g_F + g_B + 1.0
g_T
}
}
#' Average moving speed divided into 5 sections (acceleration 4km/h)
#'
#' It follows <Table 8-21> in KHCM(2013)
#' @param d_sum d_T + d_WZ + d_IW
#' @param unit Choose one from : \code{'kmph'}, \code{'mps'}
#' @export avg_speed Average moving speed divided into 5 sections
#' @examples
avg_speed <- function(d_sum = NULL, unit = NULL){
if (unit == 'kmph'){
if (d_sum >= 0 & d_sum <= 20){s <- 10.2}
if (d_sum > 20 & d_sum <= 50){s <- 16.9}
if (d_sum > 50 & d_sum <= 100){s <- 23.9}
if (d_sum > 100 & d_sum <= 150){s <- 30.5}
if (d_sum > 150){s <- 36.0}
}
if (unit == 'mps'){
if (d_sum >= 0 & d_sum <= 20){s <- 2.84}
if (d_sum > 20 & d_sum <= 50){s <- 4.69}
if (d_sum > 50 & d_sum <= 100){s <- 6.64}
if (d_sum > 100 & d_sum <= 150){s <- 8.49}
if (d_sum > 150){s <- 10.00}
}
s
}
avg_speed(130, 'mps')
#' @param N Number of lanes (number of stop-line lanes excluding left-turn pockets)
#' @param N_WZ The number of closed lanes under the road occupation construction (measured in the cross section of the construction section)
#' @param d_WZ Construction section separation distance (m)
#' @param L_WZ Construction section length (m)
#' @param g_T Total shock wave duration (s)
#' @param CRF Capacity Reduction Index
#' @param g_i Effective green time (s)
#' @param h_bar
#' @export f_WZ
#' @examples
f_WZ <- function(d_g = NULL, N = NULL, N_WZ = NULL, d_WZ = NULL, L_WZ = NULL, g_T = NULL, CRF = NULL, g_i = NULL){
if (construction_loc == 'upstream'){
if (d_g <= d_WZ){f <- 3600/h_bar - (3600 * N_WZ)/(g_i * N)}
if (d_g > d_WZ){f <- (d_WZ * N - d_fb * N_WZ + CRF * (d_g - d_WZ + L_WZ * ((1 - CRF)/CRF)) * (N - N_WZ))/d_fb * (3600 / (g_i * N))}
}
if (construction_loc == 'downstream'){
if (g_T >= g_i){f <- 3600 / h_bar}
if (g_T < g_i){f <- (((g_T/h_bar * N)) + ((g_i - g_T)/h_bar) * CRF * (N - N_WZ)) * (3600 / (g_i * N))}
}
f
}
#' It follows <Formula 8-38> in KHCM(2013)
#' @param S_0
#' @param N_i
#' @param f_RT
#' @param f_w3
#' @param f_g
#' @param f_hv3
#' @param f_WZ
#' @export S_i_WZ Saturated traffic flow rate lane group i due to occupancy construction near the intersection(vphg)
#' @examples
S_i_WZ <- function(N_i = NULL, f_LRT = NULL, f_w3 = NULL, f_g = NULL, f_hw3 = NULL, f_WZ = NULL){
S_i(N_i = N_i, f_LRT = F_RT, f_w3 = f_w3, f_g = f_g, f_hw3 = f_hw3) * f_WZ
}
#' Capacity calculation correction factor for bad weather conditions at signal intersections(f_IW)
#'
#' It follows <Table 8-28> in KHCM(2013)
#' @param weather *Categorical* Choose one from : \code{'sunny'}, \code{'rainy'}, \code{'snowy'}
#' @export precipitation *Numeric* Rainfall or snowfall or hail (mm/h)
#' @examples
f_IW <- function(weather = NULL, precipitation = NULL){
if (weather == 'sunny'){f <- 1}
if (weather == 'rainy'){
if (precipitation == 0){f <- 1.00}
if (precipitation > 0 & precipitation <= 2){f <- 0.93}
if (precipitation > 2 & precipitation < 4.5){f <- 0.83}
if (precipitation >= 4.5){f <- 0.79}
}
if (weather == 'snowy'){
if (precipitation == 0){f <- 1.00}
if (precipitation > 0 & precipitation <= 1){f <- 0.65}
if (precipitation > 1 & precipitation <= 20){f <- 0.46}
if (precipitation >= 21){f <- 0.34}
}
f
}
f_IW('rainy', 32.1)
f_IW('snowy', 8.2334)
#' Capacity calculation correction factor for bad weather conditions at signal intersections(f_iw3)
#'
#' It follows <Table 8-28> in KHCM(2013)
#' @param weather *Categorical* Choose one from : \code{'sunny'}, \code{'rainy'}, \code{'snowy'}
#' @param precipitation *Numeric* Rainfall or snowfall or hail (mm/h)
#' @export f_iw3
#' @examples
#' f_iw3('sunny')
#' f_iw3('rainy', 32.1)
#' f_iw3('snowy', 8.2334)
f_iw3 <- function(weather = NULL, precipitation = NULL){
if (weather == 'sunny'){f <- 1}
if (weather == 'rainy'){
if (precipitation == 0){f <- 1.00}
if (precipitation > 0 & precipitation <= 2){f <- 0.93}
if (precipitation > 2 & precipitation < 4.5){f <- 0.83}
if (precipitation >= 4.5){f <- 0.79}
}
if (weather == 'snowy'){
if (precipitation == 0){f <- 1.00}
if (precipitation > 0 & precipitation <= 1){f <- 0.65}
if (precipitation > 1 & precipitation <= 20){f <- 0.46}
if (precipitation >= 21){f <- 0.34}
}
f
}
#' Level of Service(LOS) in Diamond-Interchange
#'
#' This function decides Level of Service(LOS). It follows <Table 6-8>
#' @param control_delay Control delay per Car(second)
#' @keywords LOS Level of Service
#' @export LOS_diamond_interchange Level of Service. \code{'A'}, \code{'B'}, \code{'C'}, \code{'D'}, \code{'E'}, \code{'F'}, \code{'FF'}, \code{'FFF'}
#' @examples
LOS_diamond_interchange <- function(control_delay = NULL){
if (control_delay >= 0 & control_delay <= 22){LOS <- 'A'}
if (control_delay >= 22 & control_delay <= 45){LOS <- 'B'}
if (control_delay >= 45 & control_delay <= 75){LOS <- 'C'}
if (control_delay >= 75 & control_delay <= 105){LOS <- 'D'}
if (control_delay >= 105 & control_delay <= 150){LOS <- 'E'}
if (control_delay >= 150 & control_delay <= 330){LOS <- 'F'}
if (control_delay >= 330 & control_delay <= 510){LOS <- 'FF'}
if (control_delay > 510){LOS <- 'FFF'}
LOS
}
LOS_diamond_interchange(33.4427)
#' TIt follows <Formula 9-1> in KHCM(2013), p.429
#' @param Q_L Initial queue length (m) by appearance of internal link between intersections. Q_V * l_Q
#' @param mu_F The speed at which the front of the queue moves to the end of the internal link (m/sec)
#' @param mu_B The speed at which the end of the queue moves to the end of the internal link (m/sec)
#' @param tau_0 Time (in seconds) from the start until the first vehicle emitted from the upstream intersection arrives at the end of the queue
#' @param tau_1 Time (in seconds) from t_0 until the queue arrives at the end of the internal link
#' @keywords
#' @export L_Q. it is same as tau_2. Time (in seconds) from t_1 to the time the queue is full
#' @examples
#'
L_Q <- function(Q_L = NULL, mu_F = NULL, mu_B = NULL, tau_0 = NULL, tau_1 = NULL){
(Q_L + mu_F * tau_0 + (mu_F - mu_B) * tau_1)/(-1 * mu_F)
}
#' Time (in seconds) from the start until the first vehicle emitted from the upstream intersection arrives at the end of the queue(tau_0)
#'
#' TIt follows <Formula 9-2> in KHCM(2013), p.429
#' @param Q_L Initial queue length (m) by appearance of internal link between intersections. Q_V * l_Q
#' @param D Length of internal link between intersections (m)
#' @keywords
#' @export tau_0
#' @examples
tau_0 <- function(D = NULL, Q_L = NULL, mu_u_i = NULL){
(D - Q_L) / mu_u_i
}
#' Time (in seconds) from t_1  when the queue arrives at the end of the internal link(tau_1)
#'
#' TIt follows <Formula 9-3> in KHCM(2013), p.429
#' @param Q_L Initial queue length (m) by appearance of internal link between intersections. Q_V * l_Q
#' @param D Length of internal link between intersections (m)
#' @param mu_B The speed at which the end of the queue moves to the end of the internal link (m/sec)
#' @keywords
#' @export tau_0
#' @examples
tau_1 <- function(D = NULL, Q_L = NULL, mu_B = NULL){
(D - Q_L) / (-1 * mu_B)
}
#' The speed at which the end of the queue moves to the end of the internal link (mu_B, m/sec)
#'
#' TIt follows <Formula 9-3> in KHCM(2013), p.429
#' @param S_u_i
#' @param mu_u_i
#' @param l_Q
#' @keywords
#' @export mu_B
#' @examples
mu_B <- function(S_u_i = NULL, mu_u_i = NULL, l_Q = NULL){
S_u_i / ((S_u_i/mu_u_i) - (1/l_Q))
}
#' The speed at which the end of the queue moves to the end of the internal link (mu_F, m/sec)
#'
#' TIt follows <Formula 9-5> in KHCM(2013), p.429
#' @param S_d_i Saturated traffic flow rate (= discharge traffic flow rate) of downstream intersection lane group i (car/sec)
#' @param mu_d_i Free passage speed of lane group i mitted from the downstream intersection (m/sec)
#' @param l_Q Average distance between vehicles in the queue (from the rear bumper of the vehicle in front to the rear bumper of the vehicle behind) (m)
#' @keywords
#' @export mu_F
#' @examples
mu_F <- function(S_d_i = NULL, mu_d_i = NULL, l_Q = NULL){
S_d_i / ((S_d_i/mu_d_i) - (1/l_Q))
}
#' Additional green loss time downstream due to non-use of green time(L_DS)
#'
#' TIt follows <Formula 9-6> in KHCM(2013), p.429
#' @param CG_DS Period in which the upstream intersection shows a left turn and the downstream intersection shows green
#' @param Q_V Average number of waiting vehicles in the internal link at the start of each signal (units)
#' @param h_s Saturation difference time (sec/set)
#' @keywords
#' @export mu_F
#' @examples
L_DS <- function(CG_DS = NULL, Q_V = NULL, h_s = NULL){
CG_DS - Q_V * h_s
}
#' Corrected effective green time at the upstream intersection reflecting the loss time due to the waiting vehicle of the internal link(g_i_backtick)
#'
#' It follows <Formula 9-7> in KHCM(2013), p.432
#' @param G Green time (seconds)
#' @param L_B Departure loss time (=2.3 seconds)
#' @param G_L Progress extension time (=2.0 seconds)
#' @param L_Q Additional green loss time (sec) due to the initial queue of the internal link
#' @export g_i_backtick_upstream Corrected effective green time for upstream intersection i lane group (seconds)
#' @examples
g_i_backtick_upstream <- function(G = NULL, L_B = NULL, G_L = NULL, L_Q = NULL){
G - L_B + G_L - L_Q
}
library(tidyverse)
