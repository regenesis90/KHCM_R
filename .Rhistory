#' @keywords
#' @seealso \code{\link{tau_2_di}}, \code{\link{L_Q_di}}
#' @export tau_0_di
#' @examples
tau_0_di <- function(D = NULL, Q_L = NULL, mu_u_i = NULL){
if (mu_u_i > 0){
if (D > 0){
if (Q_L > 0){t <- (D - Q_L) / mu_u_i}
else {t <- 'Error : [Q_L] must be positive(m). Please check that.'}
}
else {t <- 'Error : [D] must be positive(m). Please check that.'}
}
else {t <- 'Error : [mu_u_i] must be positive(m/s). Please check that.'}
t
}
tau_0_di(D = 100, Q_L = 40, mu_u_i = 18.2)
#' In a two-point intersection diamond-shaped interchange (highway connection road-general road junction),
#'     the time taken from t0 until the queue reaches the end of the internal link
#'     It follows <Formula 9-3> in KHCM(2013), p.430.
#' @param Q_L Initial queue length (m) by appearance of internal link between intersections. Q_V * l_Q
#' @param D Length of internal link between intersections (m)
#' @param mu_B The speed at which the end of the queue moves to the end of the internal link (m/sec)
#' @keywords time queue internal link two-point diamond interchange
#' @seealso \code{\link{tau_0_di}}, \code{\link{tau_1_di}}, \code{\link{tau_2_di}}
#' @export tau_1_di
#' @examples
tau_1_di <- function(D = NULL, Q_L = NULL, mu_B = NULL){
if (mu_B > 0){
if (D > 0){
if (Q_L > 0){t <- (D - Q_L) / (-1 * mu_B)}
else {t <- 'Error : [Q_L] must be positive(m). Please check that.'}
}
else {t <- 'Error : [D] must be positive(m). Please check that.'}
}
else {t <- 'Error : [mu_B] must be positive(m/s). Please check that.'}
t
}
tau_1_di(D = 320, Q_L = 34.7, mu_B = 23.4)
tau_1_di(D = 320, Q_L = 34.7, mu_B = 13.4)
tau_1_di(Q_L = 320, D = 34.2, mu_B = 13.4)
}
}
}
}
warnings()
}
#' @param l_Q Average distance between vehicles in the queue (from the rear bumper of the vehicle)
#' @param S_u_i Saturated traffic flow rate (= discharge traffic flow rate) of upstream intersection lane group i (car/sec)
#' @param S_d_i Saturated traffic flow rate (= discharge traffic flow rate) of downstream intersection lane group i (car/sec)
#' @param mu_u_i Free passage speed of lane group i emitted from the upstream intersection (m/s)
#' @param mu_d_i Free passage speed of lane group i emitted from the downstream intersection (m/s)
#' @param D Length of internal link between intersections(m).
#' @keywords Green loss time upstream intersection queue two-point diamond interchange
#' @seealso \code{\link{tau_0_di}}, \code{\link{tau_1_di}}, \code{\link{mu_F_di}}, \code{\link{mu_B_di}}
#' @export tau_2_di
#' @examples
tau_2_di <- function(Q_L = NULL, l_Q = NULL, S_u_i = NULL, S_d_i = NULL, mu_u_i = NULL, mu_d_i = NULL, D = NULL){
if (Q_L > 0){
if (l_Q > 0){
if (D > 0){
mu_F <- mu_F_di(S_d_i = S_d_i, mu_d_i = mu_d_i, l_Q = l_Q)
mu_B <- mu_B_di(S_u_i = S_u_i, mu_u_i = mu_u_i, l_Q = l_Q)
tau_0 <- tau_0_di(D = D, Q_L = Q_L, mu_u_i = mu_u_i)
tau_1 <- tau_1_di(D = D, Q_L = Q_L, mu_B = mu_B)
if (is.numeric(mu_F) == TRUE){
if (is.numeric(mu_B) == TRUE){
if (is.numeric(tau_0) == TRUE){
if (is.numeric(tau_1) == TRUE){
t <- (Q_L + mu_F * tau_0 + (mu_F - mu_B) * tau_1)/(-1 * mu_F)
}
else {t <- tau_1}
}
else {t <- tau_0}
}
else {t <- mu_B}
}
else {t <- mu_F}
}
else {t <- 'Error : [D] must be positive(m). Please check that.'}
}
else {t <- 'Error : [l_Q] must be positive(m). Please check that.'}
}
else {t <- 'Error : [Q] must be positive(m). Please check that.'}
t
}
tau_2_di(Q_L = 64.3, l_Q = 10, S_u_i = 1800, S_d_i = 1600, mu_u_i = 22.3, mu_d_i = 20.1, D = 200)
tau_2_di(Q_L = 64.3, l_Q = 10, S_u_i = 1800, S_d_i = 1600, mu_u_i = 22.3, mu_d_i = 20.1, D = 100)
tau_2_di(Q_L = 164.3, l_Q = 10, S_u_i = 1800, S_d_i = 1600, mu_u_i = 22.3, mu_d_i = 20.1, D = 100)
tau_2_di(Q_L = 164.3, l_Q = 10, S_u_i = 1800, S_d_i = 1600, mu_u_i = 22.3, mu_d_i = 20.1, D = 50)
tau_2_di(Q_L = 164.3, l_Q = 20, S_u_i = 1800, S_d_i = 1600, mu_u_i = 22.3, mu_d_i = 20.1, D = 50)
tau_2_di(Q_L = 164.3, l_Q = 20, S_u_i = 1800, S_d_i = 1600, mu_u_i = 22.3, mu_d_i = 15.1, D = 50)
tau_2_di(Q_L = 164.3, l_Q = 20, S_u_i = 2200, S_d_i = 2200, mu_u_i = 22.3, mu_d_i = 20.1, D = 50)
tau_2_di(Q_L = 164.3, l_Q = 2, S_u_i = 2200, S_d_i = 2200, mu_u_i = 22.3, mu_d_i = 20.1, D = 50)
tau_2_di(Q_L = 264.3, l_Q = 2, S_u_i = 2200, S_d_i = 2200, mu_u_i = 22.3, mu_d_i = 20.1, D = 50)
tau_2_di(Q_L = 264.3, l_Q = 2, S_u_i = 2200, S_d_i = 2200, mu_u_i = 22.3, mu_d_i = 20.1, D = 100)
tau_2_di(Q_L = 264.3, l_Q = 2, S_u_i = 2200, S_d_i = 2200, mu_u_i = 22.3, mu_d_i = 20.1, D = 10)
tau_2_di(Q_L = 264.3, l_Q = 2, S_u_i = 1400, S_d_i = 2200, mu_u_i = 22.3, mu_d_i = 20.1, D = 10)
tau_2_di(Q_L = 264.3, l_Q = 14, S_u_i = 1400, S_d_i = 2200, mu_u_i = 22.3, mu_d_i = 20.1, D = 10)
View(tau_0_di)
#' Additional green loss time in the downstream part due to non-use of green time
#'     in the two-point intersection diamond-shaped interchange (highway connection road-general road joint part).
#'     It follows <Formula 9-6> in KHCM(2013), p.432.
#' @param CG_DS Period in which the upstream intersection shows a left turn and the downstream intersection shows green(sec)
#' @param Q_V Average number of waiting vehicles in the internal link at the start of each signal (veh)
#' @param h_s Saturation difference time (sec/veh)
#' @keywords additional green loss time downstream non-use two-point diamond interchange
#' @seealso \code{\link{g_i_dn_di}}
#' @export L_DS_di
#' @examples
L_DS_di <- function(CG_DS = NULL, Q_V = NULL, h_s = NULL){
if (CG_DS > 0){
if (Q_V >= 0){
if (h_s >= 0){l <- CG_DS - Q_V * h_s}
else {l <- 'Error : [h_s] must be >= 0. Please check that.'}
}
else {l <- 'Error : [Q_V] must be >= 0. Please check that.'}
}
else {l <- 'Error : [CG_DS] must be positive(s). Please check that.'}
l
}
L_DS_di(CG_DS = 30, Q_V = 30, h_s = 10)
L_DS_di(CG_DS = 30, Q_V = 10, h_s = 2)
#' @param L_B Departure loss time (=2.3 seconds)
#' @param G_L Progress extension time (=2.0 seconds)
#' @param L_Q Additional green loss time (sec) due to the initial queue of the internal link
#' @details
#'     * Default value of Progress extention time(G_L) = 2.0(sec)
#'     * Default value of Departure loss time(L_B) = 2.3(sec)
#' @seealso \code{\link{g_i_dn_di}}, \code{\link{X_i_di}}
#' @keywords corrected effective green time upstream additional green loss diamond interchange
#' @export g_i_up_di Corrected effective green time for upstream intersection i lane group (seconds)
#' @examples
g_i_up_di <- function(G = NULL, L_B = NULL, G_L = NULL, L_Q = NULL){
if (G > 0 & L_Q > 0){
if (L_B > 0 & G_L > 0){g <- G - L_B + G_L - L_Q}
else {g <- G - 2.3 + 2.0 - L_Q}
}
else {g <- 'Error : [G], [L_Q] must be positive(sec). Please check that.'}
}
#' @param L_B Departure loss time (=2.3 seconds)
#' @param G_L Progress extension time (=2.0 seconds)
#' @param L_Q Additional green loss time (sec) due to the initial queue of the internal link
#' @details
#'     * Default value of Progress extention time(G_L) = 2.0(sec)
#'     * Default value of Departure loss time(L_B) = 2.3(sec)
#' @seealso \code{\link{g_i_dn_di}}, \code{\link{X_i_di}}
#' @keywords corrected effective green time upstream additional green loss diamond interchange
#' @export g_i_up_di Corrected effective green time for upstream intersection i lane group (seconds)
#' @examples
g_i_up_di <- function(G = NULL, L_B = NULL, G_L = NULL, L_Q = NULL){
if (G > 0 & L_Q > 0){
if (L_B > 0 & G_L > 0){g <- G - L_B + G_L - L_Q}
else {g <- G - 2.3 + 2.0 - L_Q}
}
else {g <- 'Error : [G], [L_Q] must be positive(sec). Please check that.'}
g
}
g_i_up_di(G = 30, L_B = 2.1, G_L = 2.34, L_Q = 4)
g_i_up_di(G = 40, L_Q = 22)
g_i_up_di(G = 40, L_Q = 22)
g_i_up_di <- function(G = NULL, L_B = NULL, G_L = NULL, L_Q = NULL){
if (G > 0 & L_Q > 0){
if (is.null(L_B) == FALSE & is.null(G_L) == FALSE){
if (L_B > 0 & G_L > 0){g <- G - L_B + G_L - L_Q}
else {g <- 'Error : [L_B], [G_L] must be positive(sec). Please check that.'}
}
else {g <- G - 2.3 + 2.0 - L_Q}
}
else {g <- 'Error : [G], [L_Q] must be positive(sec). Please check that.'}
g
}
g_i_up_di(G = 40, L_Q = 22)
#' @param G_L Progress extension time (=2.0 seconds)
#' @param L_B Departure loss time (=2.3 seconds)
#' @param L_DS Additional green loss time due to non-use of green time (seconds)
#' @details
#'     * Default value of Progress extention time(G_L) = 2.0(sec)
#'     * Default value of Departure loss time(L_B) = 2.3(sec)
#' @seealso \code{\link{g_i_up_di}}, \code{\link{X_i_di}}
#' @keywords corrected effective green time downstream additional green loss diamond interchange
#' @export g_i_dn_di Calibrated effective green time (seconds) for downstream intersection i-lane group
#' @examples
g_i_dn_di <- function(G = NULL, G_L = 2.0, L_B = 2.3, L_DS = NULL){
if (G > 0 & L_DS > 0){
if (is.null(L_B) == FALSE & is.null(G_L) == FALSE){
if (L_B > 0 & G_L > 0){g <- G - L_B + G_L - L_DS}
else {g <- 'Error : [L_B], [G_L] must be positive(sec). Please check that.'}
}
else {g <- G - 2.3 + 2.0 - L_DS}
}
else {g <- 'Error : [G], [L_DS] must be positive(sec). Please check that.'}
g
}
g_i_dn_di(G = 30, L_B = 2.1, G_L = 2.34, L_DS = 4)
g_i_dn_di(G = 40, L_Q = 22)
g_i_dn_di(G = 40, L_DS = 22)
#' The capacity of the i-lane group of upstream and downstream intersection access roads.
#'     It is classified by lane group according to each city.
#'     It follows <Formula 9-9> in KHCM(2013) p.433.
#' @param S_i Saturated traffic flow rate (vph) for the i lane group
#' @param g_i Effective green time (sec) for the i lane group reflecting the additional green loss time. See \code{\link{g_i_up_di}}, \code{\link{g_i_dn_di}}
#' @param C signal period(sec)
#' @keywords capacity two-point diamond interchange
#' @seealso \code{\link{g_i_up_di}}, \code{\link{g_i_dn_di}}, \code{\link{X_i_di}}
#' @export capa_i_di capacity of the i-th lane group
#' @examples
capa_i_di <- function(S_i = NULL, g_i = NULL, C = NULL){
if (S_i > 0){
if (g_i > 0 & C > 0){c <- S_i * g_i / C}
else {c <- 'Error : [g_i], [C] must be positive(sec). Please check that.'}
}
else {c <- 'Error : [S_i] must be positive(vph). Please check that.'}
c
}
capa_i_di(S_i = 1200, g_i = 24, C = 120)
#' The saturation of the i-lane group (ratio of traffic volume and capacity) in two-point diamond-shaped interchange.
#'     It follows <Formula 9-10> in KHCM(2013), p.434.
#' @param v_i Traffic volume of i lane group(vph)
#' @param S_i Saturated traffic flow rate (vph) for the i lane group
#' @param g_i Effective green time (sec) for the i lane group reflecting the additional green loss time. See \code{\link{g_i_up_di}}, \code{\link{g_i_dn_di}}
#' @param C signal period(sec)
#' @keywords Saturation flow two-point diamond interchange
#' @seealso \code{\link{g_i_up_di}}, \code{\link{g_i_dn_di}}, \code{\link{X_i_di}}
#' @export X_i_di \code{(V/c)_i = V_i/(S_i * (g_i_backtick/C))}
#' @examples
X_i_di <- function(v_i = NULL, S_i = NULL, g_i = NULL, C = NULL){
if (v_i > 0){
capa <- capa_i_di(S_i = S_i, g_i = g_i, C = C)
if (is.numeric(capa) == TRUE){x <- v_i/capa}
else {x <- capa}
}
else {x <- 'Error : [v_i] must be positive(vph). Please check that.'}
x
}
X_i_di(v_i = 323, S_i = 1300, g_i = 30, C = 120)
#' Delay of the Moving Flow E Passing Straight through Intersection 1 and Turning Left at Intersection 2
#'
#' delay of the moving flow E passing straight through intersection 1 and turning left at intersection 2
#'     att the two-point intersection type diamond-shaped interchange (highway connection road-general road junction)
#'     It follows <Formula 9-11> in KHCM(2013) p.434.
#' @param d_EBTH Delay (seconds) when passing straight through intersection 1
#' @param d_EBL Delay (seconds) when turning left at Intersection 2
#' @seealso \code{\link{d_total_di}}
#' @export d_artl delay moving flow diamond interchange
#' @examples
d_E_di <- function(d_EBTH = NULL, d_EBL = NULL){
if (d_EBTH >= 0 & d_EBL >= 0){d <- d_EBTH + d_EBL}
else {d <- 'Error : [d_EBTH], [d_EBL] must be >= 0(seconds). Please check that.'}
d
}
#' It is calculated using the weighted average of traffic volume
#'     for the average delay at two-point diamond-shaped interchange.
#'     It follows <Formula 9-12> in KHCM(2013), p.435.
#' @param d_i Series of average control delay per vehicle of the type point movement flow i(sec/veh). See \code{\link{d_i_rab}}
#' @param v_i Series of corrected traffic volume (vph) of the moving flow i of the end point
#' @keywords total average delay diamond interchange
#' @seealso \code{\link{LOS_di}}
#' @export d_total_di
#' @examples
#' d_total_di(d_i = c(11.1, 3.44, 30.289), v_i = c(1200, 394, 888))
d_total_rab <- function(d_i = NULL, v_i = NULL){
dvsum <- 0
vsum <- 0
for (i in 1:length(d_i)){
dv <- d_i[i] * v_i[i]
v <- v_i[i]
vsum <- vsum + v
dvsum <- dvsum + dv
}
dvsum / vsum
}
d_total_di(d_i = c(11.1, 3.44, 30.289), v_i = c(1200, 394, 888))
#' It is calculated using the weighted average of traffic volume
#'     for the average delay at two-point diamond-shaped interchange.
#'     It follows <Formula 9-12> in KHCM(2013), p.435.
#' @param d_i Series of average control delay per vehicle of the type point movement flow i(sec/veh). See \code{\link{d_i_rab}}
#' @param v_i Series of corrected traffic volume (vph) of the moving flow i of the end point
#' @keywords total average delay diamond interchange
#' @seealso \code{\link{LOS_di}}
#' @export d_total_di
#' @examples
#' d_total_di(d_i = c(11.1, 3.44, 30.289), v_i = c(1200, 394, 888))
d_total_di <- function(d_i = NULL, v_i = NULL){
dvsum <- 0
vsum <- 0
for (i in 1:length(d_i)){
dv <- d_i[i] * v_i[i]
v <- v_i[i]
vsum <- vsum + v
dvsum <- dvsum + dv
}
dvsum / vsum
}
d_total_di(d_i = c(11.1, 3.44, 30.289), v_i = c(1200, 394, 888))
#'
#' Service level at signal intersections.
#'     It is expressed as an average control delay (s) value per vehicle.
#'     It follows <Table 8-2> in KHCM(2013), p.218.
#' @param d Delay due to the reduction or stop of the lane group due to signal control, The increase in travel time compared to travel time when there is no deceleration or stop(seconds).
#' @keywords LOS Level of Service signalized intersection
#' @export LOS_si Level of Service. \code{A}, \code{B}, \code{C}, \code{D}, \code{E}, \code{F}, \code{FF}, \code{FFF}
#' @examples
#' LOS_si(d = 44)
#' LOS_si(157)
LOS_si <- function(d = NULL){
if (d >= 0 & d <= 15){LOS <- 'A'}
else if (d > 15 & d <= 30){LOS <- 'B'}
else if (d > 30 & d <= 50){LOS <- 'C'}
else if (d > 50 & d <= 70){LOS <- 'D'}
else if (d > 70 & d <= 100){LOS <- 'E'}
else if (d > 100 & d <= 220){LOS <- 'F'}
else if (d > 220 & d <= 340){LOS <- 'FF'}
else if (d > 340){LOS <- 'FFF'}
else {LOS <- 'Error : [d] must be positive(seconds). Please check that.'}
LOS
}
LOS_si(d = 44)
#' @param si_left Method of left signal operation. Choose one from: \code{'two-way-protection'}, \code{'direct-left'}, \code{'unprotected'}
#' @keywords case classification sigmalized intersection
#' @export case_si \code{'case1'}, \code{'case2'}, \code{'case3'}, \code{'case4'}, \code{'case5'}, \code{'case6'}
#' @details
#'     - case1 : There is one dedicated left turn lane, and both protected left turn signal or simultaneous direct and left signal
#'     - case2: There are two dedicated left turn lanes, and the signal operation is the same as in CASE 1
#'     - case3 : The exclusive left turn lane is 1 and unprotected left turn signal
#'     - case4 : There is one common straight and left turn lane, simultaneous direct and left signal
#'     - case5 : The leftmost lane is a dedicated left turn, and the next lane is a common lane for straight and left turns, and the signal is Same as CASE 4⑥
#'     - case6 : There is one common lane for straight and left turns, and there is an unprotected left turn signal.
case_si <- function(type_left = NULL, N_left = NULL, si = NULL){
if (type_left == 'dedicated'){
if (N_left == 1){
if (si_left == 'two-way-protection'){case <- 'case1'}
else if (si_left == 'direct-left'){case <- 'case1'}
else if (si_left == 'unprotected'){case <- 'case3'}
else {case <- 'Error : [si_left] must be one of [two-way-protection], [direct-left], [unprotected]. Please check that.'}
}
else if (N_left == 2){
if (si_left == 'two-way-protection'){case <- 'case2'}
else if (si_left == 'direct-left'){case <- 'case2'}
else {case <- 'Error : [si_left] must be one of [two-way-protection], [direct-left], [unprotected]. Please check that.'}
}
else {case <- 'Error : [N_left] must be one of 1, 2. Please check that.'}
}
else if (type_left == 'public'){
if (N_left == 1){
if (si_left == 'direct-left'){case <- 'case4'}
else if (si_left == 'unprotected'){case <- 'case6'}
else {case <- 'Error : [si_left] must be one of [two-way-protection], [direct-left], [unprotected]. Please check that.'}
}
else if (N_left == 2){
if (si_left == 'direct-left'){case <- 'case5'}
else {case <- 'Error : [si_left] must be one of [two-way-protection], [direct-left], [unprotected]. Please check that.'}
}
else {case <- 'Error : [N_left] must be one of 1, 2. Please check that.'}
}
else {case <- 'Error : [type_left] must be one of [dedicated], [public]. Please check that.'}
case
}
case_si(type_left = 'public', N_left = 1, si_left = 'unprotected')
#' @param si_left Method of left signal operation. Choose one from: \code{'two-way-protection'}, \code{'direct-left'}, \code{'unprotected'}
#' @keywords case classification sigmalized intersection
#' @export case_si \code{'case1'}, \code{'case2'}, \code{'case3'}, \code{'case4'}, \code{'case5'}, \code{'case6'}
#' @details
#'     - case1 : There is one dedicated left turn lane, and both protected left turn signal or simultaneous direct and left signal
#'     - case2: There are two dedicated left turn lanes, and the signal operation is the same as in CASE 1
#'     - case3 : The exclusive left turn lane is 1 and unprotected left turn signal
#'     - case4 : There is one common straight and left turn lane, simultaneous direct and left signal
#'     - case5 : The leftmost lane is a dedicated left turn, and the next lane is a common lane for straight and left turns, and the signal is Same as CASE 4⑥
#'     - case6 : There is one common lane for straight and left turns, and there is an unprotected left turn signal.
case_si <- function(type_left = NULL, N_left = NULL, si = NULL){
if (type_left == 'dedicated'){
if (N_left == 1){
if (si_left == 'two-way-protection'){case <- 'case1'}
else if (si_left == 'direct-left'){case <- 'case1'}
else if (si_left == 'unprotected'){case <- 'case3'}
else {case <- 'Error : [si_left] must be one of [two-way-protection], [direct-left], [unprotected]. Please check that.'}
}
else if (N_left == 2){
if (si_left == 'two-way-protection'){case <- 'case2'}
else if (si_left == 'direct-left'){case <- 'case2'}
else {case <- 'Error : [si_left] must be one of [two-way-protection], [direct-left], [unprotected]. Please check that.'}
}
else {case <- 'Error : [N_left] must be one of 1, 2. Please check that.'}
}
else if (type_left == 'public'){
if (N_left == 1){
if (si_left == 'direct-left'){case <- 'case4'}
else if (si_left == 'unprotected'){case <- 'case6'}
else {case <- 'Error : [si_left] must be one of [two-way-protection], [direct-left], [unprotected]. Please check that.'}
}
else if (N_left == 2){
if (si_left == 'direct-left'){case <- 'case5'}
else {case <- 'Error : [si_left] must be one of [two-way-protection], [direct-left], [unprotected]. Please check that.'}
}
else {case <- 'Error : [N_left] must be one of 1, 2. Please check that.'}
}
else {case <- 'Error : [type_left] must be one of [dedicated], [public]. Please check that.'}
case
}
#' @param si_left Method of left signal operation. Choose one from: \code{'two-way-protection'}, \code{'direct-left'}, \code{'unprotected'}
#' @keywords case classification sigmalized intersection
#' @export case_si \code{'case1'}, \code{'case2'}, \code{'case3'}, \code{'case4'}, \code{'case5'}, \code{'case6'}
#' @details
#'     - case1 : There is one dedicated left turn lane, and both protected left turn signal or simultaneous direct and left signal
#'     - case2: There are two dedicated left turn lanes, and the signal operation is the same as in CASE 1
#'     - case3 : The exclusive left turn lane is 1 and unprotected left turn signal
#'     - case4 : There is one common straight and left turn lane, simultaneous direct and left signal
#'     - case5 : The leftmost lane is a dedicated left turn, and the next lane is a common lane for straight and left turns, and the signal is Same as CASE 4⑥
#'     - case6 : There is one common lane for straight and left turns, and there is an unprotected left turn signal.
case_si <- function(type_left = NULL, N_left = NULL, si_left = NULL){
if (type_left == 'dedicated'){
if (N_left == 1){
if (si_left == 'two-way-protection'){case <- 'case1'}
else if (si_left == 'direct-left'){case <- 'case1'}
else if (si_left == 'unprotected'){case <- 'case3'}
else {case <- 'Error : [si_left] must be one of [two-way-protection], [direct-left], [unprotected]. Please check that.'}
}
else if (N_left == 2){
if (si_left == 'two-way-protection'){case <- 'case2'}
else if (si_left == 'direct-left'){case <- 'case2'}
else {case <- 'Error : [si_left] must be one of [two-way-protection], [direct-left], [unprotected]. Please check that.'}
}
else {case <- 'Error : [N_left] must be one of 1, 2. Please check that.'}
}
else if (type_left == 'public'){
if (N_left == 1){
if (si_left == 'direct-left'){case <- 'case4'}
else if (si_left == 'unprotected'){case <- 'case6'}
else {case <- 'Error : [si_left] must be one of [two-way-protection], [direct-left], [unprotected]. Please check that.'}
}
else if (N_left == 2){
if (si_left == 'direct-left'){case <- 'case5'}
else {case <- 'Error : [si_left] must be one of [two-way-protection], [direct-left], [unprotected]. Please check that.'}
}
else {case <- 'Error : [N_left] must be one of 1, 2. Please check that.'}
}
else {case <- 'Error : [type_left] must be one of [dedicated], [public]. Please check that.'}
case
}
case_si(type_left = 'public', N_left = 1, si_left = 'unprotected')
case_si(type_left = 'dedicated', N_left = 2, si_left = 'direct-left')
#' @param N Number of exclusive lanes going straight.
#' @keywords Lane Use Coefficient Signalized Intersection
#' @seealso \code{\link{V_si}}
#' @details
#'     This coefficient is also applied when there are two or more dedicated left (or right) turn lanes,
#'     as is common at approach roads with two or more dedicated left-turn lanes or T-shaped intersections.
#' @export F_U_si
#' @examples
#' F_U_si(v_avg = 1200, N = 3)
#' F_U_si(790, 2)
F_U_si <- function(v_avg = NULL, design_level = NULL, N = NULL){
if (is.null(v_avg) == FALSE){
if (v_avg <= 800){
if (N == 1){f <- 1.00}
else if (N == 2){f <- 1.02}
else if (N == 3){f <- 1.10}
else if (N >= 4){f <- 1.15}
else {f <- 'Error : [N] must be positive integer. Please check that.'}
}
else if (v_avg > 800){
if (N == 1){f <- 1.00}
else if (N == 2){f <- 1.00}
else if (N == 3){f <- 1.05}
else if (N >= 4){f <- 1.08}
else {f <- 'Error : [N] must be positive integer. Please check that.'}
}
else {f <- 'Error : [v_avg] must be positive(vphpl). Please check that.'}
}
else if (is.null(design_level) == FALSE) {
if (design_level == 'C' | design_level == 'D'){
if (N == 1){f <- 1.00}
else if (N == 2){f <- 1.02}
else if (N == 3){f <- 1.10}
else if (N >= 4){f <- 1.15}
else {f <- 'Error : [N] must be positive integer. Please check that.'}
}
else if (design_level == 'E'){
if (N == 1){f <- 1.00}
else if (N == 2){f <- 1.00}
else if (N == 3){f <- 1.05}
else if (N >= 4){f <- 1.08}
else {f <- 'Error : [N] must be positive integer. Please check that.'}
}
else {f <- 'Error : [design_level] must be one of [C], [D], [E]. Please check that.'}
}
else {f <- 'Error : [v_avg] or [design_level] must be positive. Please check that.'}
f
}
F_U_si(v_avg = 1200, N = 3)
F_U_si(design_level = 'C', N == 3)
F_U_si(design_level = 'C', N = 3)
#'     However, when the V/c ratio of the lane group exceeds 0.9,
#'     there is often little or no difference in the usage rate by lane.
#'     * Without classifying the lane groups,
#'     it is not only possible to know the number of lanes in a lane group,
#'     but also because the use rate of public roundabouts for going straight is relatively low.
#'     Therefore, the average traffic volume for each straight lane of straight traffic is calculated.
#' @seealso \code{\link{V_P_si}}, \code{\link{F_U_si}}
#' @keywords traffic volume land use signalized intersection
#' @export V_si
#' @examples
V_si <- function(V_P = NULL, v_avg = NULL, design_level = NULL, N = NULL){
if (V_P > 0){
F_U <- F_U_si(v_avg = v_avg, design_level = design_level, N = N)
if (is.numeric(F_U) == TRUE){v <- V_P * F_U}
else {v <- F_U}
}
else {v <- 'Error : [V_P] must be positive(vph). Please check that.'}
v
}
V_si(V_P = 1200, v_avg = 400, N = 4)
V_si(V_P = 888, design_level = 'D', N = 3)
