}
result
}
ESL_2lane_road(V_d = 300, LB = 1, g_c_ratio = 0.23, L = 0.2, DIS = 0.93)
#' @param V_d *Numeric* Traffic in the direction of travel(pcph?)
#' @param LB *Categorical* Whether the left turn-only lane exist. \code{LB = 1} means exist. \code{LB = 0} means not.
#' @param g_c_ratio *Numeric* Effective green time ratio
#' @param L *Numeric* Direction Traffic Volume Left Turn Ratio
#' @param DIS *Numeric* Direction traffic volume straight forward ratio
#' @keywords
#' @export ESL Signal Intersection Length of Sphere of Influence(m)
#' @examples
#' capacity_multilane_road(type = 'uninterrupted_flow', design_speed = 80)
#' capacity_multilane_road(type = 'interrupted_flow', N = 3, S = 2000, g_c_ratio = 0.2)
ESL_2lane_road <- function(V_d = NULL, LB = NULL, g_c_ratio = NULL, L = NULL, DIS = NULL){
if (V_d >= 0 & (LB == 1 | LB == 0) & g_c_ratio >= 0 & g_c_ratio <= 1 & L >= 0 & L <= 1 & DIS >= 0 & DIS <= 0){
result <- 242 + 74*(V_d/100) - 102 * LB - 70 * ((V_d/100) * (g_c_ratio) + 152 * ((V_d/100) * L * DIS))
result
}
}
ESL_2lane_road(V_d = 300, LB = 1, g_c_ratio = 0.23, L = 0.2, DIS = 0.93)
ESL_2lane_road(V_d = 1000, LB = 1, g_c_ratio = 0.23, L = 0.2, DIS = 0.93)
#' @param V_d *Numeric* Traffic in the direction of travel(pcph?)
#' @param LB *Categorical* Whether the left turn-only lane exist. \code{LB = 1} means exist. \code{LB = 0} means not.
#' @param g_c_ratio *Numeric* Effective green time ratio
#' @param L *Numeric* Direction Traffic Volume Left Turn Ratio
#' @param DIS *Numeric* Direction traffic volume straight forward ratio
#' @keywords
#' @export ESL Signal Intersection Length of Sphere of Influence(m)
#' @examples
#' capacity_multilane_road(type = 'uninterrupted_flow', design_speed = 80)
#' capacity_multilane_road(type = 'interrupted_flow', N = 3, S = 2000, g_c_ratio = 0.2)
ESL_2lane_road <- function(V_d = NULL, LB = NULL, g_c_ratio = NULL, L = NULL, DIS = NULL){
if (V_d >= 0 & (LB == 1 | LB == 0) & g_c_ratio >= 0 & g_c_ratio <= 1 & L >= 0 & L <= 1 & DIS >= 0 & DIS <= 0){
result <- 242 + (74 * (V_d/100)) - (102 * LB) - (70 * ((V_d/100) * (g_c_ratio)) + (152 * ((V_d/100) * L * DIS)))
result
}
}
ESL_2lane_road(V_d = 1000, LB = 1, g_c_ratio = 0.23, L = 0.2, DIS = 0.93)
#' @param V_d *Numeric* Traffic in the direction of travel(pcph?)
#' @param LB *Categorical* Whether the left turn-only lane exist. \code{LB = 1} means exist. \code{LB = 0} means not.
#' @param g_c_ratio *Numeric* Effective green time ratio
#' @param L *Numeric* Direction Traffic Volume Left Turn Ratio
#' @param DIS *Numeric* Direction traffic volume straight forward ratio
#' @keywords
#' @export ESL Signal Intersection Length of Sphere of Influence(m)
#' @examples
#' capacity_multilane_road(type = 'uninterrupted_flow', design_speed = 80)
#' capacity_multilane_road(type = 'interrupted_flow', N = 3, S = 2000, g_c_ratio = 0.2)
ESL_2lane_road <- function(V_d = NULL, LB = NULL, g_c_ratio = NULL, L = NULL, DIS = NULL){
if (V_d >= 0 & is.null(LB) == FALSE & g_c_ratio >= 0 & g_c_ratio <= 1 & L >= 0 & L <= 1 & DIS >= 0 & DIS <= 0){
result <- 242 + (74 * (V_d/100)) - (102 * LB) - (70 * ((V_d/100) * (g_c_ratio)) + (152 * ((V_d/100) * L * DIS)))
result
}
}
ESL_2lane_road(V_d = 1000, LB = 1, g_c_ratio = 0.23, L = 0.2, DIS = 0.93)
#' @param V_d *Numeric* Traffic in the direction of travel(pcph?)
#' @param LB *Categorical* Whether the left turn-only lane exist. \code{LB = 1} means exist. \code{LB = 0} means not.
#' @param g_c_ratio *Numeric* Effective green time ratio
#' @param L *Numeric* Direction Traffic Volume Left Turn Ratio
#' @param DIS *Numeric* Direction traffic volume straight forward ratio
#' @keywords
#' @export ESL Signal Intersection Length of Sphere of Influence(m)
#' @examples
#' capacity_multilane_road(type = 'uninterrupted_flow', design_speed = 80)
#' capacity_multilane_road(type = 'interrupted_flow', N = 3, S = 2000, g_c_ratio = 0.2)
ESL_2lane_road <- function(V_d = NULL, LB = NULL, g_c_ratio = NULL, L = NULL, DIS = NULL){
if (V_d >= 0 & (LB == 1 | LB == 0) & g_c_ratio >= 0 & g_c_ratio <= 1 & L >= 0 & L <= 1 & DIS >= 0 & DIS <= 0){
result <- 242 + (74 * (V_d/100)) - (102 * LB) - (70 * ((V_d/100) * (g_c_ratio)) + (152 * ((V_d/100) * L * DIS)))
result
}
}
ESL_2lane_road(V_d = 1000, LB = 1, g_c_ratio = 0.23, L = 0.2, DIS = 0.93)
#'
#' This function follows <Formula 7-3>
#' @param V_d *Numeric* Traffic in the direction of travel(pcph?)
#' @param LB *Categorical* Whether the left turn-only lane exist. \code{LB = 1} means exist. \code{LB = 0} means not.
#' @param g_c_ratio *Numeric* Effective green time ratio
#' @param L *Numeric* Direction Traffic Volume Left Turn Ratio
#' @param DIS *Numeric* Direction traffic volume straight forward ratio
#' @keywords
#' @export ESL_2lane_road Signal Intersection Length of Sphere of Influence(m)
#' @examples
ESL_2lane_road <- function(V_d = NULL, LB = NULL, g_c_ratio = NULL, L = NULL, DIS = NULL){
if (V_d >= 0 & (LB == 1 | LB == 0) & g_c_ratio >= 0 & g_c_ratio <= 1 & L >= 0 & L <= 1 & DIS >= 0 & DIS <= 0){
result <- 242 + (74 * (V_d/100)) - (102 * LB) - (70 * ((V_d/100) * (g_c_ratio)) + (152 * ((V_d/100) * L * DIS)))
result
}
}
ESL_2lane_road(V_d = 1000, LB = 1, g_c_ratio = 0.23, L = 0.2, DIS = 0.93)
View(ESL_2lane_road)
#'
#' This function follows <Formula 7-3>
#' @param V_d *Numeric* Traffic in the direction of travel(pcph?)
#' @param LB *Categorical* Whether the left turn-only lane exist. \code{LB = 1} means exist. \code{LB = 0} means not.
#' @param g_c_ratio *Numeric* Effective green time ratio
#' @param L *Numeric* Direction Traffic Volume Left Turn Ratio
#' @param DIS *Numeric* Direction traffic volume straight forward ratio
#' @keywords
#' @export ESL_2lane_road Signal Intersection Length of Sphere of Influence(m)
#' @examples
ESL_2lane_road <- function(V_d = NULL, LB = NULL, g_c_ratio = NULL, L = NULL, DIS = NULL){
if (V_d >= 0 & (LB == 1 | LB == 0) & g_c_ratio >= 0 & g_c_ratio <= 1 & L >= 0 & L <= 1 & DIS >= 0 & DIS <= 0){
result <- 242 + (74 * (V_d/100)) - (102 * LB) - (70 * ((V_d/100) * (g_c_ratio)) + (152 * ((V_d/100) * L * DIS)))
result
}
else{
result <- 'hehe'
}
}
ESL_2lane_road(V_d = 1000, LB = 1, g_c_ratio = 0.23, L = 0.2, DIS = 0.93)
#'
#' This function follows <Formula 7-3>
#' @param V_d *Numeric* Traffic in the direction of travel(pcph?)
#' @param LB *Categorical* Whether the left turn-only lane exist. \code{LB = 1} means exist. \code{LB = 0} means not.
#' @param g_c_ratio *Numeric* Effective green time ratio
#' @param L *Numeric* Direction Traffic Volume Left Turn Ratio
#' @param DIS *Numeric* Direction traffic volume straight forward ratio
#' @keywords
#' @export ESL_2lane_road Signal Intersection Length of Sphere of Influence(m)
#' @examples
ESL_2lane_road <- function(V_d = NULL, LB = NULL, g_c_ratio = NULL, L = NULL, DIS = NULL){
if (V_d >= 0 & (LB == 1 | LB == 0) & g_c_ratio >= 0 & g_c_ratio <= 1 & L >= 0 & L <= 1 & DIS >= 0 & DIS <= 0){
result <- 242 + (74 * (V_d/100)) - (102 * LB) - (70 * ((V_d/100) * (g_c_ratio)) + (152 * ((V_d/100) * L * DIS)))
result
}
else{
result <- 'hehe'
result
}
}
ESL_2lane_road(V_d = 1000, LB = 1, g_c_ratio = 0.23, L = 0.2, DIS = 0.93)
#'
#' This function follows <Formula 7-3>
#' @param V_d *Numeric* Traffic in the direction of travel(pcph?)
#' @param LB *Categorical* Whether the left turn-only lane exist. \code{LB = 1} means exist. \code{LB = 0} means not.
#' @param g_c_ratio *Numeric* Effective green time ratio
#' @param L *Numeric* Direction Traffic Volume Left Turn Ratio
#' @param DIS *Numeric* Direction traffic volume straight forward ratio
#' @keywords
#' @export ESL_2lane_road Signal Intersection Length of Sphere of Influence(m)
#' @examples
ESL_2lane_road <- function(V_d = NULL, LB = NULL, g_c_ratio = NULL, L = NULL, DIS = NULL){
if (V_d >= 0 & (LB == 1 | LB == 0) & g_c_ratio >= 0 & g_c_ratio <= 1 & L >= 0 & L <= 1 & DIS >= 0 & DIS <= 0){
result <- 242 + (74 * (V_d/100)) - (102 * LB) - (70 * ((V_d/100) * (g_c_ratio)) + (152 * ((V_d/100) * L * DIS)))
result
}
else{
result <- hehe
result
}
}
ESL_2lane_road(V_d = 1000, LB = 1, g_c_ratio = 0.23, L = 0.2, DIS = 0.93)
#'
#' This function follows <Formula 7-3>
#' @param V_d *Numeric* Traffic in the direction of travel(pcph?)
#' @param LB *Categorical* Whether the left turn-only lane exist. \code{LB = 1} means exist. \code{LB = 0} means not.
#' @param g_c_ratio *Numeric* Effective green time ratio
#' @param L *Numeric* Direction Traffic Volume Left Turn Ratio
#' @param DIS *Numeric* Direction traffic volume straight forward ratio
#' @keywords
#' @export ESL_2lane_road Signal Intersection Length of Sphere of Influence(m)
#' @examples
ESL_2lane_road <- function(V_d = NULL, LB = NULL, g_c_ratio = NULL, L = NULL, DIS = NULL){
if (V_d >= 0 & (LB == 1 | LB == 0) & g_c_ratio >= 0 & g_c_ratio <= 1 & L >= 0 & L <= 1 & DIS >= 0 & DIS <= 0){
result <- 242 + (74 * (V_d/100)) - (102 * LB) - (70 * ((V_d/100) * (g_c_ratio)) + (152 * ((V_d/100) * L * DIS)))
result
}
else{
result <- 'hehe'
result
}
}
ESL_2lane_road(V_d = 1000, LB = 1, g_c_ratio = 0.23, L = 0.2, DIS = 0.93)
#'
#' This function follows <Formula 7-3>
#' @param V_d *Numeric* Traffic in the direction of travel(pcph?)
#' @param LB *Categorical* Whether the left turn-only lane exist. \code{LB = 1} means exist. \code{LB = 0} means not.
#' @param g_c_ratio *Numeric* Effective green time ratio
#' @param L *Numeric* Direction Traffic Volume Left Turn Ratio
#' @param DIS *Numeric* Direction traffic volume straight forward ratio
#' @keywords
#' @export ESL_2lane_road Signal Intersection Length of Sphere of Influence(m)
#' @examples
ESL_2lane_road <- function(V_d = NULL, LB = NULL, g_c_ratio = NULL, L = NULL, DIS = NULL){
if (V_d >= 0 & (LB == 1 | LB == 0) & g_c_ratio >= 0 & g_c_ratio <= 1 & L >= 0 & L <= 1 & DIS >= 0 & DIS <= 1){
result <- 242 + (74 * (V_d/100)) - (102 * LB) - (70 * ((V_d/100) * (g_c_ratio)) + (152 * ((V_d/100) * L * DIS)))
result
}
else{
result <- 'hehe'
result
}
}
ESL_2lane_road(V_d = 1000, LB = 1, g_c_ratio = 0.23, L = 0.2, DIS = 0.93)
ESL_2lane_road(300, 0, 0.11, 0.123, 0.84)
#' Peak Hour Factor in 2-lane Road (PHF_2lane_road)
#'
#' This function calculates the peak hour factor(PHF) in 2-lane-road in given traffic volume.
#'     It is desirable to measure the PHF in the field, and this table is a general value,
#'     so it should be used in a limited way.
#' @param V *Numeric* Traffic Volume(pcph/bidirectional)
#' @export PHF_2lane_road Peak hour factor(PHF) in 2-lane-road in given traffic volume.
#' @examples
PHF_2lane_road <- function(V = NULL){
if (V > 0 & V <= 200){PHF <- 0.80}
if (V > 200 & V <= 400){PHF <- 0.83}
if (V > 400 & V <= 600){PHF <- 0.86}
if (V > 600 & V <= 800){PHF <- 0.88}
if (V > 800 & V <= 1000){PHF <- 0.90}
if (V > 1000 & V <= 1200){PHF <- 0.91}
if (V > 1200 & V <= 1400){PHF <- 0.92}
if (V > 1400 & V <= 1600){PHF <- 0.93}
if (V > 1600 & V <= 1800){PHF <- 0.94}
if (V > 1800 & V <= 2000){PHF <- 0.95}
if (V > 2000 & V <= 2200){PHF <- 0.95}
if (V > 2200 & V <= 2400){PHF <- 0.96}
if (V > 2400){PHF <- 0.96}
else(){PHF <- 'V must be positive value.'}
PHF
}
#' Peak Hour Factor in 2-lane Road (PHF_2lane_road)
#'
#' This function calculates the peak hour factor(PHF) in 2-lane-road in given traffic volume.
#'     It is desirable to measure the PHF in the field, and this table is a general value,
#'     so it should be used in a limited way.
#' @param V *Numeric* Traffic Volume(pcph/bidirectional)
#' @export PHF_2lane_road Peak hour factor(PHF) in 2-lane-road in given traffic volume.
#' @examples
PHF_2lane_road <- function(V = NULL){
if (V > 0 & V <= 200){PHF <- 0.80}
if (V > 200 & V <= 400){PHF <- 0.83}
if (V > 400 & V <= 600){PHF <- 0.86}
if (V > 600 & V <= 800){PHF <- 0.88}
if (V > 800 & V <= 1000){PHF <- 0.90}
if (V > 1000 & V <= 1200){PHF <- 0.91}
if (V > 1200 & V <= 1400){PHF <- 0.92}
if (V > 1400 & V <= 1600){PHF <- 0.93}
if (V > 1600 & V <= 1800){PHF <- 0.94}
if (V > 1800 & V <= 2000){PHF <- 0.95}
if (V > 2000 & V <= 2200){PHF <- 0.95}
if (V > 2200 & V <= 2400){PHF <- 0.96}
if (V > 2400){PHF <- 0.96}
else {PHF <- 'V must be positive value.'}
PHF
}
PHF_2lane_road(V = 3020)
PHF_2lane_road(2000)
PHF_2lane_road(2000)
PHF_2lane_road <- function(V = NULL){
if (V > 0 & V <= 200){PHF <- 0.80}
if (V > 200 & V <= 400){PHF <- 0.83}
if (V > 400 & V <= 600){PHF <- 0.86}
if (V > 600 & V <= 800){PHF <- 0.88}
if (V > 800 & V <= 1000){PHF <- 0.90}
if (V > 1000 & V <= 1200){PHF <- 0.91}
if (V > 1200 & V <= 1400){PHF <- 0.92}
if (V > 1400 & V <= 1600){PHF <- 0.93}
if (V > 1600 & V <= 1800){PHF <- 0.94}
if (V > 1800 & V <= 2000){PHF <- 0.95}
if (V > 2000 & V <= 2200){PHF <- 0.95}
if (V > 2200 & V <= 2400){PHF <- 0.96}
if (V > 2400){PHF <- 0.96}
PHF
}
PHF_2lane_road(2000)
#' Heavy Vehicle Correction Factor in Flat Area according to the Traffle Volume in the Direction(E_T)
#'
#' This function follows <Table 7-4> (p.177)
#' @param V *Numeric* Traffic Volume in direction(pcph?)
#' @export E_T_2lane_road Heavy Vehicle Correction Factor in Flat Area according to the Traffle Volume in the Direction
#' @examples
E_T_2lane_Road <- function(V = NULL){
if (V == 100){E_T <- 4.1}
if (V > 100 & V < 200){E_T <- 100 - 0.4 * (V - 100) * 0.01}
if (V == 200){E_T <- 3.7}
if (V > 200 & V < 300){E_T <- 200 - 0.5 * (V - 200) * 0.01}
if (V == 300){E_T <- 3.2}
if (V > 300 & V < 400){E_T <- 300 - 0.5 * (V - 300) * 0.01}
if (V == 400){E_T <- 2.7}
if (V > 400 & V < 500){E_T <- 400 - 0.6 * (V - 400) * 0.01}
if (V == 500){E_T <- 2.3}
if (V > 500 & V < 600){E_T <- 500 - 0.5 * (V - 500) * 0.01}
if (V == 600){E_T <- 1.8}
if (V > 600 & V < 700){E_T <- 600 - 0.5 * (V - 600) * 0.01}
if (V == 700){E_T <- 1.3}
if (V > 700 & V < 800){E_T <- 700 - 0.3 * (V - 700) * 0.01}
if (V == 800){E_T <- 1.0}
if (V > 800 & V < 900){E_T <- 1.0}
if (V == 900){E_T <- 1.0}
if (V > 900 & V < 1000){E_T <- 1.0}
if (V == 1000){E_T <- 1.0}
if (V > 1000){E_T <- 1.0}
E_T
}
E_T(V = 300)
E_T_2lane_Road(V = 332)
E_T_2lane_Road(459)
#' Heavy Vehicle Correction Factor according to the Traffle Volume in the Direction(E_T)
#'
#' This function follows <Table 7-4>, <Table 7-5>, <Table 7-6>, <Table 7-7> (p.177)
#' @param topography *Categorical*  Choose one from : \code{'flatland'}, \code{'hill'}
#' @param V *Numeric* Traffic Volume in direction(pcph?)
#' @param output *Categorical* Choose one from : \code{'travel_speed'}, \code{'TDR'}
#' @export E_T_2lane_road Heavy Vehicle Correction Factor according to the Traffic Volume in the Direction
#' @examples
#' E_T_2lane_Road(V = 332)
#' E_T_2lane_Road(459)
E_T_2lane_Road <- function(V = NULL){
if (topography == 'flatland'){
if (output == 'travel_speed'){
if (V == 100){E_T <- 4.1}
if (V > 100 & V < 200){E_T <- 4.1 - 0.4 * (V - 100) * 0.01}
if (V == 200){E_T <- 3.7}
if (V > 200 & V < 300){E_T <- 3.7 - 0.5 * (V - 200) * 0.01}
if (V == 300){E_T <- 3.2}
if (V > 300 & V < 400){E_T <- 3.2 - 0.5 * (V - 300) * 0.01}
if (V == 400){E_T <- 2.7}
if (V > 400 & V < 500){E_T <- 2.7 - 0.6 * (V - 400) * 0.01}
if (V == 500){E_T <- 2.3}
if (V > 500 & V < 600){E_T <- 2.3 - 0.5 * (V - 500) * 0.01}
if (V == 600){E_T <- 1.8}
if (V > 600 & V < 700){E_T <- 1.8 - 0.5 * (V - 600) * 0.01}
if (V == 700){E_T <- 1.3}
if (V > 700 & V < 800){E_T <- 1.3 - 0.3 * (V - 700) * 0.01}
if (V == 800){E_T <- 1.0}
if (V > 800 & V < 900){E_T <- 1.0}
if (V == 900){E_T <- 1.0}
if (V > 900 & V < 1000){E_T <- 1.0}
if (V == 1000){E_T <- 1.0}
if (V > 1000){E_T <- 1.0}
}
if (output == 'TDR'){
if (V == 100){E_T <- 2.6}
if (V > 100 & V < 200){E_T <- 2.6 - 0.3 * (V - 100) * 0.01}
if (V == 200){E_T <- 2.3}
if (V > 200 & V < 300){E_T <- 2.3 - 0.2 * (V - 200) * 0.01}
if (V == 300){E_T <- 2.1}
if (V > 300 & V < 400){E_T <- 2.1 - 0.2 * (V - 300) * 0.01}
if (V == 400){E_T <- 1.9}
if (V > 400 & V < 500){E_T <- 1.9 - 0.3 * (V - 400) * 0.01}
if (V == 500){E_T <- 1.6}
if (V > 500 & V < 600){E_T <- 1.6 - 0.2 * (V - 500) * 0.01}
if (V == 600){E_T <- 1.4}
if (V > 600 & V < 700){E_T <- 1.4 - 0.2 * (V - 600) * 0.01}
if (V == 700){E_T <- 1.2}
if (V > 700 & V < 800){E_T <- 1.2 - 0.2 * (V - 700) * 0.01}
if (V == 800){E_T <- 1.0}
if (V > 800 & V < 900){E_T <- 1.0}
if (V == 900){E_T <- 1.0}
if (V > 900 & V < 1000){E_T <- 1.0}
if (V == 1000){E_T <- 1.0}
if (V > 1000){E_T <- 1.0}
}
}
if (topography == 'hill'){
if (output == 'travel_speed'){
if (V == 100){E_T <- 6.6}
if (V > 100 & V < 200){E_T <- 6.6 - 0.7 * (V - 100) * 0.01}
if (V == 200){E_T <- 5.9}
if (V > 200 & V < 300){E_T <- 5.9 - 0.7 * (V - 200) * 0.01}
if (V == 300){E_T <- 5.2}
if (V > 300 & V < 400){E_T <- 5.2 - 0.7 * (V - 300) * 0.01}
if (V == 400){E_T <- 4.5}
if (V > 400 & V < 500){E_T <- 4.5 - 0.7 * (V - 400) * 0.01}
if (V == 500){E_T <- 3.8}
if (V > 500 & V < 600){E_T <- 3.8 - 0.6 * (V - 500) * 0.01}
if (V == 600){E_T <- 3.1}
if (V > 600 & V < 700){E_T <- 3.1 - 0.6 * (V - 600) * 0.01}
if (V == 700){E_T <- 2.5}
if (V > 700 & V < 800){E_T <- 2.5 - 0.7 * (V - 700) * 0.01}
if (V == 800){E_T <- 1.8}
if (V > 800 & V < 900){E_T <- 1.0}
if (V == 900){E_T <- 1.1}
if (V > 900 & V < 1000){E_T <- 1.0}
if (V == 1000){E_T <- 1.0}
if (V > 1000){E_T <- 1.0}
}
if (output == 'TDR'){
if (V == 100){E_T <- 3.7}
if (V > 100 & V < 200){E_T <- 3.7 - 0.4 * (V - 100) * 0.01}
if (V == 200){E_T <- 3.3}
if (V > 200 & V < 300){E_T <- 3.3 - 0.3 * (V - 200) * 0.01}
if (V == 300){E_T <- 3.0}
if (V > 300 & V < 400){E_T <- 3.0 - 0.4 * (V - 300) * 0.01}
if (V == 400){E_T <- 2.6}
if (V > 400 & V < 500){E_T <- 2.6 - 0.3 * (V - 400) * 0.01}
if (V == 500){E_T <- 2.3}
if (V > 500 & V < 600){E_T <- 2.3 - 0.3 * (V - 500) * 0.01}
if (V == 600){E_T <- 2.0}
if (V > 600 & V < 700){E_T <- 2.0 - 0.4 * (V - 600) * 0.01}
if (V == 700){E_T <- 1.6}
if (V > 700 & V < 800){E_T <- 1.6 - 0.3 * (V - 700) * 0.01}
if (V == 800){E_T <- 1.3}
if (V > 700 & V < 800){E_T <- 1.3 - 0.3 * (V - 800) * 0.01}
if (V == 900){E_T <- 1.0}
if (V > 900 & V < 1000){E_T <- 1.0}
if (V == 1000){E_T <- 1.0}
if (V > 1000){E_T <- 1.0}
}
}
E_T
}
E_T_2lane_Road(topography = 'flatland', V = 332)
E_T_2lane_Road(topography = 'flatland', V = 332, output = 'TDR')
#' Heavy Vehicle Correction Factor according to the Traffle Volume in the Direction(E_T)
#'
#' This function follows <Table 7-4>, <Table 7-5>, <Table 7-6>, <Table 7-7> (p.177)
#' @param topography *Categorical*  Choose one from : \code{'flatland'}, \code{'hill'}
#' @param V *Numeric* Traffic Volume in direction(pcph?)
#' @param output *Categorical* Choose one from : \code{'travel_speed'}, \code{'TDR'}
#' @export E_T_2lane_road Heavy Vehicle Correction Factor according to the Traffic Volume in the Direction
#' @examples
#' E_T_2lane_Road(V = 332)
#' E_T_2lane_Road(459)
E_T_2lane_Road <- function(topography = NULL, V = NULL, output = NULL){
if (topography == 'flatland'){
if (output == 'travel_speed'){
if (V == 100){E_T <- 4.1}
if (V > 100 & V < 200){E_T <- 4.1 - 0.4 * (V - 100) * 0.01}
if (V == 200){E_T <- 3.7}
if (V > 200 & V < 300){E_T <- 3.7 - 0.5 * (V - 200) * 0.01}
if (V == 300){E_T <- 3.2}
if (V > 300 & V < 400){E_T <- 3.2 - 0.5 * (V - 300) * 0.01}
if (V == 400){E_T <- 2.7}
if (V > 400 & V < 500){E_T <- 2.7 - 0.6 * (V - 400) * 0.01}
if (V == 500){E_T <- 2.3}
if (V > 500 & V < 600){E_T <- 2.3 - 0.5 * (V - 500) * 0.01}
if (V == 600){E_T <- 1.8}
if (V > 600 & V < 700){E_T <- 1.8 - 0.5 * (V - 600) * 0.01}
if (V == 700){E_T <- 1.3}
if (V > 700 & V < 800){E_T <- 1.3 - 0.3 * (V - 700) * 0.01}
if (V == 800){E_T <- 1.0}
if (V > 800 & V < 900){E_T <- 1.0}
if (V == 900){E_T <- 1.0}
if (V > 900 & V < 1000){E_T <- 1.0}
if (V == 1000){E_T <- 1.0}
if (V > 1000){E_T <- 1.0}
}
if (output == 'TDR'){
if (V == 100){E_T <- 2.6}
if (V > 100 & V < 200){E_T <- 2.6 - 0.3 * (V - 100) * 0.01}
if (V == 200){E_T <- 2.3}
if (V > 200 & V < 300){E_T <- 2.3 - 0.2 * (V - 200) * 0.01}
if (V == 300){E_T <- 2.1}
if (V > 300 & V < 400){E_T <- 2.1 - 0.2 * (V - 300) * 0.01}
if (V == 400){E_T <- 1.9}
if (V > 400 & V < 500){E_T <- 1.9 - 0.3 * (V - 400) * 0.01}
if (V == 500){E_T <- 1.6}
if (V > 500 & V < 600){E_T <- 1.6 - 0.2 * (V - 500) * 0.01}
if (V == 600){E_T <- 1.4}
if (V > 600 & V < 700){E_T <- 1.4 - 0.2 * (V - 600) * 0.01}
if (V == 700){E_T <- 1.2}
if (V > 700 & V < 800){E_T <- 1.2 - 0.2 * (V - 700) * 0.01}
if (V == 800){E_T <- 1.0}
if (V > 800 & V < 900){E_T <- 1.0}
if (V == 900){E_T <- 1.0}
if (V > 900 & V < 1000){E_T <- 1.0}
if (V == 1000){E_T <- 1.0}
if (V > 1000){E_T <- 1.0}
}
}
if (topography == 'hill'){
if (output == 'travel_speed'){
if (V == 100){E_T <- 6.6}
if (V > 100 & V < 200){E_T <- 6.6 - 0.7 * (V - 100) * 0.01}
if (V == 200){E_T <- 5.9}
if (V > 200 & V < 300){E_T <- 5.9 - 0.7 * (V - 200) * 0.01}
if (V == 300){E_T <- 5.2}
if (V > 300 & V < 400){E_T <- 5.2 - 0.7 * (V - 300) * 0.01}
if (V == 400){E_T <- 4.5}
if (V > 400 & V < 500){E_T <- 4.5 - 0.7 * (V - 400) * 0.01}
if (V == 500){E_T <- 3.8}
if (V > 500 & V < 600){E_T <- 3.8 - 0.6 * (V - 500) * 0.01}
if (V == 600){E_T <- 3.1}
if (V > 600 & V < 700){E_T <- 3.1 - 0.6 * (V - 600) * 0.01}
if (V == 700){E_T <- 2.5}
if (V > 700 & V < 800){E_T <- 2.5 - 0.7 * (V - 700) * 0.01}
if (V == 800){E_T <- 1.8}
if (V > 800 & V < 900){E_T <- 1.0}
if (V == 900){E_T <- 1.1}
if (V > 900 & V < 1000){E_T <- 1.0}
if (V == 1000){E_T <- 1.0}
if (V > 1000){E_T <- 1.0}
}
if (output == 'TDR'){
if (V == 100){E_T <- 3.7}
if (V > 100 & V < 200){E_T <- 3.7 - 0.4 * (V - 100) * 0.01}
if (V == 200){E_T <- 3.3}
if (V > 200 & V < 300){E_T <- 3.3 - 0.3 * (V - 200) * 0.01}
if (V == 300){E_T <- 3.0}
if (V > 300 & V < 400){E_T <- 3.0 - 0.4 * (V - 300) * 0.01}
if (V == 400){E_T <- 2.6}
if (V > 400 & V < 500){E_T <- 2.6 - 0.3 * (V - 400) * 0.01}
if (V == 500){E_T <- 2.3}
if (V > 500 & V < 600){E_T <- 2.3 - 0.3 * (V - 500) * 0.01}
if (V == 600){E_T <- 2.0}
if (V > 600 & V < 700){E_T <- 2.0 - 0.4 * (V - 600) * 0.01}
if (V == 700){E_T <- 1.6}
if (V > 700 & V < 800){E_T <- 1.6 - 0.3 * (V - 700) * 0.01}
if (V == 800){E_T <- 1.3}
if (V > 700 & V < 800){E_T <- 1.3 - 0.3 * (V - 800) * 0.01}
if (V == 900){E_T <- 1.0}
if (V > 900 & V < 1000){E_T <- 1.0}
if (V == 1000){E_T <- 1.0}
if (V > 1000){E_T <- 1.0}
}
}
E_T
}
E_T_2lane_Road(topography = 'flatland', V = 332, output = 'TDR')
E_T_2lane_Road('hill', 459, 'travel_speed')
