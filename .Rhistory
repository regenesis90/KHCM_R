V_STR_sh_3si <- function(V_R = NULL, V_TH = NULL, E_R = NULL, N = NULL){
if (V_R >= 0 & V_L >= 0 & V_TH >= 0){
if (E_R > 0 & E_L > 0){
if (N >= 1){vstr <- 1/N * (V_TH - E_R * V_R * (N - 1))}
else {vstr <- 'Error : [N] must be >= 1 and integer. Please check that.'}
}
else {vstr <- 'Error : [E_R], [E_L] must be positive. Please check that.'}
}
else {vstr <- 'Error : [V_R], [V_L], [V_TH] must be >= 0(vph). Please check that.'}
vstr
}
V_STR_sh_3si(V_R = 92, V_TH = 763, E_R = 1.3, N = 5)
#'     This function follows <Formula 8-19> in KHCM(2013), p.240, 244.
#' @param V_R Right Turn Traffic Volume(vph)
#' @param V_TH Straight-through traffic (vph)
#' @param E_R Forward conversion factor for right turn
#' @param N Total number of access lanes (excluding dedicated left-turn lanes).
#' @keywords straight-through traffic volume public left-turn signalized intersection
#' @seealso \code{\link{E_R_si}}, \code{\link{lane_group_3si}}
#' @export V_STR_sh_3si
#' @examples
#'
V_STR_sh_3si <- function(V_R = NULL, V_TH = NULL, E_R = NULL, N = NULL){
if (V_R >= 0 & V_L >= 0 & V_TH >= 0){
if (E_R > 0 & E_L > 0){
if (N >= 1){vstr <- 1/N * (V_TH - E_R * V_R * (N - 1))}
else {vstr <- 'Error : [N] must be >= 1 and integer. Please check that.'}
}
else {vstr <- 'Error : [E_R], [E_L] must be positive. Please check that.'}
}
else {vstr <- 'Error : [V_R], [V_L], [V_TH] must be >= 0(vph). Please check that.'}
vstr
}
V_STR_sh_3si(V_R = 92, V_TH = 763, E_R = 1.3, N = 5)
#'     This function follows <Formula 8-19> in KHCM(2013), p.240, 244.
#' @param V_R Right Turn Traffic Volume(vph)
#' @param V_TH Straight-through traffic (vph)
#' @param E_R Forward conversion factor for right turn
#' @param N Total number of access lanes (excluding dedicated left-turn lanes).
#' @keywords straight-through traffic volume public left-turn signalized intersection
#' @seealso \code{\link{E_R_si}}, \code{\link{lane_group_3si}}
#' @export V_STR_sh_3si
#' @examples
#'
V_STR_sh_3si <- function(V_R = NULL, V_TH = NULL, E_R = NULL, N = NULL){
if (V_R >= 0 & V_TH >= 0){
if (E_R > 0){
if (N >= 1){vstr <- 1/N * (V_TH - E_R * V_R * (N - 1))}
else {vstr <- 'Error : [N] must be >= 1 and integer. Please check that.'}
}
else {vstr <- 'Error : [E_R] must be positive. Please check that.'}
}
else {vstr <- 'Error : [V_R], [V_TH] must be >= 0(vph). Please check that.'}
vstr
}
V_STR_sh_3si(V_R = 92, V_TH = 763, E_R = 1.3, N = 5)
#' Turning traffic volume ratio of the practically dedicated right turn lane group i at 3-way signalized intersection.
#'    The ratio of right turns in the actual dedicated right turn lane group
#'    This function follows <Formula 8-22> in KHCM(2013), p.242.
#' @param V_R Corrected right turn traffic volume (vph) for RTOR. See \code{\link{V_R_si}}
#' @param V_RF Traffic going straight ahead of the first right turn on the public right turn lane at the signal intersection(vph). See \code{\link{V_RF_sh_3si}}
#' @keywords turning traffic volume ratio practically dedicated right turn lane group signalized intersection
#' @seealso \code{\link{V_RF_sh_3si}}, \code{\link{V_R_si}}
#' @export P_R_pd_si
#' @examples
#' P_R_pd_3si(V_R = 321, V_RF = 283)
P_R_pd_3si <- function(V_R = NULL, V_RF = NULL){
if (V_R >= 0 & V_RF >= 0 & ((V_R + V_RF) > 0)){
p <- V_R / (V_RF + V_R)
}
else {p <- 'Error : [V_R], [V_RF] must be positive(vph). Please check that.'}
p
}
P_R_pd_3si(V_R = 321, V_RF = 283)
#' If there is a left-turn exclusive lane on an approach with only straight and left turns at a three-way signal intersection,
#'     it is correction coefficient for straight-only lanes with right-side friction at 3-way signalized intersection
#'     This function follows <Formula 8-33> in KHCM(2013), p.245.
#' @param L_H Loss of saturation headway time due to roadside friction on right-turn lanes at signal intersections(sec). See \code{\link{L_H_si}}
#' @param N The total number of lanes on the approach road excluding left-turn lanes
#' @keywords correction coefficient straight-only lane right-side friction 3-way three-way signalized intersection
#' @seealso \code{\link{L_H_si}}
#' @export  right turn correction factor
#' @examples
#' f_th_d_3si
f_th_d_3si <- function(L_H = NULL, N = NULL){
if (L_H > 0){
if (N >= 1){
f <- 1 - L_H / (3600 * N)
}
else {f <- 'Error : [N] must be positive integer. Please check that.'}
}
else {f <- 'Error : [L_H] must be positive(sec). Please check that.'}
f
}
f_th_d_3si(L_H = 3.3, N = 3)
#' When an actual exclusive lane group is formed at a three-way signal intersection,
#'     the remaining lane groups become a straight-forward exclusive lane group.
#'     The correction factor for this straight-only lane group.
#'     This function follows <Formula 8-35> in KHCM(2013), p.245.
#' @param L_H Loss of saturation headway time due to roadside friction on right-turn lanes at signal intersections(sec). See \code{\link{L_H_si}}
#' @param N_th Number of lanes dedicated to going straight excluding lanes for practically dedicated left turns
#' @keywords correction coefficient straight-only lane right-side friction 3-way three-way signalized intersection
#' @export f_th_pd_3si
#' @examples
#' f_th_d_3si(L_H = 3.3, N_th = 3)
f_th_pd_3si <- function(L_H = NULL, N_th = NULL){
if (L_H > 0){
if (N_th >= 1){
f <- 1 - L_H / (3600 * N_th)
}
else {f <- 'Error : [N_th] must be positive integer. Please check that.'}
}
else {f <- 'Error : [L_H] must be positive(sec). Please check that.'}
f
}
f_th_d_3si(L_H = 3.3, N_th = 3)
f_th_pd_3si(L_H = 3.3, N_th = 3)
#'
#' Ratio of left turns in direct-left shared lanes at three-way signalized intersection
#'     This function follows <Formula 8-36> in KHCM(2013), p.246.
#' @param V_L Left Turn Traffic Volume(vph)
#' @param V_TH Straight-through traffic (vph)
#' @keywords Turning traffic volume ratio shared left-turning lane group signalized intersection
#' @seealso \code{\link{f_LT_sh_3si}}
#' @export P_LT_sh_3si
#' @examples
#' P_LT_sh_3si(V_L = 300, V_TH = 1000)
P_LT_sh_3si <- function(V_L = NULL, V_TH = NULL){
if (V_L >= 0 & V_TH > 0){
p <- V_L / (V_TH + V_L)
}
else {p <- 'Error : [V_L], [V_TH], must be positive(vph). Please check that.'}
p
}
P_LT_sh_3si(V_L = 300, V_TH = 1000)
#'     This function follows <Formula 8-36> in KHCM(2013), p.246.
#' @param E_L Forward conversion coefficient for public Left turns in a left turn lane at signalized intersection.
#' @param P_LT Turn traffic ratio for shared Left-turn lane group i.
#' @param L_H Friction by roadside lane going straight (seconds). See \code{\link{L_H_si}}
#' @param V_L Left Turn Traffic Volume(vph)
#' @keywords Left turn correction factor shared lane 3-way signalized intersection
#' @seealso \code{\link{E_L_si}}, \code{\link{P_LT_sh_si}}
#' @export f_LT_sh_3si Left turn correction factor
#' @examples
#' f_LT_sh_3si(E_L = 1.32, P_LT = 0.33)
f_LT_sh_3si <- function(E_L = NULL, P_LT = NULL, L_H = NULL, V_L = NULL){
if (is.numeric(E_L) == TRUE & P_LT >= 0 & P_LT <= 1){
if (V_L > 0){
if (L_H > 0){fl <- 1 / (1 + P_LT * (E_L - 1 + (L_H / (1.63 * V_L))))}
else {fl <- 'Error : [L_H] must be positive(sec). Please check that.'}
}
else {fl <- 'Error : [V_L] must be positive(vph). Please check that.'}
}
else {fl <- 'Error : [E_L] must be numeric. [P_LT] must be >= 0 and <= 1. Please check that.'}
fl
}
f_LT_sh_3si(E_L = 1.32, P_LT = 0.33, L_H = 3.3, V_L = 123)
#' @param f_c Percentage of crosswalk signal times that are not available to vehicles turning right at a signalized intersection. See \code{\link{f_c_si}}
#' @param G_P Pedestrian signal time (sec)
#' @param L_H Friction by roadside lane going straight (seconds). See \code{\link{L_H_si}}
#' @param C Signal period length (sec)
#' @param N_R Number of lanes for dedicated right turns
#' @keywords right turn correction factor shared lane signalized intersection
#' @seealso \code{\link{f_c_si}}, \code{\link{L_H_si}}
#' @export f_RT_d_3si
#' @examples
#' f_RT_d_3si(E_R = 1.32, P_RT = 0.33)
f_RT_d_3si <- function(traffic_island = NULL, f_c = NULL, G_P = NULL, L_H = NULL, C = NULL, N_R = NULL){
if (f_c > 0){
if (G_P > 0 & C > 0){
if (L_H >= 0){
if (N_R >= 1){
if (traffic_island == 'yes'){frt <- 0.86 * (1 - (f_c * G_P / (C * N_R)) - (L_H / (3600 * N_R)))}
else if (traffic_island == 'no'){0.86 * (1 - (L_H / (3600 * N_R)))}
else {frt <- 'Error : [traffic_island] must be one of [yes], [no]. Please check that.'}
}
else {frt <- 'Error : [N_R] must be positive integer. Please check that.'}
}
else {frt <- 'Error : [L_H] must be positive(sec). Please check that.'}
}
else {frt <- 'Error : [G_P], [C] must be positive(sec). Please check that.'}
}
else {frt <- 'Error : [f_c] must be positive. Please check that.'}
frt
}
f_RT_d_3si(traffic_island = 'yes', f_c = 2.3, G_P = 60, L_H = 4.2, C = 180, N_R = 2)
f_RT_d_3si(traffic_island = 'no', L_H = 4.2, N_R = 3)
#' @param f_c Percentage of crosswalk signal times that are not available to vehicles turning right at a signalized intersection. See \code{\link{f_c_si}}
#' @param G_P Pedestrian signal time (sec)
#' @param L_H Friction by roadside lane going straight (seconds). See \code{\link{L_H_si}}
#' @param C Signal period length (sec)
#' @param N_R Number of lanes for dedicated right turns
#' @keywords right turn correction factor shared lane signalized intersection
#' @seealso \code{\link{f_c_si}}, \code{\link{L_H_si}}
#' @export f_RT_d_3si
#' @examples
#' f_RT_d_3si(traffic_island = 'yes', f_c = 2.3, G_P = 60, L_H = 4.2, C = 180, N_R = 2)
f_RT_d_3si <- function(traffic_island = NULL, f_c = NULL, G_P = NULL, L_H = NULL, C = NULL, N_R = NULL){
if (traffic_island == 'yes'){
if (f_c > 0){
if (G_P > 0 & C > 0){
if (L_H >= 0){
if (N_R >= 1){frt <- 0.86 * (1 - (f_c * G_P / (C * N_R)) - (L_H / (3600 * N_R)))
}
else {frt <- 'Error : [N_R] must be positive integer. Please check that.'}
}
else {frt <- 'Error : [L_H] must be positive(sec). Please check that.'}
}
else {frt <- 'Error : [G_P], [C] must be positive(sec). Please check that.'}
}
else {frt <- 'Error : [f_c] must be positive. Please check that.'}
frt
}
else if (traffic_island == 'no'){
if (L_H >= 0){
if (N_R >= 1){0.86 * (1 - (L_H / (3600 * N_R)))}
else {frt <- 'Error : [N_R] must be positive integer. Please check that.'}
}
else {frt <- 'Error : [L_H] must be positive(sec). Please check that.'}
}
else {frt <- 'Error : [traffic_island] must be one of [yes], [no]. Please check that.'}
frt
}
f_RT_d_3si(traffic_island = 'no', L_H = 1.2, N_R = 1)
#' @param f_c Percentage of crosswalk signal times that are not available to vehicles turning right at a signalized intersection. See \code{\link{f_c_si}}
#' @param G_P Pedestrian signal time (sec)
#' @param L_H Friction by roadside lane going straight (seconds). See \code{\link{L_H_si}}
#' @param C Signal period length (sec)
#' @param N_R Number of lanes for dedicated right turns
#' @keywords right turn correction factor shared lane signalized intersection
#' @seealso \code{\link{f_c_si}}, \code{\link{L_H_si}}
#' @export f_RT_d_3si
#' @examples
#' f_RT_d_3si(traffic_island = 'yes', f_c = 2.3, G_P = 60, L_H = 4.2, C = 180, N_R = 2)
f_RT_d_3si <- function(traffic_island = NULL, f_c = NULL, G_P = NULL, L_H = NULL, C = NULL, N_R = NULL){
if (traffic_island == 'yes'){
if (f_c > 0){
if (G_P > 0 & C > 0){
if (L_H >= 0){
if (N_R >= 1){frt <- 0.86 * (1 - (f_c * G_P / (C * N_R)) - (L_H / (3600 * N_R)))
}
else {frt <- 'Error : [N_R] must be positive integer. Please check that.'}
}
else {frt <- 'Error : [L_H] must be positive(sec). Please check that.'}
}
else {frt <- 'Error : [G_P], [C] must be positive(sec). Please check that.'}
}
else {frt <- 'Error : [f_c] must be positive. Please check that.'}
frt
}
else if (traffic_island == 'no'){
if (L_H >= 0){
if (N_R >= 1){frt <- 0.86 * (1 - (L_H / (3600 * N_R)))}
else {frt <- 'Error : [N_R] must be positive integer. Please check that.'}
}
else {frt <- 'Error : [L_H] must be positive(sec). Please check that.'}
}
else {frt <- 'Error : [traffic_island] must be one of [yes], [no]. Please check that.'}
frt
}
f_RT_d_3si(traffic_island = 'no', L_H = 1.2, N_R = 1)
#'     It follows <Formula 8-38> in KHCM(2013), p.247.
#' @param N_i number of lanes in the i lane group
#' @param f_LT Left turn correction factor for shared left turn lanes at signalized intersections. See \code{\link{f_LT_sh_si}}
#' @param f_RT Right turn correction factor for shared right turn lanes at signalized intersections. See \code{\link{f_RT_sh_si}}
#' @param f_w Lane width correction factor. See \code{\link{f_w_si}}
#' @param f_g Approach slope correction factor. See \code{\link{f_g_si}}
#' @param f_hv Heavy vehicle factor. See \code{\link{f_hv_si}}
#' @seealso \code{\link{f_LT_sh_si}}, \code{\link{f_RT_sh_si}}, \code{\link{f_w_si}}, \code{\link{f_g_si}}, \code{\link{f_hv_si}}
#' @export S_i_si Saturated traffic flow rate of lane group i
#' @examples
S_i_si <- function(N_i = NULL, f_LT = NULL, f_RT = NULL, f_w = NULL, f_g = NULL, f_hv = NULL){
if (N_i >= 1){
if (f_w > 0){
if (f_hv > 0){
if (f_g > 0){
if (f_LT > 0 & is.null(f_RT) == TRUE){s <- S_0_si() * N_i * f_LT * f_w * f_g * f_hv}
else if (f_RT > 0 & is.null(f_LT) == FALSE){s <- S_0_si() * N_i * f_RT * f_w * f_g * f_hv}
else if (f_LT > 0 & f_RT > 0){s <- S_0_si() * N_i * f_LT * f_RT * f_w * f_g * f_hv}
else {s <- 'Error : [f_RT], [f_LT] must be positive. Please check that.'}
}
else {s <- 'Error : [f_g] must be positive. Please check that.'}
}
else {s <- 'Error : [f_hv] must be positive. Please check that.'}
}
else {s <- 'Error : [f_w] must be positive. Please check that.'}
}
else {s <- 'Error : [N_i] must be positive integer. Please check that.'}
s
}
#'     It follows <Formula 8-38> in KHCM(2013), p.247.
#' @param N_i number of lanes in the i lane group
#' @param f_LT Left turn correction factor for shared left turn lanes at signalized intersections. See \code{\link{f_LT_sh_si}}
#' @param f_RT Right turn correction factor for shared right turn lanes at signalized intersections. See \code{\link{f_RT_sh_si}}
#' @param f_w Lane width correction factor. See \code{\link{f_w_si}}
#' @param f_g Approach slope correction factor. See \code{\link{f_g_si}}
#' @param f_hv Heavy vehicle factor. See \code{\link{f_hv_si}}
#' @seealso \code{\link{f_LT_sh_si}}, \code{\link{f_RT_sh_si}}, \code{\link{f_w_si}}, \code{\link{f_g_si}}, \code{\link{f_hv_si}}
#' @export S_i_si Saturated traffic flow rate of lane group i
#' @examples
S_i_si <- function(N_i = NULL, f_LT = NULL, f_RT = NULL, f_w = NULL, f_g = NULL, f_hv = NULL){
if (N_i >= 1){
if (f_w > 0){
if (f_hv > 0){
if (f_g > 0){
if (f_LT > 0 & is.null(f_RT) == TRUE){s <- S_0_si() * N_i * f_LT * f_w * f_g * f_hv}
else if (f_RT > 0 & is.null(f_LT) == FALSE){s <- S_0_si() * N_i * f_RT * f_w * f_g * f_hv}
else if (f_LT > 0 & f_RT > 0){s <- S_0_si() * N_i * f_LT * f_RT * f_w * f_g * f_hv}
else if (is.null(f_RT) == TRUE & is.null(f_LT) == TRUE){s <- S_0_si() * N_i * f_w * f_g * f_hv}
else {s <- 'Error : [f_RT], [f_LT] must be positive. Please check that.'}
}
else {s <- 'Error : [f_g] must be positive. Please check that.'}
}
else {s <- 'Error : [f_hv] must be positive. Please check that.'}
}
else {s <- 'Error : [f_w] must be positive. Please check that.'}
}
else {s <- 'Error : [N_i] must be positive integer. Please check that.'}
s
}
S_i_si(N_i = 2, f_LT = 2.2, f_RT = 1.1, f_w = 1.0, f_g = 1.2, f_hv = 1.5)
#' @details
#'     The basic conditions for a signalized intersection are as follows.
#'     - More than 3m lane width
#'     - no-slope access
#'     - The traffic flow is straight, and all vehicles are
#'     - There is no bus stop or on-street parking facility within 75m upstream of the approach stop line
#'     - No vehicles entering or leaving within 60m upstream of the approach stop line
#' @export S_0_si 2200
#' @example
#' S_0_si()
S_0_si <- function(){
2200
}
#'     It follows <Formula 8-38> in KHCM(2013), p.247.
#' @param N_i number of lanes in the i lane group
#' @param f_LT Left turn correction factor for shared left turn lanes at signalized intersections. See \code{\link{f_LT_sh_si}}
#' @param f_RT Right turn correction factor for shared right turn lanes at signalized intersections. See \code{\link{f_RT_sh_si}}
#' @param f_w Lane width correction factor. See \code{\link{f_w_si}}
#' @param f_g Approach slope correction factor. See \code{\link{f_g_si}}
#' @param f_hv Heavy vehicle factor. See \code{\link{f_hv_si}}
#' @seealso \code{\link{f_LT_sh_si}}, \code{\link{f_RT_sh_si}}, \code{\link{f_w_si}}, \code{\link{f_g_si}}, \code{\link{f_hv_si}}
#' @export S_i_si Saturated traffic flow rate of lane group i
#' @examples
S_i_si <- function(N_i = NULL, f_LT = NULL, f_RT = NULL, f_w = NULL, f_g = NULL, f_hv = NULL){
if (N_i >= 1){
if (f_w > 0){
if (f_hv > 0){
if (f_g > 0){
if (f_LT > 0 & is.null(f_RT) == TRUE){s <- S_0_si() * N_i * f_LT * f_w * f_g * f_hv}
else if (f_RT > 0 & is.null(f_LT) == FALSE){s <- S_0_si() * N_i * f_RT * f_w * f_g * f_hv}
else if (f_LT > 0 & f_RT > 0){s <- S_0_si() * N_i * f_LT * f_RT * f_w * f_g * f_hv}
else if (is.null(f_RT) == TRUE & is.null(f_LT) == TRUE){s <- S_0_si() * N_i * f_w * f_g * f_hv}
else {s <- 'Error : [f_RT], [f_LT] must be positive. Please check that.'}
}
else {s <- 'Error : [f_g] must be positive. Please check that.'}
}
else {s <- 'Error : [f_hv] must be positive. Please check that.'}
}
else {s <- 'Error : [f_w] must be positive. Please check that.'}
}
else {s <- 'Error : [N_i] must be positive integer. Please check that.'}
s
}
S_i_si(N_i = 2, f_LT = 2.2, f_RT = 1.1, f_w = 1.0, f_g = 1.2, f_hv = 1.5)
S_i_si(N_i = 2, f_w = 1.0, f_g = 1.2, f_hv = 1.5
S_i_si(N_i = 2, f_w = 1.0, f_g = 1.2, f_hv = 1.5)
S_i_si(N_i = 2, f_w = 1.0, f_g = 1.2, f_hv = 1.5)
S_i_si(N_i = 2, f_w = 1.0, f_g = 1.2, f_hv = 1.5)
#' @param N_i number of lanes in the i lane group
#' @param f_LT Left turn correction factor for shared left turn lanes at signalized intersections. See \code{\link{f_LT_sh_si}}
#' @param f_RT Right turn correction factor for shared right turn lanes at signalized intersections. See \code{\link{f_RT_sh_si}}
#' @param f_w Lane width correction factor. See \code{\link{f_w_si}}
#' @param f_g Approach slope correction factor. See \code{\link{f_g_si}}
#' @param f_hv Heavy vehicle factor. See \code{\link{f_hv_si}}
#' @seealso \code{\link{f_LT_sh_si}}, \code{\link{f_RT_sh_si}}, \code{\link{f_w_si}}, \code{\link{f_g_si}}, \code{\link{f_hv_si}}
#' @export S_i_si Saturated traffic flow rate of lane group i
#' @examples
#' S_i_si(N_i = 2, f_LT = 2.2, f_RT = 1.1, f_w = 1.0, f_g = 1.2, f_hv = 1.5)
S_i_si <- function(N_i = NULL, f_LT = NULL, f_RT = NULL, f_w = NULL, f_g = NULL, f_hv = NULL){
if (N_i >= 1){
if (f_w > 0){
if (f_hv > 0){
if (f_g > 0){
if (is.null(f_RT) == TRUE & is.null(f_LT) == TRUE){s <- S_0_si() * N_i * f_w * f_g * f_hv}
else if (f_LT > 0 & is.null(f_RT) == TRUE){s <- S_0_si() * N_i * f_LT * f_w * f_g * f_hv}
else if (f_RT > 0 & is.null(f_LT) == FALSE){s <- S_0_si() * N_i * f_RT * f_w * f_g * f_hv}
else if (f_LT > 0 & f_RT > 0){s <- S_0_si() * N_i * f_LT * f_RT * f_w * f_g * f_hv}
else {s <- 'Error : [f_RT], [f_LT] must be positive. Please check that.'}
}
else {s <- 'Error : [f_g] must be positive. Please check that.'}
}
else {s <- 'Error : [f_hv] must be positive. Please check that.'}
}
else {s <- 'Error : [f_w] must be positive. Please check that.'}
}
else {s <- 'Error : [N_i] must be positive integer. Please check that.'}
s
}
S_i_si(N_i = 2, f_w = 1.0, f_g = 1.2, f_hv = 1.5)
S_i_si(N_i = 2, f_LH = 1.1, f_w = 1.0, f_g = 1.2, f_hv = 1.5)
S_i_si(N_i = 2, f_LT = 1.1, f_w = 1.0, f_g = 1.2, f_hv = 1.5)
S_i_si(N_i = 2, f_RT = 1.1, f_w = 1.0, f_g = 1.2, f_hv = 1.5)
S_i_si <- function(N_i = NULL, f_LT = NULL, f_RT = NULL, f_w = NULL, f_g = NULL, f_hv = NULL){
if (N_i >= 1){
if (f_w > 0){
if (f_hv > 0){
if (f_g > 0){
if (is.null(f_RT) == TRUE & is.null(f_LT) == TRUE){s <- S_0_si() * N_i * f_w * f_g * f_hv}
else if (is.null(f_LT) == FALSE & f_LT > 0 & is.null(f_RT) == TRUE){s <- S_0_si() * N_i * f_LT * f_w * f_g * f_hv}
else if (is.null(f_RT) == FALSE & f_RT > 0 & is.null(f_LT) == FALSE){s <- S_0_si() * N_i * f_RT * f_w * f_g * f_hv}
else if (is.null(f_LT) == FALSE & is.null(f_RT) == FALSE & f_LT > 0 & f_RT > 0){s <- S_0_si() * N_i * f_LT * f_RT * f_w * f_g * f_hv}
else {s <- 'Error : [f_RT], [f_LT] must be positive. Please check that.'}
}
else {s <- 'Error : [f_g] must be positive. Please check that.'}
}
else {s <- 'Error : [f_hv] must be positive. Please check that.'}
}
else {s <- 'Error : [f_w] must be positive. Please check that.'}
}
else {s <- 'Error : [N_i] must be positive integer. Please check that.'}
s
}
S_i_si(N_i = 2, f_RT = 1.1, f_w = 1.0, f_g = 1.2, f_hv = 1.5)
S_i_si <- function(N_i = NULL, f_LT = 1, f_RT = 1, f_w = NULL, f_g = NULL, f_hv = NULL){
if (N_i >= 1){
if (f_w > 0){
if (f_hv > 0){
if (f_g > 0){
if (f_LT > 0 & f_RT > 0){s <- S_0_si() * N_i * f_w * f_g * f_hv}
else {s <- 'Error : [f_RT], [f_LT] must be positive. Please check that.'}
}
else {s <- 'Error : [f_g] must be positive. Please check that.'}
}
else {s <- 'Error : [f_hv] must be positive. Please check that.'}
}
else {s <- 'Error : [f_w] must be positive. Please check that.'}
}
else {s <- 'Error : [N_i] must be positive integer. Please check that.'}
s
}
S_i_si(N_i = 2, f_RT = 1.1, f_w = 1.0, f_g = 1.2, f_hv = 1.5)
#' Lane width correction factor at signalized intersection.
#'     Effect of reducing saturation traffic flow rate by lane width.
#'     If the lane widths within a lane group are different, the average value of these is used.
#'     It follows <Table 8-15> in KHCM(2013), p.248.
#' @param width Lane width(m/lane).
#' @export f_w_si
#' @seealso \code{\link{S_i_si}}
#' @examples
#' f_w_si(2.89)
#' f_w_si(width = 3.23)
f_w_si <- function(width = NULL){
if (width > 0 & width <= 2.6){f <- 0.88}
else if (width > 2.6 & width <= 2.9){f <- 0.94}
else if (width >= 3.0){f <- 1.00}
else {f <- 'Error : [width] must be positive(m). Please check that.'}
f
}
#' Heavy vehicle correction factor at signalized intersection.
#'     In order to directly use the surveyed traffic volume as the actual traffic volume,
#'     the saturation traffic flow rate is corrected.
#'     The average passenger car conversion factor of 1.8 is used
#'     considering the mixing rate of all heavy vehicles other than passenger cars.
#'     It follows <Formula 8-39> in KHCM(2013), p.249.
#' @param p Mixing ratio of heavy vehicles to actual traffic volume
#' @export f_hv_si Heavy vehicle Factor
#' @examples
#'
f_hv_si <- function(p = NULL){
if (p >= 0 & p <= 1){f <- 1 / (1 + 0.8 * p)}
else {f <- 'Error : [p] must be >= 0 and <= 1. Please check that.'}
f
}
f_hv_si(p = 0.23)
#' @seealso \code{\link{S_i_si}}
#' @details
#'     When measuring the slope of an intersection, the average value of the slopes surveyed near the approach is used.
#'     If the direction of the approach stop line is an upward slope,
#'     the saturation traffic flow rate decreases, and in the case of a downward slope,
#'     it does not change with the flat ground.
#' @export f_g_si
#' @examples
#' f_g_si(gradient = 2.72)
#' f_g_si(3.945)
f_g_si <- function(gradient = NULL){
if (gradient <= 0){f <- 1.00}
else if (gradient > 0 & gradient < 3){f <- 1.00 + ((0.96 - 1.00)/3) * (gradient - 0)}
else if (gradient == 3){f <- 0.96}
else if (gradient > 3 & gradient < 6){f <- 0.96 + ((0.93 - 0.96)/3) * (gradient - 3)}
else if (gradient >= 6 & gradient <= 100){f <- 0.93}
else {f <- 'Error : [gradient] must be positive(%). Please check that.'}
f
}
#' Capacity of Lane Group i at Signalized Intersection
#'
#' Capacity of lane group i at signalized intersection.
#'     It follows <Formula 8-40> in KHCM(2013), p.249.
#' @param S_i Saturated traffic flow rate (vph) for the i lane group. See \code{\link{S_i_si}}
#' @param g_i Effective green time for i lane group (seconds)
#' @param C Signal period(seconds)
#' @export capa_i_si capacity of the i-th lane group
#' @examples
capa_i_si <- function(S_i = NULL, g_i = NULL, C = NULL){
if (S_i >= 0){
if (g_i > 0 & C > 0){c <- S_i * g_i / C}
else {c <- 'Error : [g_i], [C] must be positive(sec). Please check that.'}
}
else {c <- 'Error : [S_i] must be positive(vph). Please check that.'}
c
}
capa_i_si(S_i = 1234, g_i = 80, C = 240)
