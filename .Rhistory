if (g_c_ratio == 0.75){result <- 1}
if (g_c_ratio == 0.70){result <- 2}
if (g_c_ratio == 0.65){result <- 3}
if (g_c_ratio == 0.60){result <- 4}
}
if (vehicle_type == 'heavy_vehicle'){
if (g_c_ratio == 0.80){result <- 1}
if (g_c_ratio == 0.75){result <- 1}
if (g_c_ratio == 0.70){result <- 2}
if (g_c_ratio == 0.65){result <- 2}
if (g_c_ratio == 0.60){result <- 3}
}
}
if (traffic_light_density > 0.3 & traffic_light_density <= 0.5){
if (vehicle_type == 'normal_vehicle'){
if (g_c_ratio == 0.80){result <- 2}
if (g_c_ratio == 0.75){result <- 4}
if (g_c_ratio == 0.70){result <- 5}
if (g_c_ratio == 0.65){result <- 7}
if (g_c_ratio == 0.60){result <- 9}
}
if (vehicle_type == 'heavy_vehicle'){
if (g_c_ratio == 0.80){result <- 2}
if (g_c_ratio == 0.75){result <- 3}
if (g_c_ratio == 0.70){result <- 5}
if (g_c_ratio == 0.65){result <- 6}
if (g_c_ratio == 0.60){result <- 8}
}
}
result
}
}
F_S(V = 499, g_c_ratio = 0.80, traffic_light_density = 0.2, vehicle_type = 'normal_vehicle')
F_S(300, 0.7, 0.4, 'heavy_vehicle')
F_V(V = 1231, vehicle_type = 'normal_vehicle', traffic_light_density = 0.45)
#'
#' It follows <Table 6-7> in KHCM(2013).
#' @param V *Numeric* Traffic Volume(vphpl). This factor is available when traffic volume is under than 500vphpl.
#' @param traffic_light_density *Numeric* Density of traffic lights(ea/km)
#' @param vehicle_type *Categorical* Choose one from : \code{'normal_vehicle'}, \code{'heavy_vehicle'}
#' @keywords speed correction factor traffic light
#' @export F_S Speed Correction Factor from Traffic Light(F_S, kph)
#' @examples
#' F_S(V = 499, g_c_ratio = 0.80, traffic_light_density = 0.2, vehicle_type = 'normal_vehicle')
#' F_S(300, 0.7, 0.4, 'heavy_vehicle')
F_V <- function(V = NULL, vehicle_type = NULL, traffic_light_density = NULL){
if (V >= 500){
if (vehicle_type == 'normal_vehicle'){
if (traffic_light_density >= 0 & traffic_light_density <= 0.1){
if (V == 500){result <- 1}
if (V > 500 & V < 600){result <- 1}
if (V == 600){result <- 1}
if (V > 600 & V < 700){result <- 1}
if (V == 700){result <- 1}
if (V > 700 & V < 800){result <- 1 + (V - 700) * 0.01}
if (V == 800){result <- 2}
if (V > 800 & V < 900){result <- 2}
if (V == 900){result <- 2}
if (V > 900 & V < 1000){result <- 1 + (V - 900) * 0.01}
if (V == 1000){result <- 3}
if (V > 1000 & V < 1100){result <- 1 + (V - 1000) * 0.01}
if (V == 1100){result <- 4}
if (V > 1100 & V < 1200){result <- 4}
if (V == 1200){result <- 4}
if (V > 1200 & V < 1300){result <- 4 + (V - 1200) * 0.02}
if (V == 1300){result <- 6}
if (V > 1300 & V < 1400){result <- 6 + (V - 1300) * 0.02}
if (V == 1400){result <- 8}
if (V > 1400 & V < 1500){result <- 8 + (V - 1400) * 0.01}
if (V == 1500){result <- 9}
if (V > 1500 & V < 1600){result <- 9 + (V - 1500) * 0.03}
if (V == 1600){result <- 12}
if (V > 1600 & V < 1700){result <- 12 + (V - 1600) * 0.04}
if (V == 1700){result <- 16}
if (V > 1700 & V < 1800){result <- 12 + (V - 1600) * 0.04}
if (V == 1800){result <- 20}
}
if (traffic_light_density >= 0.1 & traffic_light_density <= 0.3){
if (V == 500){result <- 1}
if (V > 500 & V < 600){result <- 1}
if (V == 600){result <- 1}
if (V > 600 & V < 700){result <- 1 + (V - 600) * 0.01}
if (V == 700){result <- 2}
if (V > 700 & V < 800){result <- 2}
if (V == 800){result <- 2}
if (V > 800 & V < 900){result <- 2 + (V - 800) * 0.01}
if (V == 900){result <- 3}
if (V > 900 & V < 1000){result <- 3 + (V - 900) * 0.01}
if (V == 1000){result <- 4}
if (V > 1000 & V < 1100){result <- 4 + (V - 1000) * 0.01}
if (V == 1100){result <- 5}
if (V > 1100 & V < 1200){result <- 5 + (V - 1100) * 0.01}
if (V == 1200){result <- 6}
if (V > 1200 & V < 1300){result <- 6 + (V - 1200) * 0.02}
if (V == 1300){result <- 8}
if (V > 1300 & V < 1400){result <- 8 + (V - 1300) * 0.02}
if (V == 1400){result <- 10}
if (V > 1400 & V < 1500){result <- 10 + (V - 1400) * 0.01}
if (V == 1500){result <- 11}
if (V > 1500 & V < 1600){result <- 11 + (V - 1500) * 0.03}
if (V == 1600){result <- 14}
if (V > 1600 & V < 1700){result <- 14 + (V - 1600) * 0.05}
if (V == 1700){result <- 19}
if (V > 1700 & V < 1800){result <- 19 + (V - 1700) * 0.04}
if (V == 1800){result <- 23}
}
if (traffic_light_density >= 0.3 & traffic_light_density <= 0.5){
if (V == 500){result <- 1}
if (V > 500 & V < 600){result <- 1 + (V - 500) * 0.01}
if (V == 600){result <- 2}
if (V > 600 & V < 700){result <- 2 + (V - 600) * 0.01}
if (V == 700){result <- 3}
if (V > 700 & V < 800){result <- 3 + (V - 700) * 0.01}
if (V == 800){result <- 4}
if (V > 800 & V < 900){result <- 4 + (V - 800) * 0.01}
if (V == 900){result <- 5}
if (V > 900 & V < 1000){result <- 5 + (V - 900) * 0.01}
if (V == 1000){result <- 6}
if (V > 1000 & V < 1100){result <- 6 + (V - 1000) * 0.01}
if (V == 1100){result <- 7}
if (V > 1100 & V < 1200){result <- 7 + (V - 1100) * 0.01}
if (V == 1200){result <- 8}
if (V > 1200 & V < 1300){result <- 7 + (V - 1200) * 0.02}
if (V == 1300){result <- 10}
if (V > 1300 & V < 1400){result <- 10 + (V - 1300) * 0.02}
if (V == 1400){result <- 12}
if (V > 1400 & V < 1500){result <- 12 + (V - 1400) * 0.04}
if (V == 1500){result <- 16}
if (V > 1500 & V < 1600){result <- 16 + (V - 1500) * 0.03}
if (V == 1600){result <- 19}
if (V > 1600 & V < 1700){result <- 19 + (V - 1600) * 0.03}
if (V == 1700){result <- 22}
if (V > 1700 & V < 1800){result <- 22 + (V - 1700) * 0.02}
if (V == 1800){result <- 24}
}
}
if (vehicle_type == 'heavy_vehicle'){
if (traffic_light_density >= 0 & traffic_light_density <= 0.1){
if (V == 500){result <- 1}
if (V > 500 & V < 600){result <- 1}
if (V == 600){result <- 1}
if (V > 600 & V < 700){result <- 1 + (V - 600) * 0.01}
if (V == 700){result <- 2}
if (V > 700 & V < 800){result <- 2}
if (V == 800){result <- 2}
if (V > 800 & V < 900){result <- 2}
if (V == 900){result <- 2}
if (V > 900 & V < 1000){result <- 1 + (V - 900) * 0.01}
if (V == 1000){result <- 3}
if (V > 1000 & V < 1100){result <- 3}
if (V == 1100){result <- 3}
if (V > 1100 & V < 1200){result <- 4 + (V - 1100) * 0.01}
if (V == 1200){result <- 4}
if (V > 1200 & V < 1300){result <- 4}
if (V == 1300){result <- 4}
if (V > 1300 & V < 1400){result <- 4 + (V - 1300) * 0.01}
if (V == 1400){result <- 5}
if (V > 1400 & V < 1500){result <- 5 + (V - 1400) * 0.01}
if (V == 1500){result <- 6}
if (V > 1500 & V < 1600){result <- 6 + (V - 1500) * 0.01}
if (V == 1600){result <- 7}
if (V > 1600 & V < 1700){result <- 7 + (V - 1600) * 0.02}
if (V == 1700){result <- 9}
if (V > 1700 & V < 1800){result <- 9 + (V - 1600) * 0.01}
if (V == 1800){result <- 10}
}
if (traffic_light_density >= 0.1 & traffic_light_density <= 0.3){
if (V == 500){result <- 1}
if (V > 500 & V < 600){result <- 1 + (V - 500) * 0.01}
if (V == 600){result <- 2}
if (V > 600 & V < 700){result <- 2}
if (V == 700){result <- 2}
if (V > 700 & V < 800){result <- 2 + (V - 700) * 0.01}
if (V == 800){result <- 3}
if (V > 800 & V < 900){result <- 3}
if (V == 900){result <- 3}
if (V > 900 & V < 1000){result <- 3 + (V - 900) * 0.01}
if (V == 1000){result <- 4}
if (V > 1000 & V < 1100){result <- 4}
if (V == 1100){result <- 4}
if (V > 1100 & V < 1200){result <- 4 + (V - 1100) * 0.01}
if (V == 1200){result <- 5}
if (V > 1200 & V < 1300){result <- 5 + (V - 1200) * 0.01}
if (V == 1300){result <- 6}
if (V > 1300 & V < 1400){result <- 6 + (V - 1300) * 0.01}
if (V == 1400){result <- 7}
if (V > 1400 & V < 1500){result <- 7 + (V - 1400) * 0.01}
if (V == 1500){result <- 8}
if (V > 1500 & V < 1600){result <- 8 + (V - 1500) * 0.01}
if (V == 1600){result <- 9}
if (V > 1600 & V < 1700){result <- 9 + (V - 1600) * 0.03}
if (V == 1700){result <- 12}
if (V > 1700 & V < 1800){result <- 12 + (V - 1700) * 0.03}
if (V == 1800){result <- 15}
}
if (traffic_light_density >= 0.3 & traffic_light_density <= 0.5){
if (V == 500){result <- 3}
if (V > 500 & V < 600){result <- 3 + (V - 500) * 0.01}
if (V == 600){result <- 4}
if (V > 600 & V < 700){result <- 4}
if (V == 700){result <- 4}
if (V > 700 & V < 800){result <- 4 + (V - 700) * 0.01}
if (V == 800){result <- 5}
if (V > 800 & V < 900){result <- 5 + (V - 800) * 0.01}
if (V == 900){result <- 6}
if (V > 900 & V < 1000){result <- 6 + (V - 900) * 0.01}
if (V == 1000){result <- 7}
if (V > 1000 & V < 1100){result <- 7 + (V - 1000) * 0.01}
if (V == 1100){result <- 8}
if (V > 1100 & V < 1200){result <- 8 + (V - 1100) * 0.01}
if (V == 1200){result <- 9}
if (V > 1200 & V < 1300){result <- 9 + (V - 1200) * 0.01}
if (V == 1300){result <- 10}
if (V > 1300 & V < 1400){result <- 10 + (V - 1300) * 0.02}
if (V == 1400){result <- 12}
if (V > 1400 & V < 1500){result <- 12 + (V - 1400) * 0.02}
if (V == 1500){result <- 14}
if (V > 1500 & V < 1600){result <- 14 + (V - 1500) * 0.03}
if (V == 1600){result <- 17}
if (V > 1600 & V < 1700){result <- 17 + (V - 1600) * 0.03}
if (V == 1700){result <- 20}
if (V > 1700 & V < 1800){result <- 20 + (V - 1700) * 0.04}
if (V == 1800){result <- 24}
}
}
result
}
}
F_V(V = 1231, vehicle_type = 'normal_vehicle', traffic_light_density = 0.45)
F_V(999, 'heavy_vehicle', traffic_light_density = 0.3293)
capacity_multilane_road(N = 3, S = 2000, g_c_ratio = 0.8)
#' The Capacity of Multi-lane Road(pcph)
#'
#' This function follows <Formula 6-2>
#' @param N *Numeric* Number of lanes going straight at the intersection.
#' @param S *Numeric* Saturation flow(pcphpl)
#' @param g_c_ratio *Numeric* Average green time ratio
#' @keywords capacity weaving section freeway main line link
#' @export capacity_multilane_road The Capacity of Multi-lane Road(pcph)
#' @examples
capacity_multilane_road <- function(N = NULL, S = NULL, g_c_ratio = NULL){
if (N >= 1 & S > 0 & g_c_ratio > 0){
N * S * g_c_ratio
}
}
capacity_multilane_road(N = 3, S = 2000, g_c_ratio = 0.8)
#'
#' This function follows <Formula 6-2>
#' @param type *Categorical* Type of traffic flow in multi-lane road. Choose one from : \code{'interrupted_flow'}, \code{'uninterrupted_flow'}
#' @param design_speed *Categorical* If \code{type == 'uninterrupted_flow'}, design_speed must be used.
#' @param N *Numeric* Number of lanes going straight at the intersection.
#' @param S *Numeric* Saturation flow(pcphpl)
#' @param g_c_ratio *Numeric* Average green time ratio
#' @keywords capacity weaving section freeway main line link
#' @export capacity_multilane_road The Capacity of Multi-lane Road(pcph)
#' @examples
capacity_multilane_road <- function(type = NULL, N = NULL, S = NULL, g_c_ratio = NULL){
if (N >= 1 & S > 0 & g_c_ratio > 0){
if (type == 'uninterrupted_flow'){
if (design_speed == 100){cap <- 2200}
if (design_speed == 80){cap <- 2000}
}
if (type == 'interrupted_flow'){cap <- N * S * g_c_ratio}
}
cap
}
capacity_multilane_road(N = 3, S = 2000, g_c_ratio = 0.8)
#'
#' This function follows <Formula 6-2>
#' @param type *Categorical* Type of traffic flow in multi-lane road. Choose one from : \code{'interrupted_flow'}, \code{'uninterrupted_flow'}
#' @param design_speed *Categorical* If \code{type == 'uninterrupted_flow'}, design_speed must be used.
#' @param N *Numeric* Number of lanes going straight at the intersection.
#' @param S *Numeric* Saturation flow(pcphpl)
#' @param g_c_ratio *Numeric* Average green time ratio
#' @keywords capacity weaving section freeway main line link
#' @export capacity_multilane_road The Capacity of Multi-lane Road(pcph)
#' @examples
capacity_multilane_road <- function(type = NULL, design_speed = NULL, N = NULL, S = NULL, g_c_ratio = NULL){
if (N >= 1 & S > 0 & g_c_ratio > 0){
if (type == 'uninterrupted_flow'){
if (design_speed == 100){cap <- 2200}
if (design_speed == 80){cap <- 2000}
}
if (type == 'interrupted_flow'){cap <- N * S * g_c_ratio}
}
cap
}
capacity_multilane_road(type = 'uninterrupt_flow', design_speed = 80)
#'
#' This function follows <Formula 6-2>
#' @param type *Categorical* Type of traffic flow in multi-lane road. Choose one from : \code{'interrupted_flow'}, \code{'uninterrupted_flow'}
#' @param design_speed *Categorical* If \code{type == 'uninterrupted_flow'}, design_speed must be used.
#' @param N *Numeric* Number of lanes going straight at the intersection.
#' @param S *Numeric* Saturation flow(pcphpl)
#' @param g_c_ratio *Numeric* Average green time ratio
#' @keywords capacity weaving section freeway main line link
#' @export capacity_multilane_road The Capacity of Multi-lane Road(pcph)
#' @examples
capacity_multilane_road <- function(type = NULL, design_speed = NULL, N = NULL, S = NULL, g_c_ratio = NULL){
if (type == 'uninterrupted_flow'){
if (design_speed == 100){cap <- 2200}
if (design_speed == 80){cap <- 2000}
}
if (type == 'interrupted_flow'){
if (N >= 1 & S > 0 & g_c_ratio >=0 & g_c_ratio < 1){cap <- N * S * g_c_ratio}
}
cap
}
capacity_multilane_road(type = 'uninterrupt_flow', design_speed = 80)
#'
#' This function follows <Formula 6-2>
#' @param type *Categorical* Type of traffic flow in multi-lane road. Choose one from : \code{'interrupted_flow'}, \code{'uninterrupted_flow'}
#' @param design_speed *Categorical* If \code{type == 'uninterrupted_flow'}, design_speed must be used.
#' @param N *Numeric* Number of lanes going straight at the intersection.
#' @param S *Numeric* Saturation flow(pcphpl)
#' @param g_c_ratio *Numeric* Average green time ratio
#' @keywords capacity weaving section freeway main line link
#' @export capacity_multilane_road The Capacity of Multi-lane Road(pcph)
#' @examples
capacity_multilane_road <- function(type = NULL, design_speed = NULL, N = NULL, S = NULL, g_c_ratio = NULL){
if (type == 'uninterrupted_flow'){
if (design_speed == 100){cap <- 2200}
if (design_speed == 80){cap <- 2000}
}
if (type == 'interrupted_flow'){
if (N >= 1 & S > 0 & g_c_ratio >=0 & g_c_ratio < 1){cap <- N * S * g_c_ratio}
}
cap
}
capacity_multilane_road(type = 'uninterrupted_flow', design_speed = 80)
capacity_multilane_road(type = 'interrupted_flow', N = 3, S = 2000, g_c_ratio = 0.2)
#' @param type *Categorical* Type of traffic flow in multi-lane road. Choose one from : \code{'interrupted_flow'}, \code{'uninterrupted_flow'}
#' @param design_speed *Categorical* If \code{type == 'uninterrupted_flow'}, design_speed must be used.
#' @param v_c_ratio *Numeric* V/C ratio. It is neccessary when \code{type = 'uninterrupted_flow'}
#' @param free_speed *Numeric* If \code{type == 'interrupted_flow'}, It means free-speed(kph).
#' @param speed *Numeric* It means speed(kph)
#' @param g_c_ratio *Numeric* Average green time ratio. It is neccessary when \code{type == 'interrupted_flow'}
#' @param service_volume *Numeric* Service Traffic Volume(pcphpl)
#' @keywords LOS Level of Service Density V/C ratio
#' @export LOS_multilane_road Level of Service. \code{A}, \code{B}, \code{C}, \code{D}, \code{E}, \code{F}
#' @examples
LOS_multilane_road <- function(type = NULL, design_speed = NULL, v_c_ratio = NULL, free_speed = NULL, speed = NULL, g_c_ratio = NULL, service_volume = NULL){
if (type == 'uninterrupted_flow'){
if (design_speed == 100){
if (v_c_ratio > 0 & v_c_ratio <= 0.27 & service_volume <= 600 & service_volume >= 0 & speed >= 97){LOS <- 'A'}
if (v_c_ratio > 0.27 & v_c_ratio <= 0.45 & service_volume <= 1000 & service_volume >= 0 & speed >= 95){LOS <- 'B'}
if (v_c_ratio > 0.45 & v_c_ratio <= 0.61 & service_volume <= 1350  & service_volume >= 0 & speed >= 93){LOS <- 'C'}
if (v_c_ratio > 0.61 & v_c_ratio <= 0.80 & service_volume <= 1750 & service_volume >= 0 & speed >= 88){LOS <- 'D'}
if (v_c_ratio > 0.80 & v_c_ratio <= 1.00 & service_volume <= 2200 & service_volume >= 0 & speed >= 77){LOS <- 'E'}
}
if (design_speed == 80){
if (v_c_ratio > 0 & v_c_ratio <= 0.25 & service_volume <= 500 & service_volume >= 0 & speed >= 86){LOS <- 'A'}
if (v_c_ratio > 0.25 & v_c_ratio <= 0.40 & service_volume <= 800 & service_volume >= 0 & speed >= 85){LOS <- 'B'}
if (v_c_ratio > 0.40 & v_c_ratio <= 0.58 & service_volume <= 1150  & service_volume >= 0 & speed >= 84){LOS <- 'C'}
if (v_c_ratio > 0.58 & v_c_ratio <= 0.75 & service_volume <= 1500 & service_volume >= 0 & speed >= 79){LOS <- 'D'}
if (v_c_ratio > 0.75 & v_c_ratio <= 1.00 & service_volume <= 2000 & service_volume >= 0 & speed >= 67){LOS <- 'E'}
}
}
if (type == 'interrupted_flow'){
if (free_speed == 87){
if (g_c_ratio == 0.8){
if (v_c_ratio > 0 & v_c_ratio <= 0.20 & speed >= 86 & service_volume <= 350){LOS <- 'A'}
if (v_c_ratio > 0.20 & v_c_ratio <= 0.45 & speed >= 84 & service_volume <= 800){LOS <- 'B'}
if (v_c_ratio > 0.45 & v_c_ratio <= 0.70 & speed >= 76 & service_volume <= 1250){LOS <- 'C'}
if (v_c_ratio > 0.70 & v_c_ratio <= 0.85 & speed >= 68 & service_volume <= 1500){LOS <- 'D'}
if (v_c_ratio > 0.85 & v_c_ratio <= 1.00 & speed >= 58 & service_volume <= 1750){LOS <- 'E'}
}
if (g_c_ratio == 0.6){
if (v_c_ratio > 0 & v_c_ratio <= 0.20 & speed >= 86 & service_volume <= 250){LOS <- 'A'}
if (v_c_ratio > 0.20 & v_c_ratio <= 0.45 & speed >= 84 & service_volume <= 600){LOS <- 'B'}
if (v_c_ratio > 0.45 & v_c_ratio <= 0.70 & speed >= 76 & service_volume <= 900){LOS <- 'C'}
if (v_c_ratio > 0.70 & v_c_ratio <= 0.85 & speed >= 68 & service_volume <= 1100){LOS <- 'D'}
if (v_c_ratio > 0.85 & v_c_ratio <= 1.00 & speed >= 58 & service_volume <= 1500){LOS <- 'E'}
}
if (g_c_ratio == 0.5){
if (v_c_ratio > 0 & v_c_ratio <= 0.20 & speed >= 86 & service_volume <= 200){LOS <- 'A'}
if (v_c_ratio > 0.20 & v_c_ratio <= 0.45 & speed >= 84 & service_volume <= 500){LOS <- 'B'}
if (v_c_ratio > 0.45 & v_c_ratio <= 0.70 & speed >= 76 & service_volume <= 800){LOS <- 'C'}
if (v_c_ratio > 0.70 & v_c_ratio <= 0.85 & speed >= 68 & service_volume <= 950){LOS <- 'D'}
if (v_c_ratio > 0.85 & v_c_ratio <= 1.00 & speed >= 58 & service_volume <= 1100){LOS <- 'E'}
}
}
if (free_speed == 70){
if (g_c_ratio == 0.8){
if (v_c_ratio > 0 & v_c_ratio <= 0.20 & speed >= 70 & service_volume <= 350){LOS <- 'A'}
if (v_c_ratio > 0.20 & v_c_ratio <= 0.45 & speed >= 68 & service_volume <= 800){LOS <- 'B'}
if (v_c_ratio > 0.45 & v_c_ratio <= 0.70 & speed >= 61 & service_volume <= 1250){LOS <- 'C'}
if (v_c_ratio > 0.70 & v_c_ratio <= 0.85 & speed >= 54 & service_volume <= 1500){LOS <- 'D'}
if (v_c_ratio > 0.85 & v_c_ratio <= 1.00 & speed >= 46 & service_volume <= 1750){LOS <- 'E'}
}
if (g_c_ratio == 0.6){
if (v_c_ratio > 0 & v_c_ratio <= 0.20 & speed >= 70 & service_volume <= 250){LOS <- 'A'}
if (v_c_ratio > 0.20 & v_c_ratio <= 0.45 & speed >= 68 & service_volume <= 600){LOS <- 'B'}
if (v_c_ratio > 0.45 & v_c_ratio <= 0.70 & speed >= 61 & service_volume <= 900){LOS <- 'C'}
if (v_c_ratio > 0.70 & v_c_ratio <= 0.85 & speed >= 54 & service_volume <= 1100){LOS <- 'D'}
if (v_c_ratio > 0.85 & v_c_ratio <= 1.00 & speed >= 46 & service_volume <= 1500){LOS <- 'E'}
}
if (g_c_ratio == 0.5){
if (v_c_ratio > 0 & v_c_ratio <= 0.20 & speed >= 70 & service_volume <= 200){LOS <- 'A'}
if (v_c_ratio > 0.20 & v_c_ratio <= 0.45 & speed >= 68 & service_volume <= 500){LOS <- 'B'}
if (v_c_ratio > 0.45 & v_c_ratio <= 0.70 & speed >= 61 & service_volume <= 800){LOS <- 'C'}
if (v_c_ratio > 0.70 & v_c_ratio <= 0.85 & speed >= 54 & service_volume <= 950){LOS <- 'D'}
if (v_c_ratio > 0.85 & v_c_ratio <= 1.00 & speed >= 46 & service_volume <= 1100){LOS <- 'E'}
}
}
}
LOS
}
LOS_multilane_road(type = 'uninterrupted_flow', design_speed = 100, v_c_ratio = 0.20, service_volume = 500, speed = 100)
LOS_multilane_road(type = 'interrupted_flow', v_c_ratio = '0.74', free_speed = 70, speed = 53, g_c_ratio = 0.5)
LOS_multilane_road(type = 'interrupted_flow', v_c_ratio = '0.74', free_speed = 70, speed = 59, g_c_ratio = 0.5)
LOS_multilane_road(type = 'interrupted_flow', v_c_ratio = '0.74', free_speed = 70, speed = 59, g_c_ratio = 0.5, service_volume = 1000)
LOS_multilane_road(type = 'interrupted_flow', v_c_ratio = '0.74', free_speed = 70, speed = 59, g_c_ratio = 0.5, service_volume = 900)
a = c(30, 20, 10, 10, 10, 10, 10)
a
cumsum(a)
len(a)
length(a)
cumsum(a)[length(a)]
#'
#' This function calculates total delay rate(TDR, %). It follows <Formula 7-1> or <Formula 7-2>
#' @param method *Categorical* Observation method. Choose one from : \code{'actual'}, \code{'theory'}
#' @param travel_time_actual *Numeric* Values of Actual travel time(s). Input data : \code{c(num1, num2, ...)}. It's length must be same as travel_time_desired's.It would be used if \code{method = 'actual'}
#' @param travle_time_desired *Numeric* Values Desired Travel time(s). Input data : \code{c(num1, num2, ...)}. It's length must be same as travel_time_actual's. It would be used if \code{method = 'actual'}
#' @param n *Numeric* Traffic Volume(pc?). It would be used if \code{method = 'actual'}
#' @param V_d *Numeric* Traffic Volume in direction(pc/lane). It would be used if \code{method = 'theory'}
#' @keywords TDR Total Delay Rate
#' @export TDR Total Delay Rate(%)
#' @examples
TDR <- function(method = NULL, travel_time_actual = NULL, travel_time_desired = NULL, n = NULL, V_d = NULL){
if (method == 'actual'){
if (length(travel_time_actual) == length(travel_time_desired) & n > 0){
ts <- 0
for (i in 1:length(travel_time_actual)){
s <-  (travel_time_actual[i] - travel_time_desired[i])/travel_time_actual[i]
ts <- ts + s
}
tdr <- ts * 100 / n
}
}
if (method == 'theory'){
if (V_d > 0 & V_d <= 200){tdr <- 1 - exp(-0.0008*(V_d**0.8650))}
if (V_d > 200 & V_d <= 400){tdr <- 1 - exp(-0.0010*(V_d**0.8397))}
if (V_d > 400 & V_d <= 600){tdr <- 1 - exp(-0.0016*(V_d**0.7934))}
if (V_d > 600 & V_d <= 1000){tdr <- 1 - exp(-0.0020*(V_d**0.7754))}
if (V_d > 1000){tdr <- 1 - exp(-0.0040*(V_d**0.6856))}
}
tdr
}
#' Total Delay Rate(TDR, %)
#'
#' This function calculates total delay rate(TDR, %). It follows <Formula 7-1> or <Formula 7-2>
#' @param method *Categorical* Observation method. Choose one from : \code{'actual'}, \code{'theory'}
#' @param travel_time_actual *Numeric* Values of Actual travel time(s). Input data : \code{c(num1, num2, ...)}. It's length must be same as travel_time_desired's.It would be used if \code{method = 'actual'}
#' @param travle_time_desired *Numeric* Values Desired Travel time(s). Input data : \code{c(num1, num2, ...)}. It's length must be same as travel_time_actual's. It would be used if \code{method = 'actual'}
#' @param V_d *Numeric* Traffic Volume in direction(pc/lane). It would be used if \code{method = 'theory'}
#' @keywords TDR Total Delay Rate
#' @export TDR Total Delay Rate(%)
#' @examples
TDR <- function(method = NULL, travel_time_actual = NULL, travel_time_desired = NULL, V_d = NULL){
if (method == 'actual'){
if (length(travel_time_actual) == length(travel_time_desired)){
ts <- 0
for (i in 1:length(travel_time_actual)){
s <-  (travel_time_actual[i] - travel_time_desired[i])/travel_time_actual[i]
ts <- ts + s
}
tdr <- ts * 100 / length(travel_time_actual)
}
}
if (method == 'theory'){
if (V_d > 0 & V_d <= 200){tdr <- 1 - exp(-0.0008*(V_d**0.8650))}
if (V_d > 200 & V_d <= 400){tdr <- 1 - exp(-0.0010*(V_d**0.8397))}
if (V_d > 400 & V_d <= 600){tdr <- 1 - exp(-0.0016*(V_d**0.7934))}
if (V_d > 600 & V_d <= 1000){tdr <- 1 - exp(-0.0020*(V_d**0.7754))}
if (V_d > 1000){tdr <- 1 - exp(-0.0040*(V_d**0.6856))}
}
tdr
}
TDR(method = 'actual', travel_time_actual = c(10, 20, 10, 14, 12), travel_time_desired = c(8, 15, 8, 7, 6))
TDR(method = 'theory', V_d = 300)
#'
#' This function calculates total delay rate(TDR, %). It follows <Formula 7-1> or <Formula 7-2>
#' @param method *Categorical* Observation method. Choose one from : \code{'actual'}, \code{'theory'}
#' @param travel_time_actual *Numeric* Values of Actual travel time(s). Input data : \code{c(num1, num2, ...)}. It's length must be same as travel_time_desired's.It would be used if \code{method = 'actual'}
#' @param travle_time_desired *Numeric* Values Desired Travel time(s). Input data : \code{c(num1, num2, ...)}. It's length must be same as travel_time_actual's. It would be used if \code{method = 'actual'}
#' @param V_d *Numeric* Traffic Volume in direction(pc/lane). It would be used if \code{method = 'theory'}
#' @keywords TDR Total Delay Rate
#' @export TDR Total Delay Rate(%)
#' @examples
#' TDR(method = 'actual', travel_time_actual = c(10, 20, 10, 14, 12), travel_time_desired = c(8, 15, 8, 7, 6))
TDR <- function(method = NULL, travel_time_actual = NULL, travel_time_desired = NULL, V_d = NULL){
if (method == 'actual'){
if (length(travel_time_actual) == length(travel_time_desired)){
ts <- 0
for (i in 1:length(travel_time_actual)){
s <-  (travel_time_actual[i] - travel_time_desired[i])/travel_time_actual[i]
ts <- ts + s
}
tdr <- ts * 100 / length(travel_time_actual)
}
}
if (method == 'theory'){
if (V_d > 0 & V_d <= 200){tdr <- (1 - exp(-0.0008*(V_d**0.8650))) * 100}
if (V_d > 200 & V_d <= 400){tdr <- (1 - exp(-0.0010*(V_d**0.8397))) * 100}
if (V_d > 400 & V_d <= 600){tdr <- (1 - exp(-0.0016*(V_d**0.7934))) * 100}
if (V_d > 600 & V_d <= 1000){tdr <- (1 - exp(-0.0020*(V_d**0.7754))) * 100}
if (V_d > 1000){tdr <- (1 - exp(-0.0040*(V_d**0.6856))) * 100}
}
tdr
}
TDR(method = 'theory', V_d = 300)
