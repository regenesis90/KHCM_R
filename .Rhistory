else if (v_d == 600){E_T <- 3.3}
else if (v_d > 600 & v_d < 700){E_T <- 3.3 - 0.4 * (v_d - 600) * 0.01}
else if (v_d == 700){E_T <- 2.9}
else if (v_d > 700 & v_d < 800){E_T <- 2.9 - 0.3 * (v_d - 700) * 0.01}
else if (v_d == 800){E_T <- 2.6}
else if (v_d > 800 & v_d < 900){E_T <- 2.6 - 0.4 * (v_d - 800) * 0.01}
else if (v_d == 900){E_T <- 2.2}
else if (v_d > 900 & v_d < 1000){E_T <- 2.2 - 0.3 * (v_d - 900) * 0.01}
else if (v_d >= 1000){E_T <- 1.9}
else {E_T <- 'Error : [v_d] must be positive(vph). Please check that.'}
}
else if (L == 800){
if (v_d > 0 & v_d < 100){E_T <- 5.2 - 0.3 * (v_d - 100) * 0.01}
else if (v_d == 100){E_T <- 5.2}
else if (v_d > 100 & v_d < 200){E_T <- 5.2 - 0.3 * (v_d - 100) * 0.01}
else if (v_d == 200){E_T <- 4.9}
else if (v_d > 200 & v_d < 300){E_T <- 4.9 - 0.4 * (v_d - 200) * 0.01}
else if (v_d == 300){E_T <- 4.5}
else if (v_d > 300 & v_d < 400){E_T <- 4.5 - 0.3 * (v_d - 300) * 0.01}
else if (v_d == 400){E_T <- 4.2}
else if (v_d > 400 & v_d < 500){E_T <- 4.2 - 0.3 * (v_d - 400) * 0.01}
else if (v_d == 500){E_T <- 3.9}
else if (v_d > 500 & v_d < 600){E_T <- 3.9 - 0.4 * (v_d - 500) * 0.01}
else if (v_d == 600){E_T <- 3.5}
else if (v_d > 600 & v_d < 700){E_T <- 3.5 - 0.3 * (v_d - 600) * 0.01}
else if (v_d == 700){E_T <- 3.2}
else if (v_d > 700 & v_d < 800){E_T <- 3.2 - 0.3 * (v_d - 700) * 0.01}
else if (v_d == 800){E_T <- 2.9}
else if (v_d > 800 & v_d < 900){E_T <- 2.9 - 0.4 * (v_d - 800) * 0.01}
else if (v_d == 900){E_T <- 2.5}
else if (v_d > 900 & v_d < 1000){E_T <- 2.5 - 0.3 * (v_d - 900) * 0.01}
else if (v_d >= 1000){E_T <- 2.2}
else {E_T <- 'Error : [v_d] must be positive(vph). Please check that.'}
}
else if (L == 1200){
if (v_d > 0 & v_d < 100){E_T <- 5.5 - 0.4 * (v_d - 100) * 0.01}
else if (v_d == 100){E_T <- 5.5}
else if (v_d > 100 & v_d < 200){E_T <- 5.5 - 0.4 * (v_d - 100) * 0.01}
else if (v_d == 200){E_T <- 5.1}
else if (v_d > 200 & v_d < 300){E_T <- 5.1 - 0.3 * (v_d - 200) * 0.01}
else if (v_d == 300){E_T <- 4.8}
else if (v_d > 300 & v_d < 400){E_T <- 4.8 - 0.3 * (v_d - 300) * 0.01}
else if (v_d == 400){E_T <- 4.5}
else if (v_d > 400 & v_d < 500){E_T <- 4.5 - 0.4 * (v_d - 400) * 0.01}
else if (v_d == 500){E_T <- 4.1}
else if (v_d > 500 & v_d < 600){E_T <- 4.1 - 0.3 * (v_d - 500) * 0.01}
else if (v_d == 600){E_T <- 3.8}
else if (v_d > 600 & v_d < 700){E_T <- 3.8 - 0.3 * (v_d - 600) * 0.01}
else if (v_d == 700){E_T <- 3.5}
else if (v_d > 700 & v_d < 800){E_T <- 3.5 - 0.4 * (v_d - 700) * 0.01}
else if (v_d == 800){E_T <- 3.1}
else if (v_d > 800 & v_d < 900){E_T <- 3.1 - 0.3 * (v_d - 800) * 0.01}
else if (v_d == 900){E_T <- 2.8}
else if (v_d > 900 & v_d < 1000){E_T <- 2.8 - 0.3 * (v_d - 900) * 0.01}
else if (v_d >= 1000){E_T <- 2.5}
else {E_T <- 'Error : [v_d] must be positive(vph). Please check that.'}
}
else if (L == 1600){
if (v_d > 0 & v_d < 100){E_T <- 5.8 - 0.4 * (v_d - 100) * 0.01}
else if (v_d == 100){E_T <- 5.8}
else if (v_d > 100 & v_d < 200){E_T <- 5.8 - 0.4 * (v_d - 100) * 0.01}
else if (v_d == 200){E_T <- 5.4}
else if (v_d > 200 & v_d < 300){E_T <- 5.4 - 0.3 * (v_d - 200) * 0.01}
else if (v_d == 300){E_T <- 5.1}
else if (v_d > 300 & v_d < 400){E_T <- 5.1 - 0.4 * (v_d - 300) * 0.01}
else if (v_d == 400){E_T <- 4.7}
else if (v_d > 400 & v_d < 500){E_T <- 4.7 - 0.3 * (v_d - 400) * 0.01}
else if (v_d == 500){E_T <- 4.4}
else if (v_d > 500 & v_d < 600){E_T <- 4.4 - 0.3 * (v_d - 500) * 0.01}
else if (v_d == 600){E_T <- 4.1}
else if (v_d > 600 & v_d < 700){E_T <- 4.1 - 0.4 * (v_d - 600) * 0.01}
else if (v_d == 700){E_T <- 3.7}
else if (v_d > 700 & v_d < 800){E_T <- 3.7 - 0.3 * (v_d - 700) * 0.01}
else if (v_d == 800){E_T <- 3.4}
else if (v_d > 800 & v_d < 900){E_T <- 3.4 - 0.3 * (v_d - 800) * 0.01}
else if (v_d == 900){E_T <- 3.1}
else if (v_d > 900 & v_d < 1000){E_T <- 3.1 - 0.4 * (v_d - 900) * 0.01}
else if (v_d >= 1000){E_T <- 2.7}
else {E_T <- 'Error : [v_d] must be positive(vph). Please check that.'}
}
else if (L == 2400){
if (v_d > 0 & v_d < 100){E_T <- 6.3 - 0.3 * (v_d - 100) * 0.01}
else if (v_d == 100){E_T <- 6.3}
else if (v_d > 100 & v_d < 200){E_T <- 6.3 - 0.3 * (v_d - 100) * 0.01}
else if (v_d == 200){E_T <- 6.0}
else if (v_d > 200 & v_d < 300){E_T <- 6.0 - 0.4 * (v_d - 200) * 0.01}
else if (v_d == 300){E_T <- 5.6}
else if (v_d > 300 & v_d < 400){E_T <- 5.6 - 0.3 * (v_d - 300) * 0.01}
else if (v_d == 400){E_T <- 5.3}
else if (v_d > 400 & v_d < 500){E_T <- 5.3 - 0.3 * (v_d - 400) * 0.01}
else if (v_d == 500){E_T <- 5.0}
else if (v_d > 500 & v_d < 600){E_T <- 5.0 - 0.4 * (v_d - 500) * 0.01}
else if (v_d == 600){E_T <- 4.6}
else if (v_d > 600 & v_d < 700){E_T <- 4.6 - 0.3 * (v_d - 600) * 0.01}
else if (v_d == 700){E_T <- 4.3}
else if (v_d > 700 & v_d < 800){E_T <- 4.3 - 0.3 * (v_d - 700) * 0.01}
else if (v_d == 800){E_T <- 4.0}
else if (v_d > 800 & v_d < 900){E_T <- 4.0 - 0.4 * (v_d - 800) * 0.01}
else if (v_d == 900){E_T <- 3.6}
else if (v_d > 900 & v_d < 1000){E_T <- 3.6 - 0.3 * (v_d - 900) * 0.01}
else if (v_d >= 1000){E_T <- 3.3}
else {E_T <- 'Error : [v_d] must be positive(vph). Please check that.'}
}
else if (L == 3200){
if (v_d > 0 & v_d < 100){E_T <- 6.9 - 0.4 * (v_d - 100) * 0.01}
else if (v_d == 100){E_T <- 6.9}
else if (v_d > 100 & v_d < 200){E_T <- 6.9 - 0.4 * (v_d - 100) * 0.01}
else if (v_d == 200){E_T <- 6.5}
else if (v_d > 200 & v_d < 300){E_T <- 6.5 - 0.3 * (v_d - 200) * 0.01}
else if (v_d == 300){E_T <- 6.2}
else if (v_d > 300 & v_d < 400){E_T <- 6.2 - 0.3 * (v_d - 300) * 0.01}
else if (v_d == 400){E_T <- 5.9}
else if (v_d > 400 & v_d < 500){E_T <- 5.9 - 0.4 * (v_d - 400) * 0.01}
else if (v_d == 500){E_T <- 5.5}
else if (v_d > 500 & v_d < 600){E_T <- 5.5 - 0.3 * (v_d - 500) * 0.01}
else if (v_d == 600){E_T <- 5.2}
else if (v_d > 600 & v_d < 700){E_T <- 5.2 - 0.3 * (v_d - 600) * 0.01}
else if (v_d == 700){E_T <- 4.9}
else if (v_d > 700 & v_d < 800){E_T <- 4.9 - 0.4 * (v_d - 700) * 0.01}
else if (v_d == 800){E_T <- 4.5}
else if (v_d > 800 & v_d < 900){E_T <- 4.5 - 0.3 * (v_d - 800) * 0.01}
else if (v_d == 900){E_T <- 4.2}
else if (v_d > 900 & v_d < 1000){E_T <- 4.2 - 0.4 * (v_d - 900) * 0.01}
else if (v_d >= 1000){E_T <- 3.8}
else {E_T <- 'Error : [v_d] must be positive(vph). Please check that.'}
}
else if (L == 4800){
if (v_d > 0 & v_d < 100){E_T <- 8.0 - 0.4 * (v_d - 100) * 0.01}
else if (v_d == 100){E_T <- 8.0}
else if (v_d > 100 & v_d < 200){E_T <- 8.0 - 0.4 * (v_d - 100) * 0.01}
else if (v_d == 200){E_T <- 7.6}
else if (v_d > 200 & v_d < 300){E_T <- 7.6 - 0.3 * (v_d - 200) * 0.01}
else if (v_d == 300){E_T <- 7.3}
else if (v_d > 300 & v_d < 400){E_T <- 7.3 - 0.3 * (v_d - 300) * 0.01}
else if (v_d == 400){E_T <- 7.0}
else if (v_d > 400 & v_d < 500){E_T <- 7.0 - 0.4 * (v_d - 400) * 0.01}
else if (v_d == 500){E_T <- 6.6}
else if (v_d > 500 & v_d < 600){E_T <- 6.6 - 0.3 * (v_d - 500) * 0.01}
else if (v_d == 600){E_T <- 6.3}
else if (v_d > 600 & v_d < 700){E_T <- 6.3 - 0.3 * (v_d - 600) * 0.01}
else if (v_d == 700){E_T <- 6.0}
else if (v_d > 700 & v_d < 800){E_T <- 6.0 - 0.4 * (v_d - 700) * 0.01}
else if (v_d == 800){E_T <- 5.6}
else if (v_d > 800 & v_d < 900){E_T <- 5.6 - 0.3 * (v_d - 800) * 0.01}
else if (v_d == 900){E_T <- 5.3}
else if (v_d > 900 & v_d < 1000){E_T <- 5.3 - 0.3 * (v_d - 900) * 0.01}
else if (v_d >= 1000){E_T <- 5.0}
else {E_T <- 'Error : [v_d] must be positive(vph). Please check that.'}
}
else if (L == 6400){
if (v_d > 0 & v_d < 100){E_T <- 9.1 - 0.4 * (v_d - 100) * 0.01}
else if (v_d == 100){E_T <- 9.1}
else if (v_d > 100 & v_d < 200){E_T <- 9.1 - 0.4 * (v_d - 100) * 0.01}
else if (v_d == 200){E_T <- 8.7}
else if (v_d > 200 & v_d < 300){E_T <- 8.7 - 0.3 * (v_d - 200) * 0.01}
else if (v_d == 300){E_T <- 8.4}
else if (v_d > 300 & v_d < 400){E_T <- 8.4 - 0.3 * (v_d - 300) * 0.01}
else if (v_d == 400){E_T <- 8.1}
else if (v_d > 400 & v_d < 500){E_T <- 8.1 - 0.4 * (v_d - 400) * 0.01}
else if (v_d == 500){E_T <- 7.7}
else if (v_d > 500 & v_d < 600){E_T <- 7.7 - 0.3 * (v_d - 500) * 0.01}
else if (v_d == 600){E_T <- 7.4}
else if (v_d > 600 & v_d < 700){E_T <- 7.4 - 0.3 * (v_d - 600) * 0.01}
else if (v_d == 700){E_T <- 7.1}
else if (v_d > 700 & v_d < 800){E_T <- 7.1 - 0.4 * (v_d - 700) * 0.01}
else if (v_d == 800){E_T <- 6.7}
else if (v_d > 800 & v_d < 900){E_T <- 6.7 - 0.3 * (v_d - 800) * 0.01}
else if (v_d == 900){E_T <- 6.4}
else if (v_d > 900 & v_d < 1000){E_T <- 6.4 - 0.3 * (v_d - 900) * 0.01}
else if (v_d >= 1000){E_T <- 6.1}
else {E_T <- 'Error : [v_d] must be positive(vph). Please check that.'}
}
else {E_T <- 'Error : [L] must be one of 400, 800, 1200, 1600, 2400, 3200, 4800, 6400. Please check that.'}
}
else {E_T <- 'Error : [slope] must be one of 0.03, 0.04, 0.05, 0.06, 0.07. Please check that.'}
}
else {E_T <- 'Error : [landform] must be one of [flatland], [hill], [specific_slope]. Please check that.'}
E_T
}
E_T_2lane_Road(landform = 'flatland', v_d = 332)
E_T_2l(landform = 'flatland', v_d = 332)
E_T_2l(landform = 'hill', v_d = 459)
E_T_2l(landform = 'specific_slope', slope = 0.04, L = 1200, v_d = 838)
#' Average control delay per vehicle in 2-lane Road
#'
#' Average control delay per vehicle on a two-lane road (seconds/vehicle).
#'     It follows <Formula 7-8> in KHCM(2013) p.175.
#' @param d_1 Uniform control delay (sec/vehicle)
#' @param d_2 Incremental lag indicative of intentionality and supersaturation. When there is no vehicle remaining at the end of the cycle immediately preceding the analysis period (seconds/vehicle)
#' @param d_3 Additional delay (sec/vehicle) received by vehicles arriving in the analysis period due to the remaining waiting vehicles before the analysis period.
#' @param PF Interlocking correction coefficient by signal interlocking
#' @export d Average control delay per vehicle
#' @examples
d <- function(d_1 = NULL, d_2 = NULL, d_3 = NULL, PF = NULL){
if (d_1 >= 0 & d_2 >= 0 & d_3 >= 0 & PF >= 0){res <- d_1 * PF + d_2 + d_3}
else {res <- 'Error : [d_1], [d_2], [d_3], [PF] must be positive. Please check that.'}
res
}
#' Average control delay per vehicle in 2-lane Road
#'
#' Average control delay per vehicle on a two-lane road (seconds/vehicle).
#'     It follows <Formula 7-8> in KHCM(2013) p.175.
#' @param d_1 Uniform control delay (sec/vehicle)
#' @param d_2 Incremental lag indicative of intentionality and supersaturation. When there is no vehicle remaining at the end of the cycle immediately preceding the analysis period (seconds/vehicle)
#' @param d_3 Additional delay (sec/vehicle) received by vehicles arriving in the analysis period due to the remaining waiting vehicles before the analysis period.
#' @param PF Interlocking correction coefficient by signal interlocking
#' @export d Average control delay per vehicle
#' @examples
d_2l <- function(d_1 = NULL, d_2 = NULL, d_3 = NULL, PF = NULL){
if (d_1 >= 0 & d_2 >= 0 & d_3 >= 0 & PF >= 0){res <- d_1 * PF + d_2 + d_3}
else {res <- 'Error : [d_1], [d_2], [d_3], [PF] must be positive. Please check that.'}
res
}
d_2l(d_1 = 3.29, d_2 = 3.42, d_3 = 1.2, PF = 0.8)
#'  The One Side Lane Width and Lateral Clearance Factor in 2-lane Road
#'
#' This function calculates the one side lane width and lateral clearance factor in 2-lane road(TDR, %) in given conditions.
#'     It follows <Table 7-10> in KHCM(2013), p.181.
#' @param side_clearance The side clearance of lane(m). From the center line of the center line to the pavement edge of the lane. The Average of left side clearance and right lateral clearance.
#' @param lane_width The width of each lane(m). It must be more than 2.75
#' @export f_w_D_2l The One Side Lane Width and Lateral Clearance Factor(f_w_D)
#' @examples
#' f_w_D_2l(side_clearance = 2.3, lane_width = 3.19)
#' f_w_D_2l(2.99, 2.83)
f_w_D_2l <- function(side_clearance = NULL, lane_width = NULL){
if (side_clearance >= 1.5){
if (lane_width >= 3.50){f <- 0}
else if (lane_width >= 3.25 & lane_width < 3.50){f <- 3}
else if (lane_width >= 3.00 & lane_width < 3.25){f <- 6}
else if (lane_width >= 2.75 & lane_width < 3.00){f <- 9}
else {f <- 'Error : [lane_width] must be >= 2.75(m). Please check that.'}
}
else if (side_clearance >= 1.0 & side_clearance < 1.5){
if (lane_width >= 3.50){f <- 3}
else if (lane_width >= 3.25 & lane_width < 3.50){f <- 6}
else if (lane_width >= 3.00 & lane_width < 3.25){f <- 9}
else if (lane_width >= 2.75 & lane_width < 3.00){f <- 12}
else {f <- 'Error : [lane_width] must be >= 2.75(m). Please check that.'}
}
else if (side_clearance >= 0.5 & side_clearance < 1.0){
if (lane_width >= 3.50){f <- 6}
else if (lane_width >= 3.25 & lane_width < 3.50){f <- 9}
else if (lane_width >= 3.00 & lane_width < 3.25){f <- 12}
else if (lane_width >= 2.75 & lane_width < 3.00){f <- 15}
else {f <- 'Error : [lane_width] must be >= 2.75(m). Please check that.'}
}
else {f <- 'Error : [side_clearance] must be >= 0.5(m). Please check that.'}
f
}
f_w_D_2l(side_clearance = 2.8, lane_width = 3.28)
#'     to the speed desired by the driver.
#'     When traffic is low, vehicles are rarely delayed,
#'     and the average head distance is also increased,
#'     which increases the likelihood of overtaking.
#'     Although the total delay rate is low under low traffic conditions,
#'     the chance of overtaking decreases as the vehicle approaches capacity,
#'     so that almost all vehicles form a vehicle group and the total delay rate increases.
#' @seealso \code{\link{TDR_2l}}, \code{\link{TDR_thr_2l}}, \code{\link{TDR_2_i_2l}}, \code{\link{f_np_D_2l}}, \code{\link{f_w_D_2l}}
#' @examples
#' TDR_1_i_2l
TDR_1_i_2l <- function(v_d = NULL, v_o = NULL, P_TO = NULL, side_clearance = NULL, lane_width = NULL){
f_w_D <- f_w_D_2l(side_clearance = side_clearance, lane_width = lane_width)
f_np_D <- f_np_D_2l(v_d = v_d, v_o = v_o, P_TO = P_TO)
if (is.numeric(f_w_D) == TRUE){
if (is.numeric(f_np_D) == TRUE){
f <- TDR_thr_2l(v_d = v_d) + f_np_D + f_w_D
}
else {f <- f_np_D}
}
else {f <- f_w_D}
f
}
#'     This function follows <Formula 7-6> in KHCM(2013), p.174.
#' @param FFS Free speed(kph)
#' @param v_d Traffic volumein the direction of travel(vph)
#' @param v_o Opposite direction traffic volume(vph)
#' @param P_TO Proportion of no overtaking section. Choose one from : \code{0.2}, \code{0.4}, \code{0.6}, \code{0.8}, \code{1.0}
#' @param side_clearance The side clearance of lane(m). From the center line of the center line to the pavement edge of the lane. The Average of left side clearance and right lateral clearance.
#' @param lane_width The width of each lane(m). It must be more than 2.75
#' @keywords Average Travel Speed ATS 2-lane Road
#' @export ATS_1_i_2l Average travel speed in type1 2-lane road, i section(kph)
#' @examples
ATS_1_i_2l <- function(FFS = NULL, v_d = NULL, v_o = NULL, P_TO = NULL, side_clearance = NULL, lane_width = NULL){
f_w_ATS <- f_w_ATS_2l(side_clearance = side_clearance, lane_width = lane_width)
f_np_ATS <- f_np_ATS_2l(v_d = v_d, v_o = v_o, P_TO = P_TO)
if (is.numeric(f_w_ATS) == TRUE){
if (is.numeric(f_np_ATS) == TRUE){
ATS <- FFS - 0.0132 * V_d - 0.0037 * V_o - f_np_ATS - f_w_ATS
}
else {ATS <- f_np_ATS}
}
else {ATS <- f_w_ATS}
ATS
}
ATS_1_i_2l(FFS = 100, v_d = 1000, v_o = 600, P_TO = 0.8, side_clearance = 2.0, lane_width = 3.25)
#' Average travel speed (km/h) in section i of section type 1 on a two-lane road.
#'     This function follows <Formula 7-6> in KHCM(2013), p.174.
#' @param FFS_up Upstream free speed(kph)
#' @param L_2_i Section i length (m) of section type 2 (signal intersection influence zone)
#' @param d Average control delay per vehicle in 2-lane Road(seconds/veh). See \code{\link{d_2l}}
#' @keywords Average Travel Speed ATS 2-lane Road
#' @export ATS_2_i_2l Average travel speed in type1 2-lane road, i section(kph)
#' @seealso \code{\link{ATS_1_i_2l}}, \code{\link{ATS_2l}}, \code{\link{d_2l}}
#' @examples
#' ATS_2_i_2l()
ATS_2_i_2l <- function(FFS_up = NULL, L_2_i = NULL, d = NULL){
if (FFS_up >= 0){
if (L_2_i >= 0){
if (d >= 0){
ats <- 3.6 * L_2_i / ((d + 3.6 * L_2_i)/FFS_up)
}
else {ats <- 'Error : [d] must be positive(seconds/veh). Please check that.'}
}
else {ats <- 'Error : [L_2_i] must be positive(m). Please check that.'}
}
else {ats <- 'Error : [FFS_up] must be positive(kph). Please check that.'}
ats
}
ATS_2_i_2l(FFS_up = 70, L_2_i = 2.4, d = 19.2)
#' Total delay rate (%) in section i of section type 2 of the two-lane road
#'    It follows <Formula 7-10> in KHCM(2013), p.175.
#' @param FFS Free speed(kph)
#' @param L_2_i Section i length (m) of section type 2 (signal intersection influence zone)
#' @param d Average control delay per vehicle in 2-lane Road(seconds/veh). See \code{\link{d_2l}}
#' @keywords TDR Total Delay Rate
#' @export TDR_2_i_2l Total delay rate (%) in section i of section type 2 of the two-lane road
#' @seealso \code{\link{TDR_2l}}, \code{\link{TDR_thr_2l}}, \code{\link{TDR_2_i_2l}}, \code{\link{d_2l}}
#' @examples
#' TDR_2_i_2l
TDR_2_i_2l <- function(FFS = NULL, L_2_i = NULL, d = NULL){
if (FFS >= 0){
if (L_2_i >= 0){
if (d >= 0){
tdr <- d / ((3.6 * L_2_i)/FFS)
}
else {tdr <- 'Error : [d] must be positive(seconds/veh). Please check that.'}
}
else {tdr <- 'Error : [L_2_i] must be positive(m). Please check that.'}
}
else {tdr <- 'Error : [FFS] must be positive(kph). Please check that.'}
tdr
}
TDR_2_i_2l(FFS = 87, L_2_i = 3.2, d = 3.2)
#'     This function follows <Formula 7-11> in KHCM(2013), p.176.
#' @param L Total length(km).
#' @param L_1 Series of ection i length (km) of section type1 2-lane road. See \code{\link{type_2l}}
#' @param L_2 Series of ection i length (km) of section type2 2-lane road. See \code{\link{type_2l}}
#' @param ATS_1 Series of average travel speed (km/h) in section i of section type1 2-lane road. See \code{\link{ATS_1_i_2l}}
#' @param ATS_2 Series of average travel speed (km/h) in section i of section type2 2-lane road. See \code{\link{ATS_2_i_2l}}
#' @keywords Average Travel Speed ATS 2-lane Road
#' @seealso \code{\link{ATS_1_i_2l}}, \code{\link{ATS_2_i_2l}}
#' @export ATS_total_2l Total average travel speed in type1 2-lane road(kph)
#' @examples
ATS_total_2l <- function(L = NULL, L_1 = NULL, L_2 = NULL, ATS_1 = NULL, ATS_2 = NULL){
lats1_sum <- 0
lats2_sum <- 0
if (L > 0){
if (length(L_1) == length(ATS_1)){
if (length(L_2) == length(ATS_2)){
for (i in 1:length(L_1)){
lats1 <- L_1[i]/ATS_1[i]
lats1_sum <- lsts1_sum + lats1
}
for (i in 1:length(L_2)){
lats2 <- L_2[i]/ATS_2[i]
lats2_sum <- lsts2_sum + lats2
}
ats <- L / (lats1_sum + lats2_sum)
}
else {ats <- 'Error : The length of [L_2] series must be same with the length of [ATS_2] series.'}
}
else {ats <- 'Error : The length of [L_1] series must be same with the length of [ATS_1] series.'}
}
else {ats <- 'Error : [L] must be positive(km). Please check that.'}
ats
}
ATS_total_2l <- function(L = 5, L_1 = c(1, 1.1, 0.9), L_2 = c(0.3, 1.7), ATS_1 = c(74, 28.2, 49.4), ATS_2 = c(56.5, 75.2))
#'     This function follows <Formula 7-11> in KHCM(2013), p.176.
#' @param L Total length(km).
#' @param L_1 Series of ection i length (km) of section type1 2-lane road. See \code{\link{type_2l}}
#' @param L_2 Series of ection i length (km) of section type2 2-lane road. See \code{\link{type_2l}}
#' @param ATS_1 Series of average travel speed (km/h) in section i of section type1 2-lane road. See \code{\link{ATS_1_i_2l}}
#' @param ATS_2 Series of average travel speed (km/h) in section i of section type2 2-lane road. See \code{\link{ATS_2_i_2l}}
#' @keywords Average Travel Speed ATS 2-lane Road
#' @seealso \code{\link{ATS_1_i_2l}}, \code{\link{ATS_2_i_2l}}
#' @export ATS_total_2l Total average travel speed in type1 2-lane road(kph)
#' @examples
ATS_total_2l <- function(L = NULL, L_1 = NULL, L_2 = NULL, ATS_1 = NULL, ATS_2 = NULL){
lats1_sum <- 0
lats2_sum <- 0
if (L > 0){
if (length(L_1) == length(ATS_1)){
if (length(L_2) == length(ATS_2)){
for (i in 1:length(L_1)){
lats1 <- L_1[i]/ATS_1[i]
lats1_sum <- lsts1_sum + lats1
}
for (i in 1:length(L_2)){
lats2 <- L_2[i]/ATS_2[i]
lats2_sum <- lsts2_sum + lats2
}
ats <- L / (lats1_sum + lats2_sum)
}
else {ats <- 'Error : The length of [L_2] series must be same with the length of [ATS_2] series.'}
}
else {ats <- 'Error : The length of [L_1] series must be same with the length of [ATS_1] series.'}
}
else {ats <- 'Error : [L] must be positive(km). Please check that.'}
ats
}
ATS_total_2l(L = 5, L_1 = c(1, 1.1, 0.9), L_2 = c(0.3, 1.7), ATS_1 = c(74, 28.2, 49.4), ATS_2 = c(56.5, 75.2))
#'     This function follows <Formula 7-11> in KHCM(2013), p.176.
#' @param L Total length(km).
#' @param L_1 Series of ection i length (km) of section type1 2-lane road. See \code{\link{type_2l}}
#' @param L_2 Series of ection i length (km) of section type2 2-lane road. See \code{\link{type_2l}}
#' @param ATS_1 Series of average travel speed (km/h) in section i of section type1 2-lane road. See \code{\link{ATS_1_i_2l}}
#' @param ATS_2 Series of average travel speed (km/h) in section i of section type2 2-lane road. See \code{\link{ATS_2_i_2l}}
#' @keywords Average Travel Speed ATS 2-lane Road
#' @seealso \code{\link{ATS_1_i_2l}}, \code{\link{ATS_2_i_2l}}
#' @export ATS_total_2l Total average travel speed in type1 2-lane road(kph)
#' @examples
ATS_total_2l <- function(L = NULL, L_1 = NULL, L_2 = NULL, ATS_1 = NULL, ATS_2 = NULL){
lats1_sum <- 0
lats2_sum <- 0
if (L > 0){
if (length(L_1) == length(ATS_1)){
if (length(L_2) == length(ATS_2)){
for (i in 1:length(L_1)){
lats1 <- L_1[i]/ATS_1[i]
lats1_sum <- lsts1_sum + lats1
}
for (i in 1:length(L_2)){
lats2 <- L_2[i]/ATS_2[i]
lats2_sum <- lsts2_sum + lats2
}
ats <- L / (lats1_sum + lats2_sum)
}
else {ats <- 'Error : The length of [L_2] series must be same with the length of [ATS_2] series.'}
}
else {ats <- 'Error : The length of [L_1] series must be same with the length of [ATS_1] series.'}
}
else {ats <- 'Error : [L] must be positive(km). Please check that.'}
ats
}
ATS_total_2l(L = 5, L_1 = c(1, 1.1, 0.9), L_2 = c(0.3, 1.7), ATS_1 = c(74, 28.2, 49.4), ATS_2 = c(56.5, 75.2))
#'     This function follows <Formula 7-11> in KHCM(2013), p.176.
#' @param L Total length(km).
#' @param L_1 Series of ection i length (km) of section type1 2-lane road. See \code{\link{type_2l}}
#' @param L_2 Series of ection i length (km) of section type2 2-lane road. See \code{\link{type_2l}}
#' @param ATS_1 Series of average travel speed (km/h) in section i of section type1 2-lane road. See \code{\link{ATS_1_i_2l}}
#' @param ATS_2 Series of average travel speed (km/h) in section i of section type2 2-lane road. See \code{\link{ATS_2_i_2l}}
#' @keywords Average Travel Speed ATS 2-lane Road
#' @seealso \code{\link{ATS_1_i_2l}}, \code{\link{ATS_2_i_2l}}
#' @export ATS_total_2l Total average travel speed in type1 2-lane road(kph)
#' @examples
ATS_total_2l <- function(L = NULL, L_1 = NULL, L_2 = NULL, ATS_1 = NULL, ATS_2 = NULL){
lats1_sum <- 0
lats2_sum <- 0
if (L > 0){
if (length(L_1) == length(ATS_1)){
if (length(L_2) == length(ATS_2)){
for (i in 1:length(L_1)){
lats1 <- L_1[i]/ATS_1[i]
lats1_sum <- lats1_sum + lats1
}
for (i in 1:length(L_2)){
lats2 <- L_2[i]/ATS_2[i]
lats2_sum <- lats2_sum + lats2
}
ats <- L / (lats1_sum + lats2_sum)
}
else {ats <- 'Error : The length of [L_2] series must be same with the length of [ATS_2] series.'}
}
else {ats <- 'Error : The length of [L_1] series must be same with the length of [ATS_1] series.'}
}
else {ats <- 'Error : [L] must be positive(km). Please check that.'}
ats
}
ATS_total_2l(L = 5, L_1 = c(1, 1.1, 0.9), L_2 = c(0.3, 1.7), ATS_1 = c(74, 28.2, 49.4), ATS_2 = c(56.5, 75.2))
#'     This function follows <Formula 7-12> in KHCM(2013), p.176.
#' @param L Total length(km).
#' @param L_1 Series of ection i length (km) of section type1 2-lane road. See \code{\link{type_2l}}
#' @param L_2 Series of ection i length (km) of section type2 2-lane road. See \code{\link{type_2l}}
#' @param TDR_1 Series of TDR(%) in section i of section type1 2-lane road. See \code{\link{TDR_1_i_2l}}
#' @param TDR_2 Series of TDR(%) in section i of section type2 2-lane road. See \code{\link{TDR_2_i_2l}}
#' @keywords Average Travel Speed ATS 2-lane Road
#' @seealso \code{\link{TDR_1_i_2l}}, \code{\link{TDR_2_i_2l}}
#' @export TDR_total_2l TDR in type1 2-lane road(kph)
#' @examples
TDR_total_2l <- function(L = NULL, L_1 = NULL, L_2 = NULL, TDR_1 = NULL, TDR_2 = NULL){
tdr1_sum <- 0
tdr2_sum <- 0
if (L > 0){
if (length(L_1) == length(TDR_1)){
if (length(L_2) == length(TDR_2)){
for (i in 1:length(L_1)){
tdr1 <- TDR_1[i] * L_1[i] / L
tdr1_sum <- tdr1_sum + tdr1
}
for (i in 1:length(L_2)){
tdr2 <- TDR_2[i] * L_2[i] / L
tdr2_sum <- tdr2_sum + tdr2
}
tdr <- tdr1_sum + tdr2_sum
}
else {tdr <- 'Error : The length of [L_2] series must be same with the length of [TDR_2] series.'}
}
else {tdr <- 'Error : The length of [L_1] series must be same with the length of [TDR_1] series.'}
}
else {tdr <- 'Error : [L] must be positive(km). Please check that.'}
tdr
}
