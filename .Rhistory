if (V_d == 900){E_T <- 6.4}
if (V_d > 900 & V_d < 1000){E_T <- 6.4 - 0.3 * (V_d - 900) * 0.01}
if (V_d >= 1000){E_T <- 6.1}
}
}
}
}
E_T
}
E_T_2lane_Road(topography = 'specific_slope', gradient = 0.04, L = 1200, V_d = 838, output = 'travel_speed')
# man 폴더에 document 일괄생성
document()
# 작업 디렉토리 변경: 프로젝트
setwd('D:/projects/KHCMinR')
# man 폴더에 document 일괄생성
document()
#load
devtools::load_all()
# 패키지 설치 : setwd()로 작업디렉토리 변경 후
setwd("..")
install('KHCMinR') #install.packages()가 아닙니다!
# 패키지 설치 : setwd()로 작업디렉토리 변경 후
setwd("..")
install('KHCMinR') #install.packages()가 아닙니다!
# 패키지 설치 : setwd()로 작업디렉토리 변경 후
setwd("..")
install('KHCMinR') #install.packages()가 아닙니다!
# 작업 디렉토리 변경: 프로젝트
setwd('D:/projects/KHCMinR')
# man 폴더에 document 일괄생성
document()
# 패키지 설치 : setwd()로 작업디렉토리 변경 후
setwd("..")
install('KHCMinR') #install.packages()가 아닙니다!
#' Pedestrian traffic flow rate (person/min/m)
#'
#' It follows <Formula 14-1> in KHCM(2013), p.613
#' @param S Walking speed (m/min)
#' @param D Walking density (person/㎡)
#' @param M Pedestrian occupied space (㎡/person)
#' @export V_passenger
#' @examples
V_passenger <- function(S = NULL, D = NULL, M = NULL){
if (is.null(D) == FALSE){
v <- S * D
}
else{
v <- S / M
}
v
}
V_passenger(S = 50, D = 3)
V_passenger(S = 32.3, M = 12)
#' Level of Service(LOS) for Pedestrian
#'
#' It follows <Table 14-1> in KHCM(2013), p.616
#' @param V Pedestrian traffic flow rate (person/min/m). See V_pedestrian()
#' @param S Walking speed (m/min)
#' @param D Walking density (person/㎡)
#' @param M Pedestrian occupied space (㎡/person)
#' @export LOS_pedestrian
#' @examples
LOS_pedestrian <- function(V = NULL, S = NULL, D = NULL, M = NULL){
if (is.null(V) == FALSE){
if (V >= 0 & V <= 20){los <- 'A'}
if (V > 20 & V <= 32){los <- 'B'}
if (V > 32 & V <= 46){los <- 'C'}
if (V > 46 & V <= 70){los <- 'D'}
if (V > 70 & V <= 106){los <- 'E'}
if (V > 106){los <- 'F'}
}
else{
if (is.null(D) == FALSE){
V <- V_pedestrian(S = S, D = D)
if (V >= 0 & V <= 20){los <- 'A'}
if (V > 20 & V <= 32){los <- 'B'}
if (V > 32 & V <= 46){los <- 'C'}
if (V > 46 & V <= 70){los <- 'D'}
if (V > 70 & V <= 106){los <- 'E'}
if (V > 106){los <- 'F'}
}
else{
if (is.null(M) == FALSE){
V <- V_pedestrian(S = S, M = M)
if (V >= 0 & V <= 20){los <- 'A'}
if (V > 20 & V <= 32){los <- 'B'}
if (V > 32 & V <= 46){los <- 'C'}
if (V > 46 & V <= 70){los <- 'D'}
if (V > 70 & V <= 106){los <- 'E'}
if (V > 106){los <- 'F'}
}
else{'At least one of D or M is needed.'}
}
}
los
}
LOS_pedestrian(V = 32.1)
LOS_pedestrian(S = 15.32, D = 2.3)
#' Pedestrian traffic flow rate (person/min/m)
#'
#' It follows <Formula 14-1>, <Formula 14-2> in KHCM(2013), p.613
#' @param S Walking speed (m/min)
#' @param D Walking density (person/㎡)
#' @param M Pedestrian occupied space (㎡/person)
#' @export V_pedestrian
#' @examples
#' V_pedestrian(S = 50, D = 3)
#' V_pedestrian(S = 32.3, M = 12)
V_pedestrian <- function(S = NULL, D = NULL, M = NULL){
if (is.null(D) == FALSE){
v <- S * D
}
else{
v <- S / M
}
v
}
LOS_pedestrian(S = 15.32, D = 2.3)
LOS_pedestrian(S = 43.21, M = 19.22)
#' Level of Service(LOS) for Pedestrian in Stairs
#'
#' It follows <Table 14-1> in KHCM(2013), p.616
#' @param group Choose one from: \code{'yes'}, \code{'no'}
#' @param V Pedestrian traffic flow rate (person/min/m). See V_pedestrian()
#' @param S Walking speed (m/min)
#' @param D Walking density (person/㎡)
#' @param M Pedestrian occupied space (㎡/person)
#' @export LOS_pedestrian_stair
#' @examples
LOS_pedestrian_stair <- function(V = NULL, S = NULL, D = NULL, M = NULL){
if (is.null(V) == FALSE){v <- V}
else{
if (is.null(D) == FALSE){v <- V_pedestrian(S = S, D = D)}
else{
if (is.null(M) == FALSE){v <- V_pedestrian(S = S, M = M)}
else{'At least one of D or M is needed.'}
}
}
if (group == 'no'){
if (v >= 0 & v <= 18){los <- 'A'}
if (v > 18 & v <= 20){los <- 'B'}
if (v > 20 & v <= 25){los <- 'C'}
if (v > 25 & v <= 32){los <- 'D'}
if (v > 32 & v <= 52){los <- 'E'}
if (v > 52){los <- 'F'}
}
if (group == 'yes'){
if (v >= 0 & v <= 43){los <- 'A'}
if (v > 43 & v <= 50){los <- 'B'}
if (v > 50 & v <= 65){los <- 'C'}
if (v > 95 & v <= 69){los <- 'D'}
if (v > 69 & v <= 74){los <- 'E'}
if (v > 74){los <- 'F'}
}
los
}
#' Level of Service(LOS) for Pedestrian in Stairs
#'
#' It follows <Table 14-1> in KHCM(2013), p.616
#' @param group Choose one from: \code{'yes'}, \code{'no'}
#' @param V Pedestrian traffic flow rate (person/min/m). See V_pedestrian()
#' @param S Walking speed (m/min)
#' @param D Walking density (person/㎡)
#' @param M Pedestrian occupied space (㎡/person)
#' @export LOS_pedestrian_stair
#' @examples
LOS_pedestrian_stair <- function(group = NULL, V = NULL, S = NULL, D = NULL, M = NULL){
if (is.null(V) == FALSE){v <- V}
else{
if (is.null(D) == FALSE){v <- V_pedestrian(S = S, D = D)}
else{
if (is.null(M) == FALSE){v <- V_pedestrian(S = S, M = M)}
else{'At least one of D or M is needed.'}
}
}
if (group == 'no'){
if (v >= 0 & v <= 18){los <- 'A'}
if (v > 18 & v <= 20){los <- 'B'}
if (v > 20 & v <= 25){los <- 'C'}
if (v > 25 & v <= 32){los <- 'D'}
if (v > 32 & v <= 52){los <- 'E'}
if (v > 52){los <- 'F'}
}
if (group == 'yes'){
if (v >= 0 & v <= 43){los <- 'A'}
if (v > 43 & v <= 50){los <- 'B'}
if (v > 50 & v <= 65){los <- 'C'}
if (v > 95 & v <= 69){los <- 'D'}
if (v > 69 & v <= 74){los <- 'E'}
if (v > 74){los <- 'F'}
}
los
}
LOS_pedestrian_stair(group = 'yes', V = 31)
LOS_pedestrian_stair(group = 'no', S = 13.2, D = 33.92)
LOS_pedestrian_stair(group = 'yes', S = 75.233, M = 21.74)
#' Level of Service(LOS) for Pedestrian in Waiting Space
#'
#' It follows <Table 14-5> in KHCM(2013), p.618
#' @param D Walking density (person/㎡)
#' @param M Pedestrian occupied space (㎡/person)
#' @export LOS_pedestrian_waiting_space
#' @examples
LOS_pedestrian_waiting_space <- function(D = NULL, M = NULL){
if (is.null(D) == FALSE){
if (D >= 1.0){los <- 'A'}
if (D >= 0.8 & D < 1.0){los <- 'B'}
if (D >= 0.6 & D < 0.8){los <- 'C'}
if (D >= 0.4 & D < 0.6){los <- 'D'}
if (D >= 0.2 & D < 0.4){los <- 'E'}
if (D < 0.2){los <- 'F'}
}
else{
if (is.null(M) == FALSE){
if (M <= 1.1){los <- 'A'}
if (M <= 1.6 & M > 1.1){los <- 'B'}
if (M <= 2.0 & M > 1.6){los <- 'C'}
if (M <= 2.5 & M > 2.0){los <- 'D'}
if (M <= 5.0 & M > 2.5){los <- 'E'}
if (M > 5.0){los <- 'F'}
}
}
los
}
LOS_pedestrian_waiting_space(D = 0.45)
LOS_pedestrian_waiting_space(M = 1.44456)
#' Level of Service(LOS) for Pedestrian in Signal Crosswalk
#'
#' It follows <Table 14-6> in KHCM(2013), p.619
#' @param d Average Pedestrian Delay (sec/person)
#' @export LOS_pedestrian_signal_crosswalk
#' @examples
#'
LOS_pedestrian_signal_crosswalk <- function(d = NULL){
if (d >= 0 & d <= 15){los <- 'A'}
if (d > 15 & d <= 30){los <- 'B'}
if (d > 30 & d <= 45){los <- 'C'}
if (d > 45 & d <= 60){los <- 'D'}
if (d > 60 & d <= 90){los <- 'E'}
if (d > 90){los <- 'F'}
los
}
LOS_pedestrian_signal_crosswalk(d = 34.2)
#' The width of the sidewalk obstructed by the facility
#'
#' It follows <Table 14-7> in KHCM(2013), p.621
#' @param f *Categorical* factors that impede walking
#' @param valtype *Categorical* Choose maximum, minimum, mean value
#' @export W_o
#' @examples
W_o <- function(f = NULL, valtype = NULL){
if (f == 'lamppost'){
if (valtype == 'min'){w <- 0.8}
if (valtype == 'max'){w <- 1.1}
if (valtype == 'mean'){w <- 0.95}
}
if (f == 'signal_controller_and_pillar'){
if (valtype == 'min'){w <- 0.9}
if (valtype == 'max'){w <- 1.2}
if (valtype == 'mean'){w <- 1.05}
}
if (f == 'fireplug'){
if (valtype == 'min'){w <- 0.8}
if (valtype == 'max'){w <- 0.9}
if (valtype == 'mean'){w <- 0.85}
}
if (f == 'road_sign'){w <- 0.6}
if (f == 'mailbox'){
if (valtype == 'min'){w <- 1.0}
if (valtype == 'max'){w <- 1.1}
if (valtype == 'mean'){w <- 1.05}
}
if (f == 'telephone_booth'){w <- 1.2}
if (f == 'trash_can'){w <- 0.9}
if (f == 'curb'){w <- 0.5}
if (f == 'subway_stairs'){
if (valtype == 'min'){w <- 1.7}
if (valtype == 'max'){w <- 2.1}
if (valtype == 'mean'){w <- 1.9}
}
if (f == 'street_tree'){
if (valtype == 'min'){w <- 0.6}
if (valtype == 'max'){w <- 1.2}
if (valtype == 'mean'){w <- 0.9}
}
if (f == 'street_tree_guard'){w <- 1.5}
if (f == 'pillar'){
if (valtype == 'min'){w <- 0.8}
if (valtype == 'max'){w <- 0.9}
if (valtype == 'mean'){w <- 0.85}
}
if (f == 'revolving_door'){
if (valtype == 'min'){w <- 1.5}
if (valtype == 'max'){w <- 2.1}
if (valtype == 'mean'){w <- 1.8}
}
if (f == 'pipe_connection'){w <- 0.3}
if (f == 'awning_pillar'){w <- 0.8}
w
}
W_o(f = 'street_tree', valtype = 'mean')
w_o('subway_stairs', 'max')
W_o('subway_stairs', 'max')
#' Effective sidewalk width
#'
#' It follows <Formula 14-3> in KHCM(2013), p.620
#' @param W_T Actual Sidewalk Width(m)
#' @param W_O The width of the sidewalk obstructed by the facility(m)
#' @keywords
#' @export W_E
#' @examples
W_E <- function(W_T = NULL, W_O = NULL){
W_T - W_O
}
#' Pedestrian traffic flow rate (person/min/m)
#'
#' It follows <Formula 14-4> in KHCM(2013), p.620
#'     Convert the peak 15-minute pedestrian traffic surveyed to the pedestrian traffic flow rate
#' @param V_15
#' @param W_E
#' @keywords
#' @export V_pedestrian pedestrian traffic flow rate (person/min/m)
#' @examples
V_pedestrian <- function(V_15 = NULL, W_E = NULL){
V_15 / (15 * W_E)
}
#' Pedestrian traffic flow rate (person/min/m)
#'
#' It follows <Formula 14-4> in KHCM(2013), p.620
#'     Convert the peak 15-minute pedestrian traffic surveyed to the pedestrian traffic flow rate
#' @param V_15
#' @param W_E
#' @keywords
#' @export V_pedestrian_traffic_flow pedestrian traffic flow rate (person/min/m)
#' @examples
V_pedestrian_traffic_flow <- function(V_15 = NULL, W_E = NULL){
V_15 / (15 * W_E)
}
#' Average Pedestrian Delay (seconds)
#'
#' It follows <Formula 14-5> in KHCM(2013), p.623
#' @param C Signal period(seconds)
#' @param g Effective green time for pedestrians (seconds)
#' @keywords
#' @export d_P
#' @examples
d_P <- function(C = NULL, g = NULL){
(C - g)**2 / (2 * C)
}
#' Space-time area (m^2/person) at a crosswalk at a traffic light intersection
#'
#' It follows <Formula 14-7> in KHCM(2013), p.624
#' @param L Crosswalk length (m)
#' @param S_p Average speed of pedestrians (m/s)
#' @param WALK_FDW Effective pedestrian green time at crosswalks (seconds)
#' @param W_E Effective crosswalk width(m). See W_E()
#' @keywords
#' @export TS
#' @examples
TS <- function(L = NULL, W_E = NULL, S_p = NULL, WALK_FDW = NULL){
L * W_E * (WALK_FDW - (L / (2 * S_p)))
}
#' Total crosswalk occupancy time (in-sec)
#'
#' It follows <Formula 14-7> in KHCM(2013), p.624
#' @param V_i Number of pedestrians crossing each direction (persons)
#' @param V_o Number of pedestrians crossing each direction (persons)
#' @param t Total traversing time (seconds)
#' @keywords
#' @export T_pedestrian_occupancy
#' @examples
T_pedestrian_occupancy <- function(V_i = NULL, V_o = NULL, t = NULL){
(V_i + V_o) / t
}
#' Effective sidewalk width
#'
#' It follows <Formula 14-3>, <Formula 14-10> in KHCM(2013), p.620, p.625
#' @param W_T Actual Sidewalk Width(m)
#' @param W_O The width of the sidewalk obstructed by the facility(m)
#' @param V Future Demand Pedestrian Traffic Volume (person/min)
#' @param SV_i Service pedestrian traffic flow rate at service level i (person/min/m)
#' @keywords
#' @export W_E
#' @examples
W_E <- function(W_T = NULL, W_O = NULL, V = NULL, SV_i = NULL){
if (is.null(W_T) == FALSE & is.null(W_O) == FALSE){w <- W_T - W_O}
else{
if (is.null(V) == FALSE & is.null(SV_i) == FALSE){w <- V / SV_i}
}
w
}
pi
#' Number of overtaking on one-way bicycle lanes (times/h)
#'
#' It follows <Formula 14-7> in KHCM(2013), p.624
#' @param Q_bike Bicycle traffic flow rate (vph)
#' @param U_bike Average bike speed (kph)
#' @param sd Standard deviation of bicycle speed
#' @keywords
#' @export F_pass Overtake count (times/h)
#' @examples
F_pass <- function(Q_bike = NULL, U_bike = NULL, sd = NULL){
2 * Q_bike * sd / (U_bike * (pi)**(1/2))
}
# Import Packages
library(tidyverse)
# Load Dataset ----
input_file <- 'D:/projects/Yonsei_TELab/210517-_road_conflict/210607-_대상지점선정자료/01_오르막차로/기하구조_경사도/210611_uphill_accident_location.csv'
f <- read_csv(input_file)
# Data Preprocessing ----
uphill_accident <-
f %>% group_by(target, year) %>% summarise(n = n())
void_data <-
data.frame(target = c(1, 1, 2, 4, 5, 6, 7, 8, 9, 10),
year = c(2019, 2019, 2021, 2021, 2021, 2021, 2021, 2017, 2021, 2021),
n = c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0))
View(f)
View(uphill_accident)
# Load Dataset ----
input_file <- 'D:/projects/Yonsei_TELab/210517-_road_conflict/210607-_대상지점선정자료/01_오르막차로/기하구조_경사도/210611_uphill_accident_location.csv'
f <- read_csv(input_file)
# Data Preprocessing ----
uphill_accident <-
f %>% group_by(target, year) %>% summarise(n = n())
View(uphill_accident)
void_data <-
data.frame(target = c(1, 1, 1, 2, 2, 3, 3, 4, 4, 4, 5, 6, 6, 6, 7, 8, 8, 8, 8, 9, 9, 10, 10),
year = c(2018, 2019, 2021, 2019, 2021, 2017, 2019, 2016, 2019, 2021, 2021, 2016, 2017, 2021, 2021, 2016, 2017, 2020, 2021, 2019, 2021, 2020, 2021),
n = c(0) * 23)
uphill_accident <-
rbind(uphill_accident, void_data)
uphill_accident <-
order_by(target, year)
uphill_accident <-
uphill_accident %>% order_by(target, year)
uphill_accident <-
uphill_accident %>% order_by(c(target, year))
#' Number of bicycles in the opposite direction (times/h)
#'
#' It follows <Formula 15-3> in KHCM(2013), p.644
#'     The number of face-to-face encounters is proportional to the amount of bicycle traffic running in the opposite direction to the driving direction.
#'     If the two-way bicycle traffic flow has the same speed distribution, the number of encounters per unit time is double the bicycle traffic flow rate in the opposite direction.
#' @param Q_bike_op Bicycle traffic flow rate in opposite direction (vph)
#' @keywords
#' @export F_meet Number of bicycles in the opposite direction (times/h)
#' @examples
F_meet <- function(Q_bike_op = NULL){
2 * Q_bike_op
}
#' Total number of conflicts in bicycle traffic (times/h)
#'
#' It follows <Formula 15-4> in KHCM(2013), p.644
#' @param F_pass Number of overtaking bicycles in the direction of travel (times/h)
#' @param F_meet Number of bicycles in the opposite direction (times/h)
#' @keywords
#' @export F_total Total number of conflicts in bicycle traffic (times/h)
#' @examples
F_total <- function(F_pass = NULL, F_meet = NULL){
0.5 * F_meet + F_pass
}
#' Number of times a bicycle overtakes a pedestrian walking in the same direction (times/h)
#'
#' It follows <Formula 15-6> in KHCM(2013), p.645
#' @param Q_ped_sm Pedestrian traffic flow rate in the same direction
#' @param U_bike Average bike speed (kph)
#' @param U_ped Average walking speed (kph)
#' @keywords
#' @export F_pass_b_p Number of times a bicycle overtakes a pedestrian walking in the same direction (times/h)
#' @examples
F_pass_b_p <- function(Q_ped_sm = NULL, U_bike = NULL, U_ped = NULL){
Q_ped_sm * (U_bike / U_ped - 1)
}
#' Number of encounters with pedestrians running in the opposite direction to the direction of bicycle travel (times/h)
#'
#' It follows <Formula 15-9> in KHCM(2013), p.646
#' @param Q_ped_op Pedestrian traffic flow rate (person/h) walking in the opposite direction to the bicycle
#' @param U_bike Average bike speed (kph)
#' @param U_ped Average walking speed (kph)
#' @keywords
#' @export F_meet_b_p Number of encounters with pedestrians running in the opposite direction to the direction of bicycle travel (times/h)
#' @examples
F_meet_b_p <- function(Q_ped_op = NULL, U_bike = NULL, U_ped = NULL){
Q_ped_op * (U_bike / U_ped + 1)
}
#' Total number of collisions of pedestrians on two-way bicycle lanes (times/h)
#'
#' It follows <Formula 15-12> in KHCM(2013), p.646
#' @param Q_bike_sm Same direction Bicycle traffic flow rate (vph)
#' @param Q_bike_op Bicycle traffic flow rate in opposite direction (vph)
#' @param U_bike Average bike speed (kph)
#' @param U_ped Average walking speed (kph)
#' @keywords
#' @export F_total_p
#' @examples
F_total_p <- function(Q_bike_sm = NULL, Q_bike_op = NULL, U_bike = NULL, U_ped = NULL){
Q_bike_sm * (1 - (U_ped / U_bike)) + 0.5 * (Q_bike_op * (1 + U_ped / U_bike))
}
#' Control Delay of bicycle traffic at signal intersections(sec/veh)
#'
#' It follows <Formula 15-15> in KHCM(2013), p.646
#' @param g Valid green time (sec)
#' @param C Signal period(sec)
#' @param V_bike Bicycle traffic flow rate (vph)
#' @param c_bike Bicycle road capacity (vph)
#' @keywords
#' @export d_bike
#' @examples
d_bike <- function(g = NULL, C = NULL, V_bike = NULL, c_bike = NULL){
if (V_bike/c_bike >= 1){d <- (0.5 * C * (1 - g/C)**2) / (1 - (g/C * V_bike/c_bike))}
else{d <- (0.5 * C * (1 - g/C)**2) / (1 - (g/C))}
d
}
