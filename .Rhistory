else if (v_d == 400){E_T <- 7.2}
else if (v_d > 400 & v_d < 500){E_T <- 7.2 - 0.4 * (v_d - 400) * 0.01}
else if (v_d == 500){E_T <- 6.8}
else if (v_d > 500 & v_d < 600){E_T <- 6.8 - 0.3 * (v_d - 500) * 0.01}
else if (v_d == 600){E_T <- 6.5}
else if (v_d > 600 & v_d < 700){E_T <- 6.5 - 0.3 * (v_d - 600) * 0.01}
else if (v_d == 700){E_T <- 6.2}
else if (v_d > 700 & v_d < 800){E_T <- 6.2 - 0.4 * (v_d - 700) * 0.01}
else if (v_d == 800){E_T <- 5.8}
else if (v_d > 800 & v_d < 900){E_T <- 5.8 - 0.3 * (v_d - 800) * 0.01}
else if (v_d == 900){E_T <- 5.5}
else if (v_d > 900 & v_d < 1000){E_T <- 5.5 - 0.3 * (v_d - 900) * 0.01}
else if (v_d >= 1000){E_T <- 5.2}
else {E_T <- 'Error : [v_d] must be positive(vph). Please check that.'}
}
else {E_T <- 'Error : [L] must be one of 400, 800, 1200, 1600, 2400, 3200, 4800, 6400. Please check that.'}
}
else if (slope == 0.07){
if (L == 400){
if (v_d > 0 & v_d < 100){E_T <- 4.9 - 0.3 * (v_d - 100) * 0.01}
else if (v_d == 100){E_T <- 4.9}
else if (v_d > 100 & v_d < 200){E_T <- 4.9 - 0.3 * (v_d - 100) * 0.01}
else if (v_d == 200){E_T <- 4.6}
else if (v_d > 200 & v_d < 300){E_T <- 4.6 - 0.3 * (v_d - 200) * 0.01}
else if (v_d == 300){E_T <- 4.3}
else if (v_d > 300 & v_d < 400){E_T <- 4.3 - 0.4 * (v_d - 300) * 0.01}
else if (v_d == 400){E_T <- 3.9}
else if (v_d > 400 & v_d < 500){E_T <- 3.9 - 0.3 * (v_d - 400) * 0.01}
else if (v_d == 500){E_T <- 3.6}
else if (v_d > 500 & v_d < 600){E_T <- 3.6 - 0.3 * (v_d - 500) * 0.01}
else if (v_d == 600){E_T <- 3.3}
else if (v_d > 600 & v_d < 700){E_T <- 3.3 - 0.4 * (v_d - 600) * 0.01}
else if (v_d == 700){E_T <- 2.9}
else if (v_d > 700 & v_d < 800){E_T <- 2.9 - 0.3 * (v_d - 700) * 0.01}
else if (v_d == 800){E_T <- 2.6}
else if (v_d > 800 & v_d < 900){E_T <- 2.6 - 0.4 * (v_d - 800) * 0.01}
else if (v_d == 900){E_T <- 2.2}
else if (v_d > 900 & v_d < 1000){E_T <- 2.2 - 0.3 * (v_d - 900) * 0.01}
else if (v_d >= 1000){E_T <- 1.9}
else {E_T <- 'Error : [v_d] must be positive(vph). Please check that.'}
}
else if (L == 800){
if (v_d > 0 & v_d < 100){E_T <- 5.2 - 0.3 * (v_d - 100) * 0.01}
else if (v_d == 100){E_T <- 5.2}
else if (v_d > 100 & v_d < 200){E_T <- 5.2 - 0.3 * (v_d - 100) * 0.01}
else if (v_d == 200){E_T <- 4.9}
else if (v_d > 200 & v_d < 300){E_T <- 4.9 - 0.4 * (v_d - 200) * 0.01}
else if (v_d == 300){E_T <- 4.5}
else if (v_d > 300 & v_d < 400){E_T <- 4.5 - 0.3 * (v_d - 300) * 0.01}
else if (v_d == 400){E_T <- 4.2}
else if (v_d > 400 & v_d < 500){E_T <- 4.2 - 0.3 * (v_d - 400) * 0.01}
else if (v_d == 500){E_T <- 3.9}
else if (v_d > 500 & v_d < 600){E_T <- 3.9 - 0.4 * (v_d - 500) * 0.01}
else if (v_d == 600){E_T <- 3.5}
else if (v_d > 600 & v_d < 700){E_T <- 3.5 - 0.3 * (v_d - 600) * 0.01}
else if (v_d == 700){E_T <- 3.2}
else if (v_d > 700 & v_d < 800){E_T <- 3.2 - 0.3 * (v_d - 700) * 0.01}
else if (v_d == 800){E_T <- 2.9}
else if (v_d > 800 & v_d < 900){E_T <- 2.9 - 0.4 * (v_d - 800) * 0.01}
else if (v_d == 900){E_T <- 2.5}
else if (v_d > 900 & v_d < 1000){E_T <- 2.5 - 0.3 * (v_d - 900) * 0.01}
else if (v_d >= 1000){E_T <- 2.2}
else {E_T <- 'Error : [v_d] must be positive(vph). Please check that.'}
}
else if (L == 1200){
if (v_d > 0 & v_d < 100){E_T <- 5.5 - 0.4 * (v_d - 100) * 0.01}
else if (v_d == 100){E_T <- 5.5}
else if (v_d > 100 & v_d < 200){E_T <- 5.5 - 0.4 * (v_d - 100) * 0.01}
else if (v_d == 200){E_T <- 5.1}
else if (v_d > 200 & v_d < 300){E_T <- 5.1 - 0.3 * (v_d - 200) * 0.01}
else if (v_d == 300){E_T <- 4.8}
else if (v_d > 300 & v_d < 400){E_T <- 4.8 - 0.3 * (v_d - 300) * 0.01}
else if (v_d == 400){E_T <- 4.5}
else if (v_d > 400 & v_d < 500){E_T <- 4.5 - 0.4 * (v_d - 400) * 0.01}
else if (v_d == 500){E_T <- 4.1}
else if (v_d > 500 & v_d < 600){E_T <- 4.1 - 0.3 * (v_d - 500) * 0.01}
else if (v_d == 600){E_T <- 3.8}
else if (v_d > 600 & v_d < 700){E_T <- 3.8 - 0.3 * (v_d - 600) * 0.01}
else if (v_d == 700){E_T <- 3.5}
else if (v_d > 700 & v_d < 800){E_T <- 3.5 - 0.4 * (v_d - 700) * 0.01}
else if (v_d == 800){E_T <- 3.1}
else if (v_d > 800 & v_d < 900){E_T <- 3.1 - 0.3 * (v_d - 800) * 0.01}
else if (v_d == 900){E_T <- 2.8}
else if (v_d > 900 & v_d < 1000){E_T <- 2.8 - 0.3 * (v_d - 900) * 0.01}
else if (v_d >= 1000){E_T <- 2.5}
else {E_T <- 'Error : [v_d] must be positive(vph). Please check that.'}
}
else if (L == 1600){
if (v_d > 0 & v_d < 100){E_T <- 5.8 - 0.4 * (v_d - 100) * 0.01}
else if (v_d == 100){E_T <- 5.8}
else if (v_d > 100 & v_d < 200){E_T <- 5.8 - 0.4 * (v_d - 100) * 0.01}
else if (v_d == 200){E_T <- 5.4}
else if (v_d > 200 & v_d < 300){E_T <- 5.4 - 0.3 * (v_d - 200) * 0.01}
else if (v_d == 300){E_T <- 5.1}
else if (v_d > 300 & v_d < 400){E_T <- 5.1 - 0.4 * (v_d - 300) * 0.01}
else if (v_d == 400){E_T <- 4.7}
else if (v_d > 400 & v_d < 500){E_T <- 4.7 - 0.3 * (v_d - 400) * 0.01}
else if (v_d == 500){E_T <- 4.4}
else if (v_d > 500 & v_d < 600){E_T <- 4.4 - 0.3 * (v_d - 500) * 0.01}
else if (v_d == 600){E_T <- 4.1}
else if (v_d > 600 & v_d < 700){E_T <- 4.1 - 0.4 * (v_d - 600) * 0.01}
else if (v_d == 700){E_T <- 3.7}
else if (v_d > 700 & v_d < 800){E_T <- 3.7 - 0.3 * (v_d - 700) * 0.01}
else if (v_d == 800){E_T <- 3.4}
else if (v_d > 800 & v_d < 900){E_T <- 3.4 - 0.3 * (v_d - 800) * 0.01}
else if (v_d == 900){E_T <- 3.1}
else if (v_d > 900 & v_d < 1000){E_T <- 3.1 - 0.4 * (v_d - 900) * 0.01}
else if (v_d >= 1000){E_T <- 2.7}
else {E_T <- 'Error : [v_d] must be positive(vph). Please check that.'}
}
else if (L == 2400){
if (v_d > 0 & v_d < 100){E_T <- 6.3 - 0.3 * (v_d - 100) * 0.01}
else if (v_d == 100){E_T <- 6.3}
else if (v_d > 100 & v_d < 200){E_T <- 6.3 - 0.3 * (v_d - 100) * 0.01}
else if (v_d == 200){E_T <- 6.0}
else if (v_d > 200 & v_d < 300){E_T <- 6.0 - 0.4 * (v_d - 200) * 0.01}
else if (v_d == 300){E_T <- 5.6}
else if (v_d > 300 & v_d < 400){E_T <- 5.6 - 0.3 * (v_d - 300) * 0.01}
else if (v_d == 400){E_T <- 5.3}
else if (v_d > 400 & v_d < 500){E_T <- 5.3 - 0.3 * (v_d - 400) * 0.01}
else if (v_d == 500){E_T <- 5.0}
else if (v_d > 500 & v_d < 600){E_T <- 5.0 - 0.4 * (v_d - 500) * 0.01}
else if (v_d == 600){E_T <- 4.6}
else if (v_d > 600 & v_d < 700){E_T <- 4.6 - 0.3 * (v_d - 600) * 0.01}
else if (v_d == 700){E_T <- 4.3}
else if (v_d > 700 & v_d < 800){E_T <- 4.3 - 0.3 * (v_d - 700) * 0.01}
else if (v_d == 800){E_T <- 4.0}
else if (v_d > 800 & v_d < 900){E_T <- 4.0 - 0.4 * (v_d - 800) * 0.01}
else if (v_d == 900){E_T <- 3.6}
else if (v_d > 900 & v_d < 1000){E_T <- 3.6 - 0.3 * (v_d - 900) * 0.01}
else if (v_d >= 1000){E_T <- 3.3}
else {E_T <- 'Error : [v_d] must be positive(vph). Please check that.'}
}
else if (L == 3200){
if (v_d > 0 & v_d < 100){E_T <- 6.9 - 0.4 * (v_d - 100) * 0.01}
else if (v_d == 100){E_T <- 6.9}
else if (v_d > 100 & v_d < 200){E_T <- 6.9 - 0.4 * (v_d - 100) * 0.01}
else if (v_d == 200){E_T <- 6.5}
else if (v_d > 200 & v_d < 300){E_T <- 6.5 - 0.3 * (v_d - 200) * 0.01}
else if (v_d == 300){E_T <- 6.2}
else if (v_d > 300 & v_d < 400){E_T <- 6.2 - 0.3 * (v_d - 300) * 0.01}
else if (v_d == 400){E_T <- 5.9}
else if (v_d > 400 & v_d < 500){E_T <- 5.9 - 0.4 * (v_d - 400) * 0.01}
else if (v_d == 500){E_T <- 5.5}
else if (v_d > 500 & v_d < 600){E_T <- 5.5 - 0.3 * (v_d - 500) * 0.01}
else if (v_d == 600){E_T <- 5.2}
else if (v_d > 600 & v_d < 700){E_T <- 5.2 - 0.3 * (v_d - 600) * 0.01}
else if (v_d == 700){E_T <- 4.9}
else if (v_d > 700 & v_d < 800){E_T <- 4.9 - 0.4 * (v_d - 700) * 0.01}
else if (v_d == 800){E_T <- 4.5}
else if (v_d > 800 & v_d < 900){E_T <- 4.5 - 0.3 * (v_d - 800) * 0.01}
else if (v_d == 900){E_T <- 4.2}
else if (v_d > 900 & v_d < 1000){E_T <- 4.2 - 0.4 * (v_d - 900) * 0.01}
else if (v_d >= 1000){E_T <- 3.8}
else {E_T <- 'Error : [v_d] must be positive(vph). Please check that.'}
}
else if (L == 4800){
if (v_d > 0 & v_d < 100){E_T <- 8.0 - 0.4 * (v_d - 100) * 0.01}
else if (v_d == 100){E_T <- 8.0}
else if (v_d > 100 & v_d < 200){E_T <- 8.0 - 0.4 * (v_d - 100) * 0.01}
else if (v_d == 200){E_T <- 7.6}
else if (v_d > 200 & v_d < 300){E_T <- 7.6 - 0.3 * (v_d - 200) * 0.01}
else if (v_d == 300){E_T <- 7.3}
else if (v_d > 300 & v_d < 400){E_T <- 7.3 - 0.3 * (v_d - 300) * 0.01}
else if (v_d == 400){E_T <- 7.0}
else if (v_d > 400 & v_d < 500){E_T <- 7.0 - 0.4 * (v_d - 400) * 0.01}
else if (v_d == 500){E_T <- 6.6}
else if (v_d > 500 & v_d < 600){E_T <- 6.6 - 0.3 * (v_d - 500) * 0.01}
else if (v_d == 600){E_T <- 6.3}
else if (v_d > 600 & v_d < 700){E_T <- 6.3 - 0.3 * (v_d - 600) * 0.01}
else if (v_d == 700){E_T <- 6.0}
else if (v_d > 700 & v_d < 800){E_T <- 6.0 - 0.4 * (v_d - 700) * 0.01}
else if (v_d == 800){E_T <- 5.6}
else if (v_d > 800 & v_d < 900){E_T <- 5.6 - 0.3 * (v_d - 800) * 0.01}
else if (v_d == 900){E_T <- 5.3}
else if (v_d > 900 & v_d < 1000){E_T <- 5.3 - 0.3 * (v_d - 900) * 0.01}
else if (v_d >= 1000){E_T <- 5.0}
else {E_T <- 'Error : [v_d] must be positive(vph). Please check that.'}
}
else if (L == 6400){
if (v_d > 0 & v_d < 100){E_T <- 9.1 - 0.4 * (v_d - 100) * 0.01}
else if (v_d == 100){E_T <- 9.1}
else if (v_d > 100 & v_d < 200){E_T <- 9.1 - 0.4 * (v_d - 100) * 0.01}
else if (v_d == 200){E_T <- 8.7}
else if (v_d > 200 & v_d < 300){E_T <- 8.7 - 0.3 * (v_d - 200) * 0.01}
else if (v_d == 300){E_T <- 8.4}
else if (v_d > 300 & v_d < 400){E_T <- 8.4 - 0.3 * (v_d - 300) * 0.01}
else if (v_d == 400){E_T <- 8.1}
else if (v_d > 400 & v_d < 500){E_T <- 8.1 - 0.4 * (v_d - 400) * 0.01}
else if (v_d == 500){E_T <- 7.7}
else if (v_d > 500 & v_d < 600){E_T <- 7.7 - 0.3 * (v_d - 500) * 0.01}
else if (v_d == 600){E_T <- 7.4}
else if (v_d > 600 & v_d < 700){E_T <- 7.4 - 0.3 * (v_d - 600) * 0.01}
else if (v_d == 700){E_T <- 7.1}
else if (v_d > 700 & v_d < 800){E_T <- 7.1 - 0.4 * (v_d - 700) * 0.01}
else if (v_d == 800){E_T <- 6.7}
else if (v_d > 800 & v_d < 900){E_T <- 6.7 - 0.3 * (v_d - 800) * 0.01}
else if (v_d == 900){E_T <- 6.4}
else if (v_d > 900 & v_d < 1000){E_T <- 6.4 - 0.3 * (v_d - 900) * 0.01}
else if (v_d >= 1000){E_T <- 6.1}
else {E_T <- 'Error : [v_d] must be positive(vph). Please check that.'}
}
else {E_T <- 'Error : [L] must be one of 400, 800, 1200, 1600, 2400, 3200, 4800, 6400. Please check that.'}
}
else {E_T <- 'Error : [slope] must be one of 0.03, 0.04, 0.05, 0.06, 0.07. Please check that.'}
}
else {E_T <- 'Error : [landform] must be one of [flatland], [hill], [specific_slope]. Please check that.'}
E_T
}
E_T_2lane_Road(landform = 'flatland', v_d = 332)
E_T_2l(landform = 'flatland', v_d = 332)
E_T_2l(landform = 'hill', v_d = 459)
E_T_2l(landform = 'specific_slope', slope = 0.04, L = 1200, v_d = 838)
#' Correction Coefficient of Total Delay Ratio in 2+1 Lane Road
#'
#' It correct TDR(Total Delay Rate) in 2+1 lane road.
#'     This function follows <Table 7-14> in KHCM(2013), p.186.
#' @param v Traffic volume in 2+1 lane road(pcphpl).
#' @keywords 2+1 lane road correction coefficient TDR total delay ratio
#' @export f_pl Correction Coefficient of Total Delay in 2+1 Lane Road Section(f_pl)
#' @examples
#' f_pl(v = 1391)
#' f_pl(999)
f_pl_2lp1 <- function(v = NULL){
if (v > 0 & v <= 100){f <- 0.789}
else if (v > 100 & v <= 200){f <- 0.761}
else if (v > 200 & v <= 300){f <- 0.735}
else if (v > 300 & v <= 400){f <- 0.713}
else if (v > 400 & v <= 500){f <- 0.694}
else if (v > 500 & v <= 600){f <- 0.678}
else if (v > 600 & v <= 700){f <- 0.665}
else if (v > 700 & v <= 800){f <- 0.655}
else if (v > 800 & v <= 900){f <- 0.648}
else if (v > 900 & v <= 1000){f <- 0.645}
else if (v > 1000 & v <= 1100){f <- 0.644}
else if (v > 1100 & v <= 1200){f <- 0.646}
else if (v > 1200 & v <= 1300){f <- 0.651}
else if (v > 1300 & v <= 1400){f <- 0.660}
else if (v > 1400 & v <= 1500){f <- 0.671}
else if (v > 1500 & v <= 1600){f <- 0.686}
else if (v > 1600 & v <= 1700){f <- 0.704}
else {f <- 'Error : [v] must be positive(pcphpl). Please check that.'}
f
}
#' @param L_up Analysis section length (m) upstream of the overtaking lane section among the i-th analysis target section
#' @param L_dn The length of the analysis target section before entering the i-th overtaking lane (m)
#' @param L_pl Section length of the i-th overtaking lane (m)
#' @param f_pl Total delay rate correction factor for the i-th overtaking lane section. See \code{\link{f_pl_2lp1}}.
#' @param f_w_D_up Lane width and lateral margin correction factor in the upstream section of the i-th overtaking lane. See \code{\link{f_w_D_2l}}.
#' @param f_w_D_pl Lane width and side clearance width correction factor for the i-th overtaking lane section. See \code{\link{f_w_D_2l}}.
#' @param f_w_D_dn Lane width and side clearance width correction factor in the downstream section of the i-th overtaking lane. See \code{\link{f_w_D_2l}}.
#' @keywords
#' @export TDR_2lp1 Total Delay Rate for i Sections in One Direction on a 2+1 Lane Road(TDR_2lane_plus1, %)
#' @examples
TDR_2lp1 <- function(TDR_up = NULL, TDR_dn = NULL, L_up = NULL, L_dn = NULL, L_pl = NULL, f_pl = NULL, f_w_D_up = NULL, f_w_D_dn = NULL, f_w_D_pl = NULL){
if (length(TDR_up) == length(TDR_dn) & length(TDR_up) == length(L_up) & length(TDR_up) == length(L_dn) & length(TDR_up) == length(L_pl) & length(TDR_up) == length(f_pl) & length(TDR_up) == length(f_w_D_up) & length(TDR_up) == length(f_w_D_dn) & length(TDR_up) == length(f_w_D_pl)){
tdr_sum <- 0
for (i in 1:length(TDR_up)){
tdr <- ((TDR_up[i] * (L_up[i] + f_pl[i] * ((1 + f_w_D_pl[i]/100)/(1 + f_w_D_up[i]/100)) * L_pl[i])) + (TDR_dn[i] * ((1 + f_w_D_pl[i]/100)/(1 + f_w_D_dn[i]/100)) * L_dn[i]))/(L_up[i] + L_dn[i] + L_pl[i])
tdr_sum <- tdr + tdr_sum
}
}
else {tdr_sum <- 'Error : Length of each arguments must be same with each other. Please check that.'}
tdr_sum
}
#' @param L_up Analysis section length (m) upstream of the overtaking lane section among the i-th analysis target section
#' @param L_dn The length of the analysis target section before entering the i-th overtaking lane (m)
#' @param L_pl Section length of the i-th overtaking lane (m)
#' @param f_pl Total delay rate correction factor for the i-th overtaking lane section. See \code{\link{f_pl_2lp1}}.
#' @param f_w_D_up Lane width and lateral margin correction factor in the upstream section of the i-th overtaking lane. See \code{\link{f_w_D_2l}}.
#' @param f_w_D_pl Lane width and side clearance width correction factor for the i-th overtaking lane section. See \code{\link{f_w_D_2l}}.
#' @param f_w_D_dn Lane width and side clearance width correction factor in the downstream section of the i-th overtaking lane. See \code{\link{f_w_D_2l}}.
#' @keywords TDR Total Delay Rate 2+1 lane road
#' @export TDR_21_i_2lp1 Total Delay Rate for i Sections in One Direction on a 2+1 Lane Road(TDR_2lane_plus1, %)
#' @examples
TDR_21_i_2lp1 <- function(TDR_up = NULL, TDR_dn = NULL, L_up = NULL, L_dn = NULL, L_pl = NULL, f_pl = NULL, f_w_D_up = NULL, f_w_D_dn = NULL, f_w_D_pl = NULL){
if (length(TDR_up) == length(TDR_dn) & length(TDR_up) == length(L_up) & length(TDR_up) == length(L_dn) & length(TDR_up) == length(L_pl) & length(TDR_up) == length(f_pl) & length(TDR_up) == length(f_w_D_up) & length(TDR_up) == length(f_w_D_dn) & length(TDR_up) == length(f_w_D_pl)){
tdr_sum <- 0
for (i in 1:length(TDR_up)){
tdr <- ((TDR_up[i] * (L_up[i] + f_pl[i] * ((1 + f_w_D_pl[i]/100)/(1 + f_w_D_up[i]/100)) * L_pl[i])) + (TDR_dn[i] * ((1 + f_w_D_pl[i]/100)/(1 + f_w_D_dn[i]/100)) * L_dn[i]))/(L_up[i] + L_dn[i] + L_pl[i])
tdr_sum <- tdr + tdr_sum
}
}
else {tdr_sum <- 'Error : Length of each arguments must be same with each other. Please check that.'}
tdr_sum
}
#' Bi-directional total delay rate(TDR) in 2+lane road.
#' This function follows <Formula 7-14> in KHCM(2013), p.186.
#' @param TDR_in TDR in the direction of progress(%).
#' @param TDR_out TDR in opposite direction(%).
#' @param L_in Section length for analysis in the direction of progress(m)
#' @param L_out Section length for analysis in the opposite direction(m)
#' @keywords
#' @export TDR_TD_2lp1 Total Delay Rate for i Sections in One Direction on a 2+1 Lane Road(TDR_2lane_plus1, %)
#' @examples
#' TDR_TD_2lp1(10.8, 2.1, 3.4, 3.2)
TDR_TD_2lp1 <- function(TDR_in = NULL, TDR_out = NULL, L_in = NULL, L_out = NULL){
if (TDR_in >= 0 & TDR_out >= 0 & L_in >= 0 & L_out >= 0){
result <- ((TDR_in * L_in) + (TDR_out * L_out))/(L_in + L_out)
result
}
else {result <- 'Error : [TDR_in], [TDR_out], [L_in], [L_out] must be positive. Please check that.'}
}
#' Correction Coefficient of Travel Speed in 2+1 Lane Road
#'
#' It correct travel speed in 2+1 lane road.
#'     This function follows <Table 7-15> in KHCM(2013), p.188.
#' @param v Traffic volume in 2+1 lane road(pcphpl).
#' @keywords 2+1 lane road correction coefficient TDR total delay ratio
#' @export fs_pl_2lp1 Correction coefficient of travel speed in 2+1 lane road Section(f_pl)
#' @examples
#' fs_pl_2lp1(v = 1391)
#' fs_pl_2lp1(999)
fs_pl_2lp1 <- function(v = NULL){
if (v > 0 & v <= 100){f <- 1.025}
else if (v > 100 & v <= 200){f <- 1.034}
else if (v > 200 & v <= 300){f <- 1.042}
else if (v > 300 & v <= 400){f <- 1.050}
else if (v > 400 & v <= 500){f <- 1.057}
else if (v > 500 & v <= 600){f <- 1.063}
else if (v > 600 & v <= 700){f <- 1.069}
else if (v > 700 & v <= 800){f <- 1.074}
else if (v > 800 & v <= 900){f <- 1.078}
else if (v > 900 & v <= 1000){f <- 1.081}
else if (v > 1000 & v <= 1100){f <- 1.084}
else if (v > 1100 & v <= 1200){f <- 1.086}
else if (v > 1200 & v <= 1300){f <- 1.088}
else if (v > 1300 & v <= 1400){f <- 1.089}
else if (v > 1400 & v <= 1500){f <- 1.089}
else if (v > 1500 & v <= 1600){f <- 1.088}
else if (v > 1600 & v <= 1700){f <- 1.087}
else {f <- 'Error : [v] must be >= 0 and <= 1700(pcphpl). Please check that.'}
f
}
& length(ATS_up) == length(f_w_ATS_pl)){
ats_sum <- 0
for (i in 1:length(ATS_up)){
p <- (ATS_up[i] - f_w_ATS_up[i])/(ATS_up[i] - f_w_ATS_pl[i])
q <- (ATS_up[i] * fs_pl[i] * p - f_w_ATS_pl[i])/(ATS_up[i] * fs_pl[i] * p - f_w_ATS_dn[i])
ats <- (L_up[i] + L_pl[i] + L_dn[i])/((L_up[i] / ATS_up[i]) + (L_pl[i] / (ATS_up[i] * fs_pl[i] * p)) + (L_dn / (ATS_dn * q)))
ats_sum <- ats_sum + ats
}
else {ats_sum <- 'Error : Length of each arguments must be same with each other. Please check that.'}
ats_sum
}
#' @param fs_pl Travel speed correction factor for the i-th overtaking lane section. See \code{\link{fs_pl_2lp1}}
#' @param L_up Analysis section length (m) upstream of the overtaking lane section among the i-th analysis target section
#' @param L_dn The length of the analysis target section before entering the i-th overtaking lane (m)
#' @param L_pl Section length of the i-th overtaking lane (m)
#' @param f_w_ATS_up Lane width and side clearance width of the downstream section of the i-th overtaking lane. See \code{\link{f_w_ATS_2l}}
#' @param f_w_ATS_pl Lane width and side clearance width of the i-th overtaking lane section. See \code{\link{f_w_ATS_2l}}
#' @param f_w_ATS_dn Lane width and side clearance width of the downstream section of the i-th overtaking lane. See \code{\link{f_w_ATS_2l}}
#' @keywords
#' @export ATS_21_i_2lp1 Average travel speed of a 2+1 lane road
#' @examples
ATS_21_i_2lp1 <- function(ATS_up = NULL, ATS_dn = NULL, fs_pl = NULL, L_up = NULL, L_dn = NULL, L_pl = NULL, f_w_ATS_up = NULL, f_w_ATS_dn = NULL, f_w_ATS_pl = NULL){
if (length(ATS_up) == length(ATS_dn)
& length(ATS_up) == length(ATS_dn)
& length(ATS_up) == length(fs_pl)
& length(ATS_up) == length(L_up)
$ length(ATS_up) == length(L_dn)
& length(ATS_up) == length(L_pl)
& length(ATS_up) == length(f_w_ATS_up)
& length(ATS_up) == length(f_w_ATS_dn)
& length(ATS_up) == length(f_w_ATS_pl)){
ats_sum <- 0
for (i in 1:length(ATS_up)){
p <- (ATS_up[i] - f_w_ATS_up[i])/(ATS_up[i] - f_w_ATS_pl[i])
q <- (ATS_up[i] * fs_pl[i] * p - f_w_ATS_pl[i])/(ATS_up[i] * fs_pl[i] * p - f_w_ATS_dn[i])
ats <- (L_up[i] + L_pl[i] + L_dn[i])/((L_up[i] / ATS_up[i]) + (L_pl[i] / (ATS_up[i] * fs_pl[i] * p)) + (L_dn / (ATS_dn * q)))
ats_sum <- ats_sum + ats
}
else {ats_sum <- 'Error : Length of each arguments must be same with each other. Please check that.'}
ats_sum
}
}
#' @param fs_pl Travel speed correction factor for the i-th overtaking lane section. See \code{\link{fs_pl_2lp1}}
#' @param L_up Analysis section length (m) upstream of the overtaking lane section among the i-th analysis target section
#' @param L_dn The length of the analysis target section before entering the i-th overtaking lane (m)
#' @param L_pl Section length of the i-th overtaking lane (m)
#' @param f_w_ATS_up Lane width and side clearance width of the downstream section of the i-th overtaking lane. See \code{\link{f_w_ATS_2l}}
#' @param f_w_ATS_pl Lane width and side clearance width of the i-th overtaking lane section. See \code{\link{f_w_ATS_2l}}
#' @param f_w_ATS_dn Lane width and side clearance width of the downstream section of the i-th overtaking lane. See \code{\link{f_w_ATS_2l}}
#' @keywords
#' @export ATS_21_i_2lp1 Average travel speed of a 2+1 lane road
#' @examples
ATS_21_i_2lp1 <- function(ATS_up = NULL, ATS_dn = NULL, fs_pl = NULL, L_up = NULL, L_dn = NULL, L_pl = NULL, f_w_ATS_up = NULL, f_w_ATS_dn = NULL, f_w_ATS_pl = NULL){
if (length(ATS_up) == length(ATS_dn)
& length(ATS_up) == length(ATS_dn)
& length(ATS_up) == length(fs_pl)
& length(ATS_up) == length(L_up)
$ length(ATS_up) == length(L_dn)
& length(ATS_up) == length(L_pl)
& length(ATS_up) == length(f_w_ATS_up)
& length(ATS_up) == length(f_w_ATS_dn)
& length(ATS_up) == length(f_w_ATS_pl)){
ats_sum <- 0
for (i in 1:length(ATS_up)){
p <- (ATS_up[i] - f_w_ATS_up[i])/(ATS_up[i] - f_w_ATS_pl[i])
q <- (ATS_up[i] * fs_pl[i] * p - f_w_ATS_pl[i])/(ATS_up[i] * fs_pl[i] * p - f_w_ATS_dn[i])
ats <- (L_up[i] + L_pl[i] + L_dn[i])/((L_up[i] / ATS_up[i]) + (L_pl[i] / (ATS_up[i] * fs_pl[i] * p)) + (L_dn / (ATS_dn * q)))
ats_sum <- ats_sum + ats
}
}
else {ats_sum <- 'Error : Length of each arguments must be same with each other. Please check that.'}
ats_sum
}
#' @param fs_pl Travel speed correction factor for the i-th overtaking lane section. See \code{\link{fs_pl_2lp1}}
#' @param L_up Analysis section length (m) upstream of the overtaking lane section among the i-th analysis target section
#' @param L_dn The length of the analysis target section before entering the i-th overtaking lane (m)
#' @param L_pl Section length of the i-th overtaking lane (m)
#' @param f_w_ATS_up Lane width and side clearance width of the downstream section of the i-th overtaking lane. See \code{\link{f_w_ATS_2l}}
#' @param f_w_ATS_pl Lane width and side clearance width of the i-th overtaking lane section. See \code{\link{f_w_ATS_2l}}
#' @param f_w_ATS_dn Lane width and side clearance width of the downstream section of the i-th overtaking lane. See \code{\link{f_w_ATS_2l}}
#' @keywords
#' @export ATS_21_i_2lp1 Average travel speed of a 2+1 lane road
#' @examples
ATS_21_i_2lp1 <- function(ATS_up = NULL, ATS_dn = NULL, fs_pl = NULL, L_up = NULL, L_dn = NULL, L_pl = NULL, f_w_ATS_up = NULL, f_w_ATS_dn = NULL, f_w_ATS_pl = NULL){
if (length(ATS_up) == length(ATS_dn) & length(ATS_up) == length(ATS_dn) & length(ATS_up) == length(fs_pl) & length(ATS_up) == length(L_up) $ length(ATS_up) == length(L_dn) & length(ATS_up) == length(L_pl) & length(ATS_up) == length(f_w_ATS_up) & length(ATS_up) == length(f_w_ATS_dn) & length(ATS_up) == length(f_w_ATS_pl)){
ats_sum <- 0
for (i in 1:length(ATS_up)){
p <- (ATS_up[i] - f_w_ATS_up[i])/(ATS_up[i] - f_w_ATS_pl[i])
q <- (ATS_up[i] * fs_pl[i] * p - f_w_ATS_pl[i])/(ATS_up[i] * fs_pl[i] * p - f_w_ATS_dn[i])
ats <- (L_up[i] + L_pl[i] + L_dn[i])/((L_up[i] / ATS_up[i]) + (L_pl[i] / (ATS_up[i] * fs_pl[i] * p)) + (L_dn / (ATS_dn * q)))
ats_sum <- ats_sum + ats
}
}
else {ats_sum <- 'Error : Length of each arguments must be same with each other. Please check that.'}
ats_sum
}
#' @param fs_pl Travel speed correction factor for the i-th overtaking lane section. See \code{\link{fs_pl_2lp1}}
#' @param L_up Analysis section length (m) upstream of the overtaking lane section among the i-th analysis target section
#' @param L_dn The length of the analysis target section before entering the i-th overtaking lane (m)
#' @param L_pl Section length of the i-th overtaking lane (m)
#' @param f_w_ATS_up Lane width and side clearance width of the downstream section of the i-th overtaking lane. See \code{\link{f_w_ATS_2l}}
#' @param f_w_ATS_pl Lane width and side clearance width of the i-th overtaking lane section. See \code{\link{f_w_ATS_2l}}
#' @param f_w_ATS_dn Lane width and side clearance width of the downstream section of the i-th overtaking lane. See \code{\link{f_w_ATS_2l}}
#' @keywords
#' @export ATS_21_i_2lp1 Average travel speed of a 2+1 lane road
#' @examples
ATS_21_i_2lp1 <- function(ATS_up = NULL, ATS_dn = NULL, fs_pl = NULL, L_up = NULL, L_dn = NULL, L_pl = NULL, f_w_ATS_up = NULL, f_w_ATS_dn = NULL, f_w_ATS_pl = NULL){
if (length(ATS_up) == length(ATS_dn) & length(ATS_up) == length(ATS_dn) & length(ATS_up) == length(fs_pl) & length(ATS_up) == length(L_up) $ length(ATS_up) == length(L_dn) & length(ATS_up) == length(L_pl) & length(ATS_up) == length(f_w_ATS_up) & length(ATS_up) == length(f_w_ATS_dn) & length(ATS_up) == length(f_w_ATS_pl)){
ats_sum <- 0
for (i in 1:length(ATS_up)){
p <- (ATS_up[i] - f_w_ATS_up[i])/(ATS_up[i] - f_w_ATS_pl[i])
q <- (ATS_up[i] * fs_pl[i] * p - f_w_ATS_pl[i])/(ATS_up[i] * fs_pl[i] * p - f_w_ATS_dn[i])
ats <- (L_up[i] + L_pl[i] + L_dn[i])/((L_up[i] / ATS_up[i]) + (L_pl[i] / (ATS_up[i] * fs_pl[i] * p)) + (L_dn[i] / (ATS_dn[i] * q)))
ats_sum <- ats_sum + ats
}
}
else {ats_sum <- 'Error : Length of each arguments must be same with each other. Please check that.'}
ats_sum
}
#' @param fs_pl Travel speed correction factor for the i-th overtaking lane section. See \code{\link{fs_pl_2lp1}}
#' @param L_up Analysis section length (m) upstream of the overtaking lane section among the i-th analysis target section
#' @param L_dn The length of the analysis target section before entering the i-th overtaking lane (m)
#' @param L_pl Section length of the i-th overtaking lane (m)
#' @param f_w_ATS_up Lane width and side clearance width of the downstream section of the i-th overtaking lane. See \code{\link{f_w_ATS_2l}}
#' @param f_w_ATS_pl Lane width and side clearance width of the i-th overtaking lane section. See \code{\link{f_w_ATS_2l}}
#' @param f_w_ATS_dn Lane width and side clearance width of the downstream section of the i-th overtaking lane. See \code{\link{f_w_ATS_2l}}
#' @keywords
#' @export ATS_21_i_2lp1 Average travel speed of a 2+1 lane road
#' @examples
ATS_21_i_2lp1 <- function(ATS_up = NULL, ATS_dn = NULL, fs_pl = NULL, L_up = NULL, L_dn = NULL, L_pl = NULL, f_w_ATS_up = NULL, f_w_ATS_dn = NULL, f_w_ATS_pl = NULL){
if (length(ATS_up) == length(ATS_dn) & length(ATS_up) == length(ATS_dn) & length(ATS_up) == length(fs_pl) & length(ATS_up) == length(L_up) $ length(ATS_up) == length(L_dn) & length(ATS_up) == length(L_pl) & length(ATS_up) == length(f_w_ATS_up) & length(ATS_up) == length(f_w_ATS_dn) & length(ATS_up) == length(f_w_ATS_pl)){
ats_sum <- 0
for (i in 1:length(ATS_up)){
}
}
else {ats_sum <- 'Error : Length of each arguments must be same with each other. Please check that.'}
ats_sum
}
#' @param fs_pl Travel speed correction factor for the i-th overtaking lane section. See \code{\link{fs_pl_2lp1}}
#' @param L_up Analysis section length (m) upstream of the overtaking lane section among the i-th analysis target section
#' @param L_dn The length of the analysis target section before entering the i-th overtaking lane (m)
#' @param L_pl Section length of the i-th overtaking lane (m)
#' @param f_w_ATS_up Lane width and side clearance width of the downstream section of the i-th overtaking lane. See \code{\link{f_w_ATS_2l}}
#' @param f_w_ATS_pl Lane width and side clearance width of the i-th overtaking lane section. See \code{\link{f_w_ATS_2l}}
#' @param f_w_ATS_dn Lane width and side clearance width of the downstream section of the i-th overtaking lane. See \code{\link{f_w_ATS_2l}}
#' @keywords
#' @export ATS_21_i_2lp1 Average travel speed of a 2+1 lane road
#' @examples
ATS_21_i_2lp1 <- function(ATS_up = NULL, ATS_dn = NULL, fs_pl = NULL, L_up = NULL, L_dn = NULL, L_pl = NULL, f_w_ATS_up = NULL, f_w_ATS_dn = NULL, f_w_ATS_pl = NULL){
if (length(ATS_up) == length(ATS_dn) & length(ATS_up) == length(ATS_dn) & length(ATS_up) == length(fs_pl) & length(ATS_up) == length(L_up) & length(ATS_up) == length(L_dn) & length(ATS_up) == length(L_pl) & length(ATS_up) == length(f_w_ATS_up) & length(ATS_up) == length(f_w_ATS_dn) & length(ATS_up) == length(f_w_ATS_pl)){
ats_sum <- 0
for (i in 1:length(ATS_up)){
p <- (ATS_up[i] - f_w_ATS_up[i])/(ATS_up[i] - f_w_ATS_pl[i])
q <- (ATS_up[i] * fs_pl[i] * p - f_w_ATS_pl[i])/(ATS_up[i] * fs_pl[i] * p - f_w_ATS_dn[i])
ats <- (L_up[i] + L_pl[i] + L_dn[i])/((L_up[i] / ATS_up[i]) + (L_pl[i] / (ATS_up[i] * fs_pl[i] * p)) + (L_dn / (ATS_dn * q)))
ats_sum <- ats_sum + ats
}
}
else {ats_sum <- 'Error : Length of each arguments must be same with each other. Please check that.'}
ats_sum
}
#' Bi-directional average travel speed in 2+l lane road(kph)
#'     This function follows <Formula 7-16> in KHCM(2013), p.188.
#' @param ATS_in ATS in the direction of progress(kph).
#' @param ATS_out ATS in opposite direction(kph).
#' @param L_in Section length for analysis in the direction of progress(m)
#' @param L_out Section length for analysis in the opposite direction(m)
#' @keywords
#' @export ATS_TD_2lp1
#' @examples
#' ATS_TD_2lp1(70, 55, 0.4, 1.3)
ATS_TD_2lp1 <- function(ATS_in = NULL, ATS_out = NULL, L_in = NULL, L_out = NULL){
if (ATS_in >= 0 & ATS_out >= 0 & L_in >= 0 & L_out >= 0){
result <- (L_in + L_out) / ((L_in / ATS_in) + (L_out / ATS_out))
}
else {result <- 'Error : [ATS_in], [ATS_out], [L_in], [L_out] must be positive. Please check that.'}
result
}
