else if (L == 300){cap <- 7600}
else if (L > 300 & L < 450){cap <- 7600 + (400/150) * (L - 300)}
else if (L == 450){cap <- 8000}
else if (L > 450 & L < 600){cap <- 8000 + (100/150) * (L - 450)}
else if (L == 600){cap <- 8100}
else if (L > 600){cap <- 8100 + (100/150) * (L - 600)}
else{cap <- 'Error : [L] must be >= 150. Please check that.'}
}
else {cap <- 'Error : [N] must be one of [3], [4], [5]. Please check that.'}
}
else {cap <- 'Error : [VR] must be one of [0.10], [0.20], [0.30], [0.40]. Please check that.'}
}
else {cap <- 'Error : [design_speed] must be one of [80], [100], [120](kph). Please check that.'}
cap
}
capa_expwy_wv_ramp(design_speed = 120, VR = 0.20, L = 550, N = 4)
#' This function decides the applicability of speed formula in expressway weaving section.
#'     It follows definitions in KHCM(2013), p.61-62.
#' @param type Type of weaving section. Choose one from: \code{'ramp'}, \code{'frontage'}
#' @param V_w Weaving traffic volume(pcph)
#' @param V Total traffic volume(pcph).
#' @param N Total number of lanes in the weaving section. Choose one from: \code{3}, \code{4}, \code{5}
#' @keywords applicability speed formula exxpressway weaving section
#' @seealso \code{\link{VR_expwy_wv}}, \code{\link{S_expwy_wv}}, \code{\link{D_expwy_wv}}, \code{\link{LOS_expwy_wv_ramp}}, \code{\link{LOS_expwy_wv_fr}}
#' @export appl_expwy_wv \code{'OK'}, \code{'Warning'}
#' @examples
appl_expwy_wv <- function(V_w = NULL, V = NULL, N = NULL){
VR <- VR_expwy_wv(V_w = V_w, V = V)
if (is.numeric(VR) == TRUE){
if (N == 3){
if (type == 'ramp'){
if (VR <= 0.5 & V/N <= 2000 & V_w <= 2800){res <- 'OK'}
else {res <- 'Warning'}
}
else if (type == 'frontage'){
if (VR <= 0.5 & V_w <= 3000){res <- 'OK'}
else {res <- 'Warning'}
}
else {res <- 'Error : [type] must be one of [ramp] or [frontage]. Please check that.'}
}
else if (N == 4){
if (type == 'ramp'){
if (VR <= 0.45 & V/N <= 2000 & V_w <= 2800){res <- 'OK'}
else {res <- 'Warning'}
}
else if (type == 'frontage'){
if (VR <= 0.45 & V_w <= 3000){res <- 'OK'}
else {res <- 'Warning'}
}
else {res <- 'Error : [type] must be one of [ramp] or [frontage]. Please check that.'}
}
else if (N == 5){
if (type == 'ramp'){
if (VR <= 0.40 & V/N <= 2000 & V_w <= 2800){res <- 'OK'}
else {res <- 'Warning'}
}
else if (type == 'frontage'){
if (VR <= 0.40 & V_w <= 3000){res <- 'OK'}
else {res <- 'Warning'}
}
else {res <- 'Error : [type] must be one of [ramp] or [frontage]. Please check that.'}
}
else {res <- 'Error : [N] must be one of [3], [4], [5]. Please check that.'}
}
else {res <- print(VR)}
res
}
appl_expwy_wv(V_w = 1839, V = 3200, N =4)
#' This function decides the applicability of speed formula in expressway weaving section.
#'     It follows definitions in KHCM(2013), p.61-62.
#' @param type Type of weaving section. Choose one from: \code{'ramp'}, \code{'frontage'}
#' @param V_w Weaving traffic volume(pcph)
#' @param V Total traffic volume(pcph).
#' @param N Total number of lanes in the weaving section. Choose one from: \code{3}, \code{4}, \code{5}
#' @keywords applicability speed formula exxpressway weaving section
#' @seealso \code{\link{VR_expwy_wv}}, \code{\link{S_expwy_wv}}, \code{\link{D_expwy_wv}}, \code{\link{LOS_expwy_wv_ramp}}, \code{\link{LOS_expwy_wv_fr}}
#' @export appl_expwy_wv \code{'OK'}, \code{'Warning'}
#' @examples
appl_expwy_wv <- function(type = NULL, V_w = NULL, V = NULL, N = NULL){
VR <- VR_expwy_wv(V_w = V_w, V = V)
if (is.numeric(VR) == TRUE){
if (N == 3){
if (type == 'ramp'){
if (VR <= 0.5 & V/N <= 2000 & V_w <= 2800){res <- 'OK'}
else {res <- 'Warning'}
}
else if (type == 'frontage'){
if (VR <= 0.5 & V_w <= 3000){res <- 'OK'}
else {res <- 'Warning'}
}
else {res <- 'Error : [type] must be one of [ramp] or [frontage]. Please check that.'}
}
else if (N == 4){
if (type == 'ramp'){
if (VR <= 0.45 & V/N <= 2000 & V_w <= 2800){res <- 'OK'}
else {res <- 'Warning'}
}
else if (type == 'frontage'){
if (VR <= 0.45 & V_w <= 3000){res <- 'OK'}
else {res <- 'Warning'}
}
else {res <- 'Error : [type] must be one of [ramp] or [frontage]. Please check that.'}
}
else if (N == 5){
if (type == 'ramp'){
if (VR <= 0.40 & V/N <= 2000 & V_w <= 2800){res <- 'OK'}
else {res <- 'Warning'}
}
else if (type == 'frontage'){
if (VR <= 0.40 & V_w <= 3000){res <- 'OK'}
else {res <- 'Warning'}
}
else {res <- 'Error : [type] must be one of [ramp] or [frontage]. Please check that.'}
}
else {res <- 'Error : [N] must be one of [3], [4], [5]. Please check that.'}
}
else {res <- print(VR)}
res
}
appl_expwy_wv(type = 'ramp', V_w = 1839, V = 3200, N = 4)
appl_expwy_wv(type = 'frontage', V_w = 1832, V = 2938, N = 3)
appl_expwy_wv(type = 'frontage', V_w = 1832, V = 2738, N = 3)
appl_expwy_wv(type = 'frontage', V_w = 882, V = 2738, N = 3)
#' @param output Type of output capacity. Choose one from : \code{'main'}, \code{'influence_inflow'}, \code{'influence_outflow'}
#' @keywords capacity freeway ramp junction
#' @details The capacity of the highway junction.
#'     The capacity of the connecting path can be divided into the connecting path capacity and the main line capacity.
#'     The capacity of the junction is related to the maximum passing traffic at the point downstream of the upstream branching junction.
#'     This concept is not much different from the analysis concept of the basic highway section.
#'     - Classification section and junction main line traffic volume: At the junction, it means the capacity immediately after merging, and at the classification section just before classification.
#'     - Capacity of influenced area : Inflow traffic volume represents the junction area's impact area capacity, and outflow traffic volume represents the classification area's impact area capacity.
#' @export capa_expwy_rpjt
#' @examples
capa_expwy_rpjt <- function(free_speed = NULL, V = NULL, N = NULL, output = NULL){
if (output == 'main'){
if (free_speed > 110 & free_speed <= 120){
if (N == 2){cap <- 4600}
else if (N == 3){cap <- 6900}
else if (N >= 4){cap <- 2300 * N}
else {cap <- 'Error : [N] must be >= 2. Please check that.'}
}
else if (free_speed > 100 & free_speed <= 110){
if (N == 2){cap <- 4500}
else if (N == 3){cap <- 6750}
else if (N >= 4){cap <- 2250 * N}
else {cap <- 'Error : [N] must be >= 2. Please check that.'}
}
else if (free_speed > 90 & free_speed <= 100){
if (N == 2){cap <- 4400}
else if (N == 3){cap <- 6600}
else if (N >= 4){cap <- 2200 * N}
else {cap <- 'Error : [N] must be >= 2. Please check that.'}
}
else if (free_speed > 0 & free_speed <= 90){
if (N == 2){cap <- 4200}
else if (N == 3){cap <- 6300}
else if (N >= 4){cap <- 2100 * N}
else {cap <- 'Error : [N] must be >= 2. Please check that.'}
}
else {cap <- 'Error : [free_speed] must be positive(kph). Please check that.'}
}
else if (output == 'influence_inflow'){
if (free_speed > 110 & free_speed <= 120){cap <- 4400}
else if (free_speed > 100 & free_speed <= 110){cap <- 4400}
else if (free_speed > 90 & free_speed <= 100){cap <- 4400}
else if (free_speed > 0 & free_speed <= 90){cap <- 4400}
else {cap <- 'Error : [N] must be >= 2. Please check that.'}
}
else if (output == 'influence_outflow'){
if (free_speed > 110 & free_speed <= 120){cap <- 4600}
else if (free_speed > 100 & free_speed <= 110){cap <- 4600}
else if (free_speed > 90 & free_speed <= 100){cap <- 4600}
else if (free_speed > 0 & free_speed <= 90){cap <- 4600}
else {cap <- 'Error : [N] must be >= 2. Please check that.'}
}
else {cap <- 'Error : [output] must be one of [main], [influence_inflow], [influence_outflow]. Please check that.'}
cap
}
capa_expwy_rpjt(free_speed = 87, V = 1834, N = 3, output = 'main')
capa_expwy_rpjt(free_speed = 101, V = 5834, N = 5, output = 'main')
capa_expwy_rpjt(free_speed = 101, V = 3834, N = 5, output = 'main')
capa_expwy_rpjt(free_speed = 101, N = 4, output = 'influence_inflow')
#' Level of Service(LOS) in Expressway-Ramp Junction
#'
#' This function decides Level of Service(LOS) in the expressway-ramp junction.
#'     It follows <Table 4-3> in KHCM(2013), p.86.
#' @param V The traffic volume(pcph)
#' @param density The density of the road(pcpkmpl)
#' @param capacity Capacity(pcph)
#' @export LOS_expwy_rpjt
#' @examples
LOS_expwy_rpjt <- function(V = NULL, density = NULL, capacity = NULL){
if (V > capacity){LOS <- 'F'}
else if (V <= capacity){
if (density >= 0 & density <= 6){LOS <-  'A'}
else if (density > 6 & density <= 12){LOS <- 'B'}
else if (density > 12 & density <= 17){LOS <- 'C'}
else if (density > 17 & density <= 22){LOS <- 'D'}
else if (density > 22){LOS <- 'E'}
else {LOS <- 'Error : [density] must be positive(pcpkmpl). Please check that.'}
}
else {LOS <- 'Error : [V], [capacity] must be positive(pcph). Please check that.'}
LOS
}
LOS_expwy_rpjt(density = 24.32, V = 3921, capacity = 4400)
LOS_expwy_rpjt(32.32, 4821, 3933)
LOS_expwy_rpjt(32.32, 4821, 2000)
LOS_expwy_rpjt(density = 32.32, V = 4821, capacity = 2000)
#' @param N_ramp Total number of ramp lanes(one-way). Choose one from : \code{1}, \code{2}
#' @keywords capacity expressway ramp junction
#' @details The capacity of the ramp is affected by the curve radius of the ramp,
#'     the difference in slope or slope from the main line, the shoulder width,
#'     the shape of the ramp, and the design speed of the ramp,
#'     which is a comprehensive concept of these.
#'     When it is necessary to determine the number of lanes of the ramp path itself,
#'     the ramp path capacity of this function can be used.
#' @export capa_expwy_rpjt_rp (pcph)
#' @examples
capa_expwy_rpjt_rp <- function(free_speed_ramp = NULL, N_ramp = NULL){
if (N_ramp == 1){
if (free_speed_ramp > 70){cap <- 2000}
else if (free_speed_ramp > 60 & free_speed_ramp <= 70){cap <- 1900}
else if (free_speed_ramp > 50 & free_speed_ramp <= 60){cap <- 1800}
else if (free_speed_ramp > 40 & free_speed_ramp <= 50){cap <- 1700}
else if (free_speed_ramp <= 40){cap <- 1600}
else {'Error : [free_speed_ramp] must be positive(kph). Please check that.'}
}
else if (N_ramp == 2){
if (free_speed_ramp > 70){cap <- 4000}
else if (free_speed_ramp > 60 & free_speed_ramp <= 70){cap <- 3800}
else if (free_speed_ramp > 50 & free_speed_ramp <= 60){cap <- 3600}
else if (free_speed_ramp > 40 & free_speed_ramp <= 50){cap <- 3400}
else if (free_speed_ramp <= 40){cap <- 3200}
else {'Error : [free_speed_ramp] must be positive(kph). Please check that.'}
}
else {cap <- 'Error : [N_ramp] must be 1 or 2. Please check that.'}
cap
}
#' @details The capacity of the highway junction.
#'     The capacity of the connecting path can be divided into the connecting path capacity and the main line capacity.
#'     The capacity of the junction is related to the maximum passing traffic at the point downstream of the upstream branching junction.
#'     This concept is not much different from the analysis concept of the basic highway section.
#'     - Classification section and junction main line traffic volume: At the junction, it means the capacity immediately after merging, and at the classification section just before classification.
#'     - Capacity of influenced area : Inflow traffic volume represents the junction area's impact area capacity, and outflow traffic volume represents the classification area's impact area capacity.
#' @export capa_expwy_rpjt
#' @examples
#' capa_expwy_rpjt(free_speed = 87, N = 3, output = 'main')
#' capa_expwy_rpjt(free_speed = 101, N = 4, output = 'influence_inflow')
capa_expwy_rpjt <- function(free_speed = NULL, N = NULL, output = NULL){
if (output == 'main'){
if (free_speed > 110 & free_speed <= 120){
if (N == 2){cap <- 4600}
else if (N == 3){cap <- 6900}
else if (N >= 4){cap <- 2300 * N}
else {cap <- 'Error : [N] must be >= 2. Please check that.'}
}
else if (free_speed > 100 & free_speed <= 110){
if (N == 2){cap <- 4500}
else if (N == 3){cap <- 6750}
else if (N >= 4){cap <- 2250 * N}
else {cap <- 'Error : [N] must be >= 2. Please check that.'}
}
else if (free_speed > 90 & free_speed <= 100){
if (N == 2){cap <- 4400}
else if (N == 3){cap <- 6600}
else if (N >= 4){cap <- 2200 * N}
else {cap <- 'Error : [N] must be >= 2. Please check that.'}
}
else if (free_speed > 0 & free_speed <= 90){
if (N == 2){cap <- 4200}
else if (N == 3){cap <- 6300}
else if (N >= 4){cap <- 2100 * N}
else {cap <- 'Error : [N] must be >= 2. Please check that.'}
}
else {cap <- 'Error : [free_speed] must be positive(kph). Please check that.'}
}
else if (output == 'influence_inflow'){
if (free_speed > 110 & free_speed <= 120){cap <- 4400}
else if (free_speed > 100 & free_speed <= 110){cap <- 4400}
else if (free_speed > 90 & free_speed <= 100){cap <- 4400}
else if (free_speed > 0 & free_speed <= 90){cap <- 4400}
else {cap <- 'Error : [N] must be >= 2. Please check that.'}
}
else if (output == 'influence_outflow'){
if (free_speed > 110 & free_speed <= 120){cap <- 4600}
else if (free_speed > 100 & free_speed <= 110){cap <- 4600}
else if (free_speed > 90 & free_speed <= 100){cap <- 4600}
else if (free_speed > 0 & free_speed <= 90){cap <- 4600}
else {cap <- 'Error : [N] must be >= 2. Please check that.'}
}
else {cap <- 'Error : [output] must be one of [main], [influence_inflow], [influence_outflow]. Please check that.'}
cap
}
else {'Error : [free_speed] must be positive(kph). Please check that.'}
else {'Error : [free_speed] must be positive(kph). Please check that.'}
#' @param free_speed_ramp Free speed of ramp(link) road(kph).
#' @param N Total number of main lanes(one-way). It must be 2 or more.
#' @param N_ramp Number of ramp road. Choose one from : \code{1}, \code{2}
#' @param V_main Traffic volume of main road(pcph).
#' @param V_inflow Inflow traffic volume of influenced area(pcph).
#' @param V_outflow Outflow traffic volume of influenced area(pcph).
#' @param V_ramp Traffic volume of ramp road(pcph).
#' @keywords expressway ramp junction analyze determination
#' @export appl_expwy_rpjt \code{'Possible'}, \code{'Impossible'}
#' @examples
appl_expwy_rpjt <- function(free_speed = NULL, free_speed_ramp = NULL, N = NULL, N_ramp = NULL, V_main = NULL, V_inflow = NULL, V_outflow = NULL, V_link = NULL){
if (free_speed >= 0){
if (free_speed_ramp >= 0){
if (N >= 1){
if (N_ramp == 1 | N_ramp == 2){
if (V_main >= 0){
if (V_inflow >= 0){
if (V_outflow >= 0){
if (V_ramp >= 0){
capa_main <- capa_expwy_rpjt(free_speed = free_speed, N = N, output = 'main')
capa_inflow <- capa_expwy_rpjt(free_speed = free_speed, N = N, output = 'influence_inflow')
capa_outflow <- capa_expwy_rpjt(free_speed = free_speed, N = N, output = 'influence_outflow')
capa_ramp <- capa_expwy_rpjt_rp(free_speed_ramp = free_speed_ramp, N_ramp = N_ramp)
if (V_main <= capa_main){
if (V_inflow <= capa_inflow){
if (V_outflow <= capa_outflow){
if (V_ramp <= capa_ramp){'Possible'}
else {'Impossible'}
}
else {'Impossible'}
}
else {'Impossible'}
}
else {'Impossible'}
}
else {'Error : [V_ramp] must be positive(kph). Please check that.'}
}
else {'Error : [V_outflow] must be positive(kph). Please check that.'}
}
else {'Error : [V_inflow] must be positive(kph). Please check that.'}
}
else {'Error : [V_main] must be positive(kph). Please check that.'}
}
else {'Error : [N_ramp] must be 1 or 2. Please check that.'}
}
else {'Error : [N] must be >= 1. Please check that.'}
}
else {'Error : [free_speed_ramp] must be positive(kph). Please check that.'}
}
else {'Error : [free_speed] must be positive(kph). Please check that.'}
}
#' @param free_speed_ramp Free speed of ramp(link) road(kph).
#' @param N Total number of main lanes(one-way). It must be 2 or more.
#' @param N_ramp Number of ramp road. Choose one from : \code{1}, \code{2}
#' @param V_main Traffic volume of main road(pcph).
#' @param V_inflow Inflow traffic volume of influenced area(pcph).
#' @param V_outflow Outflow traffic volume of influenced area(pcph).
#' @param V_ramp Traffic volume of ramp road(pcph).
#' @keywords expressway ramp junction analyze determination
#' @export appl_expwy_rpjt \code{'Possible'}, \code{'Impossible'}
#' @examples
appl_expwy_rpjt <- function(free_speed = NULL, free_speed_ramp = NULL, N = NULL, N_ramp = NULL, V_main = NULL, V_inflow = NULL, V_outflow = NULL, V_ramp = NULL){
if (free_speed >= 0){
if (free_speed_ramp >= 0){
if (N >= 1){
if (N_ramp == 1 | N_ramp == 2){
if (V_main >= 0){
if (V_inflow >= 0){
if (V_outflow >= 0){
if (V_ramp >= 0){
capa_main <- capa_expwy_rpjt(free_speed = free_speed, N = N, output = 'main')
capa_inflow <- capa_expwy_rpjt(free_speed = free_speed, N = N, output = 'influence_inflow')
capa_outflow <- capa_expwy_rpjt(free_speed = free_speed, N = N, output = 'influence_outflow')
capa_ramp <- capa_expwy_rpjt_rp(free_speed_ramp = free_speed_ramp, N_ramp = N_ramp)
if (V_main <= capa_main){
if (V_inflow <= capa_inflow){
if (V_outflow <= capa_outflow){
if (V_ramp <= capa_ramp){'Possible'}
else {'Impossible'}
}
else {'Impossible'}
}
else {'Impossible'}
}
else {'Impossible'}
}
else {'Error : [V_ramp] must be positive(kph). Please check that.'}
}
else {'Error : [V_outflow] must be positive(kph). Please check that.'}
}
else {'Error : [V_inflow] must be positive(kph). Please check that.'}
}
else {'Error : [V_main] must be positive(kph). Please check that.'}
}
else {'Error : [N_ramp] must be 1 or 2. Please check that.'}
}
else {'Error : [N] must be >= 1. Please check that.'}
}
else {'Error : [free_speed_ramp] must be positive(kph). Please check that.'}
}
else {'Error : [free_speed] must be positive(kph). Please check that.'}
}
appl_expwy_rpjt(free_speed = 83, free_speed_ramp = 63, N = 4, N_ramp = 1, V_main = 3892, V_inflow = 4221, V_outflow = 1738, V_ramp = 1822)
#' @param N Number of main lane. Choose one from: \code{2}, \code{3}, \code{4}.
#' @param type If N = 3, Choose road type from : \code{'independent'}, \code{'continuous'}
#' @param V_F Mains traffic upstream of junctions and classifications (pcph)
#' @param V_R Traffic volume on the ramp route to be analyzed(pcph).
#' @param V_u Traffic on adjacent upstream ramp(pcph).
#' @param L_u Distance to adjacent upstream ramp(m)
#' @param L_A Length of acceleration lane(m).
#' @param free_speed_ramp Free speed of ramp road(kph).
#' @export P_FM_expwy_rpjt
#' @examples
P_FM_expwy_rpjt <- function(N = NULL, type = NULL, V_F = NULL, V_R = NULL, V_u = NULL, L_u = NULL, L_A = NULL, free_speed_ramp = NULL){
if (V_F >= 0 & V_R >= 0 & V_u >= 0 & L_u >= 0 & L_A >= 0 & free_speed_ramp >= 0){
if (N == 2){pfm <- 1.00}
else if (N == 3){
if (type == 'independent'){pfm <- 0.5127 + 0.000193 * V_R}
else if (type == 'continuous'){pfm <- 0.635 - 0.000022 * (V_R + V_F) - 0.00504 * (V_u/L_u)}
else {pfm <- 'Error : [type] must be one of [independent] or [continuous]. Please check that.'}
}
else if (N == 4){pfm <- 0.094 - 0.0000203 * V_R + 0.0502 * (L_A/free_speed_ramp)}
else {pfm <- 'Error : [N] must be one of 2, 3, 4. Please check that.'}
}
else {pfm <- 'Error : [V_F], [V_R], [V_u], [L_u], [L_A], [free_speed_ramp] must be positive. Please check that.'}
pfm
}
P_FM_expwy_rpjt(N = 4, V_F = 1200, V_R = 281, V_u = 382, L_u = 320, L_A = 120, free_speed_ramp = 48)
P_FM_expwy_rpjt(N = 3, type = 'independent', V_F = 1821, V_R = 333, V_u = 482, L_u = 240, L_A = 200, free_speed_ramp = 35)
#' This function calculates influence ratio of diverging area in ramp-expressway junction.
#'    It follows <Table 4-5> in KHCM(2013), p.89.
#' @param N Number of main lane. Choose one from: \code{2}, \code{3}, \code{4}.
#' @param type If N = 3, Choose road type from : \code{'independent'}, \code{'continuous'}
#' @param V_F Mains traffic upstream of junctions and classifications (pcph)
#' @param V_R Traffic volume on the ramp route to be analyzed(pcph).
#' @param V_d Traffic on adjacent downstream ramp(pcph).
#' @param L_d Distance to adjacent downstream ramp(m)
#' @export P_FD_expwy_rpjt
#' @examples
P_FD_expwy_rpjt <- function(N = NULL, type = NULL, V_F = NULL, V_R = NULL, V_d = NULL, L_d = NULL){
if (V_F >= 0 & V_R >= 0 & V_d >= 0 & L_d >= 0){
if (N == 2){pfd <- 1.00}
else if (N == 3){
if (type == 'independent'){pfd <- 0.609 - 0.0000004 * V_F - 0.00015 * V_R}
else if (type == 'continuous'){pfd <- 0.7960 - 0.0000758 * V_F + 0.0259 * (V_d/L_d)}
else {pfd <- 'Error : [type] must be one of [independent] or [continuous]. Please check that.'}
}
else if (N == 4){pfd <- 0.453}
else {pfd <- 'Error : [N] must be one of 2, 3, 4. Please check that.'}
}
else {pfd <- 'Error : [V_F], [V_R], [V_d], [L_d] must be positive. Please check that.'}
pfd
}
P_FD_expwy_rpjt(N = 2, V_F = 2184, V_R = 382, V_d = 593, L_d = 288)
P_FD_expwy_rpjt(N = 4, V_F = 2184, V_R = 382, V_d = 593, L_d = 288)
P_FD_expwy_rpjt(N = 3, type = 'continuous', V_F = 1893, V_R = 942, V_d = 392, L_d = 392)
#' @param V_F Mains traffic upstream of junctions and classifications (pcph)
#' @param V_R Traffic volume on the ramp route to be analyzed(pcph).
#' @param V_u Traffic on adjacent upstream ramp(pcph).
#' @param V_d Traffic on adjacent downstream ramp(pcph).
#' @param L_u Distance to adjacent upstream ramp(m)
#' @param L_d Distance to adjacent downstream ramp(m)
#' @param L_A Length of acceleration lane(m).
#' @param free_speed_ramp Free speed of ramp road(kph).
#' @export V_12_expwy_rpjt
#' @examples
V_12_expwy_rpjt <- function(area = NULL, N = NULL, type = NULL, V_F = NULL, V_R = NULL, V_u = NULL, V_d = NULL, L_u = NULL, L_d = NULL, L_A = NULL, free_speed_ramp = NULL){
if (area == 'merging'){
P_FM <- P_FM_expwy_rpjt(N = N, type = type, V_F = V_F, V_R = V_R, V_u = V_u, L_u = L_u, L_A = L_A, free_speed_ramp = free_speed_ramp)
if (is.numeric(P_FM) == TRUE){v12 <- V_F * P_FM}
else {v12 <- P_FM}
}
else if (area == 'diverging'){
P_FD <- P_FD_expwy_rpjt(N = N, type = type, V_F = V_F, V_R = V_R, V_d = V_d, L_d = L_d)
if (is.numeric(P_FD) == TRUE){v12 <- V_R + (V_F - V_R) * P_FD}
else {v12 <- P_FD}
}
else {v12 <- 'Error : [area] must be one of [merging] or [diverging]. Please check that.'}
v12
}
V_12_expwy_rpjt(area = 'merging', N = 3, type = 'independent', V_F = 938, V_R = 281, V_u = 382, L_u = 183, L_A = 100, free_speed = 48)
V_12_expwy_rpjt(area = 'diverging', N = 4, V_F = 1247, V_R = 481, V_d = 301, L_d = 120)
#' @param N Number of main lane. Choose one from: \code{2}, \code{3}, \code{4}.
#' @param type If N = 3, Choose road type from : \code{'independent'}, \code{'continuous'}
#' @param V_F Mains traffic upstream of junctions and classifications (pcph)
#' @param V_R Traffic volume on the ramp route to be analyzed(pcph).
#' @param V_u Traffic on adjacent upstream ramp(pcph).
#' @param L_u Distance to adjacent upstream ramp(m)
#' @param L_A Length of acceleration lane(m).
#' @param free_speed_ramp Free speed of ramp road(kph).
#' @export D_MR_expwy_rpjt
#' @examples
D_MR_expwy_rpjt <- function(N = NULL, type = NULL, V_F = NULL, V_R = NULL, V_u = NULL, L_u = NULL, L_A = NULL, free_speed_ramp = NULL){
V_12 <- V_12_expwy_rpjt(area = 'merging', N = N, type = type, V_F = V_F, V_R = V_R, V_u = V_u, V_d = V_d, L_u = L_u, L_d = L_d, L_A = L_A, free_speed_ramp = free_speed_ramp)
if (is.numeric(V_12) == TRUE){V_12 <- 0.2048 + 0.003185 * V_R + 0.005989 * V_12 - 0.00101 * L_A}
else {D_MR <- V_12}
V_12
}
D_MR_expwy_rpjt(N = 2, V_F = 1932, V_R = 291, V_u = 284, L_u = 135, L_A = 100, free_speed_ramp = 52)
D_DR_expwy_rpjt(N = 3, type = 'continuous', V_F = 1932, V_R = 291, V_d = 291, L_d = 120, L_D = 100)
#' @param N Number of main lane. Choose one from: \code{2}, \code{3}, \code{4}.
#' @param type If N = 3, Choose road type from : \code{'independent'}, \code{'continuous'}
#' @param V_F Mains traffic upstream of junctions and classifications (pcph)
#' @param V_R Traffic volume on the ramp route to be analyzed(pcph).
#' @param V_d Traffic on adjacent downstream ramp(pcph).
#' @param L_d Distance to adjacent downstream ramp(m).
#' @param L_D Length of deceleration lane(m).
#' @export D_DR_expwy_rpjt
#' @examples
#'
D_DR_expwy_rpjt <- function(N = NULL, type = NULL, V_F = NULL, V_R = NULL, V_d = NULL, L_d = NULL, L_D = NULL){
V_12 <- V_12_expwy_rpjt(area = 'diverging', N = N, type = type, V_F = V_F, V_R = V_R, V_u = V_u, V_d = V_d, L_u = L_u, L_d = L_d, L_A = L_A, free_speed_ramp = free_speed_ramp)
if (is.numeric(V_12) == TRUE){D_DR <- 0.5108 + 0.00589 * V_12 - 0.0043 * L_D}
else {D_DR <- V_12}
D_DR
}
D_DR_expwy_rpjt(N = 3, type = 'continuous', V_F = 1932, V_R = 291, V_d = 291, L_d = 120, L_D = 100)
