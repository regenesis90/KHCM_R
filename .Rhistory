else if (si_left == 'unprotected'){e1 <- (2200/(V_O * P)) + (2200 * (1 - g_c_ratio) * V_O)/((2200 * N - V_O) * V_L)}
else {e1 <- 'Error : [si_left] must be one of [two-way-protection], [direct-left], [unprotected]. Please check that.'}
}
else if (N_left == 2){
if (si_left == 'two-way-protection'){e1 <- 1.05}
else if (si_left == 'direct-left'){e1 <- 1.05}
else {e1 <- 'Error : [si_left] must be one of [two-way-protection], [direct-left], [unprotected]. Please check that.'}
}
else {e1 <- 'Error : [N_left] must be one of 1, 2. Please check that.'}
}
else if (type_left == 'public'){
if (N_left == 1){
if (si_left == 'direct-left'){e1 <- 1.00}
else if (si_left == 'unprotected'){e1 <- 1.02}
else {e1 <- 'Error : [si_left] must be one of [two-way-protection], [direct-left], [unprotected]. Please check that.'}
}
else if (N_left == 2){
if (si_left == 'direct-left'){e1 <- (2200/(V_O * P)) + (1/V_L) * (((2200 * (1 - g_c_ratio) * V_O) / (2200 * N - V_O)) - (3600 * V_TH / (C * N * V_L)))}
else {e1 <- 'Error : [si_left] must be one of [two-way-protection], [direct-left], [unprotected]. Please check that.'}
}
else {e1 <- 'Error : [N_left] must be one of 1, 2. Please check that.'}
}
else {e1 <- 'Error : [type_left] must be one of [dedicated], [public]. Please check that.'}
}
else {e1 <- 'Error : [N] must be positive integer. Please check that.'}
}
else {e1 <- 'Error : [g_c_ratio] must be > 0 and < 1. Please check that.'}
}
else {e1 <- 'Error : [C] must be positive(sec). Please check that.'}
}
else {e1 <- 'Error : [V_O], [V_L], [V_TH] must be positive(vph). Please check that.'}
e1
}
E_1_si(type_left = 'dedicated', N_left = 2, si_left = 'direct-left', V_O = 100, V_L = 111, V_TH = 300, C = 120, g_c_ratio = 0.25)
E_1_si(type_left = 'dedicated', N_left = 2, N = 2, si_left = 'direct-left', V_O = 100, V_L = 111, V_TH = 300, C = 120, g_c_ratio = 0.25)
#'     the effect of the curve radius of the left turn trajectory,
#'     and the effect of the U-turn are comprehensively considered.
#'     This function follows <Formula 8-6> in KHCM(2013), p.227.
#' @param E_1 Influence of left turn itself according to the number of left turn lanes. See \code{\link{E_1_si}}
#' @param E_p Influence of curve radius on left turn trajectory. See \code{\link{E_P_si}}
#' @param E_u Influence of u-tern. See \code{\link{E_U_si}}
#' @keywords total straight-line conversion factor left turn signalized intersection
#' @seealso \code{\link{E_1_si}}, \code{\link{E_P_si}}, \code{\link{E_U_si}}
#' @export E_L_si Comprehensive straight-line conversion factor for left-turning lanes
#' @examples
E_L_si <- function(E_1 = NULL, E_p = NULL, E_u = NULL){
if (E_1 > 0 & E_p >= 0 & E_u >= 0){el <- E_1 + E_p + E_u}
else {el <- 'Error : [E_1], [E_p], [E_u] must be positive. Please check that.'}
el
}
#' Straight Conversion Factor by Left Turn Curve Radius at Signalized Intersection
#'
#' Straight conversion factor by left turn curve radius at signalized intersection.
#'     When turning left, the saturation traffic flow rate changes according to the radius of the curve.
#'     This function follows <Table 8-9> in KHCM(2013), p.228.
#' @param radius Left turn curve radius(m)
#' @keywords
#' @export E_p Straight conversion factor by left turn curve radius
#' @examples
#' E_p(8.2)
E_p <- function(radius = NULL){
if (radius >= 0 & radius <= 9){e <- 1.14}
else if (radius > 9 & radius <= 12){e <- 1.11}
else if (radius > 12 & radius <= 15){e <- 1.09}
else if (radius > 15 & radius <= 18){e <- 1.06}
else if (radius > 18 & radius <= 20){e <- 1.05}
else if (radius > 20){e <- 1.00}
else {e <- 'Error : [radius] must be positive(m). Please check that.'}
e
}
E_p_si(radius = 8.22)
#' Straight Conversion Factor by Left Turn Curve Radius at Signalized Intersection
#'
#' Straight conversion factor by left turn curve radius at signalized intersection.
#'     When turning left, the saturation traffic flow rate changes according to the radius of the curve.
#'     This function follows <Table 8-9> in KHCM(2013), p.228.
#' @param radius Left turn curve radius(m)
#' @keywords
#' @export E_p_si Straight conversion factor by left turn curve radius
#' @examples
#' E_p_si(8.2)
E_p_si <- function(radius = NULL){
if (radius >= 0 & radius <= 9){e <- 1.14}
else if (radius > 9 & radius <= 12){e <- 1.11}
else if (radius > 12 & radius <= 15){e <- 1.09}
else if (radius > 15 & radius <= 18){e <- 1.06}
else if (radius > 18 & radius <= 20){e <- 1.05}
else if (radius > 20){e <- 1.00}
else {e <- 'Error : [radius] must be positive(m). Please check that.'}
e
}
E_p_si(radius = 8.22)
#' @keywords straight conversion factor left turn u tern ratio signalized intersection
#' @seealso \code{\link{E_L_si}}
#' @details
#'     * The ratio of U-turns in the left-turning lane affects the left-turning saturation flow rate.
#'     * The traffic volume of the U-turn itself is excluded from the analysis because it proceeds at a different signal than other moving flows and it does not affect the signal time.
#'     * Use the ratio of U-turn traffic to total uncorrected left turn and U-turn traffic.
#' @export E_u_si Forward conversion factor of left turn by U-turn %
#' @examples
#' E_u_si(1, 32)
#' E_u_si(2, 42.5)
E_u_si <- function(N_left = NULL, u_ratio = NULL){
if (N_left == 1){
if (u_ratio == 0){e <- 1.00}
else if (u_ratio > 0 & u_ratio < 10){e <- 1.00 + (0.21/10) * (u_ratio - 0)}
else if (u_ratio == 10){e <- 1.21}
else if (u_ratio > 10 & u_ratio < 20){e <- 1.21 + (0.18/10) * (u_ratio - 10)}
else if (u_ratio == 20){e <- 1.39}
else if (u_ratio > 20 & u_ratio < 30){e <- 1.39 + (0.25/10) * (u_ratio - 20)}
else if (u_ratio == 30){e <- 1.64}
else if (u_ratio > 30 & u_ratio < 40){e <- 1.64 + (0.33/10) * (u_ratio - 30)}
else if (u_ratio == 40){e <- 1.97}
else if (u_ratio > 40 & u_ratio < 50){e <- 1.97 + (0.58/10) * (u_ratio - 40)}
else if (u_ratio == 50){e <- 2.55}
else if (u_ratio > 50 & u_ratio < 60){e <- 2.55 + (0.70/10) * (u_ratio - 50)}
else if (u_ratio == 60){e <- 3.25}
else if (u_ratio > 60 & u_ratio <= 100){e <- 2.55 + (0.70/10) * (u_ratio - 50)}
else {e <- 'Error : [u_ratio] must be >= 0 and <= 100(%). Please check that.'}
}
else if (N_left == 2){
if (u_ratio == 0){e <- 1.00}
else if (u_ratio > 0 & u_ratio < 10){e <- 1.00 + (0.17/10) * (u_ratio - 0)}
else if (u_ratio == 10){e <- 1.17}
else if (u_ratio > 10 & u_ratio < 20){e <- 1.17 + (0.13/10) * (u_ratio - 10)}
else if (u_ratio == 20){e <- 1.30}
else if (u_ratio > 20 & u_ratio < 30){e <- 1.30 + (0.18/10) * (u_ratio - 20)}
else if (u_ratio == 30){e <- 1.48}
else if (u_ratio > 30 & u_ratio <= 100){e <- 1.30 + (0.18/10) * (u_ratio - 20)}
else {e <- 'Error : [u_ratio] must be >= 0 and <= 100(%). Please check that.'}
}
else {e <- 'Error : [N_left] must be one of 1, 2. Please check that.'}
e
}
E_u_si(N_left = 1, u_ratio = 32)
E_u_si(N_left = 2, u_ratio = 11.4)
#' @seealso \code{\link{L_H_si}}
#' @details
#'     * There are often entrances and exits on the back road near the stop line at the signal intersection.
#'     * Vehicles entering and exiting through these roads impede the flow of main road traffic.
#'     * Therefore, as the traffic volume increases, the saturation traffic flow rate of the main line decreases.
#'     * This interruption time is an incremental time compared to the saturation head time of the right turn,
#'     and it is considered that there is no effect on entry and exit routes of 60m or more from the stop line.
#' @export L_dw_si Loss time per hour due to in and out of the back road (seconds)
#' @examples
#' L_dw_si(V_en = 800, V_ex = 732)
L_dw_si <- function(V_en = NULL, V_ex = NULL){
if (V_en >= 0 & V_ex >= 0){l <- 0.9 * V_en + 1.4 * V_ex}
else {l <- 'Error : [V_en], [V_ex] must be positive(vph). Please check that.'}
l
}
#' @seealso \code{\link{L_bb_si}}
#' @details
#'     Details of Bus Stop location:
#'     - \code{\link{bus_pax = 'small'}} : Many bus users. Markets, department stores, bus terminals, transfer points by major train stations, etc.
#'     - \code{\link{bus_pax = 'middle'}} : Medium for bus users. General business districts, commercial districts, around subway stations, etc.
#'     - \code{\link{bus_pax = 'large'}}: Few bus users. general residential area, etc.
#' @export T_b_si Saturation head time increment according to one bus stop (T_b, sec)
#' @examples
#' T_b_si(bus_stop_loc = 'driving_lane', bus_pax = 'middle')
#' T_b_si(bus_stop_loc = 'separated')
T_b_si <- function(bus_stop_loc = NULL, bus_pax = NULL){
if (bus_stop_loc == 'driving_lane'){
if (bus_pax == 'small'){t <- 10.8}
else if (bus_pax == 'middle'){t <- 15.3}
else if (bus_pax == 'large'){t <- 22.8}
else {t <- 'Error : [bus_pax] must be one of [small], [middle], [large]. Please check that.'}
}
else if (bus_stop_loc == 'separated'){t <- 1.4}
else {t <- 'Error : [bus_stop_loc] must be one of [driving_lane], [separated]. Please check that.'}
t
}
T_b_si(bus_stop_loc = 'driving_lane', bus_pax = 'middle')
#' @keywords
#' @seealso \code{\link{T_b_si}}, \code{\link{L_H_si}}
#' @details
#'     * Disruption of flow due to bus stops at a bus stop is affected by the number of stopped buses, stopping time, boarding and disembarking activities, and the location of the bus stop.
#'     * Bus stop obstruction applies only to the lane where bus stopping activity takes place, and there is no effect if the number of bus stops per hour is less than 10.
#'     * The location of the bus stop refers to the distance (m) from the stop line to the bus stop, and if the distance is more than 75 m, there is no obstruction at the bus stop.
#' @export L_bb_si Time lost per hour due to bus stop (seconds)
#' @examples
#' L_bb_si(T_b = 10.8, l = 30, V_b = 12)
#' L_bb_si(1.4, 15, 15)
L_bb_si <- function(T_b = NULL, l = NULL, V_b = NULL){
if (T_b >= 0){
if (V_b >= 0){
if (l >= 75){
l_b <- 0
lb <- T_b * l_b * V_b}
else if (l > 0 & l < 75){
l_b <- (75 - l)/75
lb <- T_b * l_b * V_b}
else {lb <- 'Error : [l] must be positive(m). Please check that.'}
}
else {lb <- 'Error : [V_b] must be positive. Please check that.'}
}
else {lb <- 'Error : [T_b] must be >= 0(sec). Please check that.'}
lb
}
L_bb_si(T_b = 10.8, l = 30, V_b = 12)
#'     and the saturation traffic flow rate will decrease.
#'     This effect only occurs within 75 m of the stop line.
#'     This function follows <Formula 8-9> in KHCM(2013), p.231.
#' @param street_parking Whether on-street parking is allowed. Choose one from: \code{'yes'}, \code{'no'}
#' @param v_park Parking activity per hour (vph)
#' @keywords
#' @export L_p Incremental value (seconds) of saturation head time for right turn due to parking activity
#' @examples
#' L_p(street_parking = 'allowed', v_park = 30)
#' L_p('not_allowed')
L_p <- function(street_parking = NULL, v_park){
if (street_parking == 'yes'){
if (v_park >= 0){l <- 360 + 18 * v_park}
else {l <- 'Error : [v_park] must be >= 0(vph). Please check that.'}
}
else if (street_parking == 'no'){l <- 0}
else {l <- 'Error : [street_parking] must be one of [yes], [no]. Please check that.'}
l
}
#'     and the saturation traffic flow rate will decrease.
#'     This effect only occurs within 75 m of the stop line.
#'     This function follows <Formula 8-9> in KHCM(2013), p.231.
#' @param street_parking Whether on-street parking is allowed. Choose one from: \code{'yes'}, \code{'no'}
#' @param v_park Parking activity per hour (vph)
#' @keywords
#' @export L_p Incremental value (seconds) of saturation head time for right turn due to parking activity
#' @examples
#' L_p_si(street_parking = 'yes', v_park = 30)
#' L_p_si(street_parking = 'no)
L_p_si <- function(street_parking = NULL, v_park){
if (street_parking == 'yes'){
if (v_park >= 0){l <- 360 + 18 * v_park}
else {l <- 'Error : [v_park] must be >= 0(vph). Please check that.'}
}
else if (street_parking == 'no'){l <- 0}
else {l <- 'Error : [street_parking] must be one of [yes], [no]. Please check that.'}
l
}
L_p_si(street_parking = 'yes', v_park = 30)
#'
#' Saturated traffic flow rate for right turns at signal intersections(pcphgpl).
#'     Although there are some differences depending on the radius of the right-turn curve,
#'     the general value of the saturated traffic flow rate
#'     in the free right-turn state at general intersections of urban roads is 1900 pcphgpl.
#'     It follows a definition in KHCM(2013), p.232.
#' @keywords saturated traffic flow rate two-point diamond interchange
#' @export S_R0_si 1900
#' @example
#' S_R0_si()
S_R0_si <- function(){
1900
}
#' @param L_H Roadside friction (sec) due to entry and exit of the back road, bus stop, and on-street parking, See \code{\link{L_H_si}}
#' @param N Number of lanes that can go straight
#' @keywords conversion coefficient public right turn lane signalized intersection
#' @seealso \code{\link{f_c_si}}, \code{\link{V_R_si}}, \code{\link{L_H_si}}, \code{\link{case_si}}
#' @details
#'     - In case of \code{dowry == 'no'} : Use the stop line for straight and right turns as in a public right-turn lane that has not been bridged, and after turning right, the pedestrian crossing signal at the crosswalk at the intersection temporarily blocks the right turn. The straight-through conversion factor when the straight-line arriving in front of the first right-turning vehicle is released
#'     - In case of \code{dowry == 'yes'} : This is a case in which there is no crosswalk on the crossroads in the public lane that is bridged, or even if there is a crosswalk, it is connected to a traffic island, so that the right-turning vehicle is hardly obstructed by pedestrians after turning right.
#'     - Although it is a rare case, if a crosswalk is encountered after a right turn, even if it is bridged, it is considered not to have been bridged. The straight-line conversion factor is 1.0.
#' @export E_R_si
#' @examples
E_R_si <- function(case = NULL, dowry = NULL, V_R = NULL, V_TH = NULL, N_ped = NULL, G_p = NULL, C = NULL, L_H = NULL, N = NULL){
if (dowry == 'yes'){e <- 1.16 + L_H /(1.63 * V_R)}
else if (dowry == 'no'){
if (case == 'case1' | case == 'case2' | case == 'case3' | case == 'case4' | case == 'case6'){
N_T <- N
e <- 1.16 + (2200/V_R) * ((f_c * G_p / C) + (L_H / 3600) - ((1.63 * V_TH)/(C * N_T * V_R)))}
else if (case == 'case5'){
N_T <- N - 1
e <- 1.16 + (2200/V_R) * ((f_c * G_p / C) + (L_H / 3600) - ((1.63 * V_TH)/(C * N_T * V_R)))}
else {e <- 'Error : [case] must be one of [case1], [case2], [case3], [case4], [case5], [case6]. Please check that.'}
}
else {e <- 'Error : [dowry] must be one of [yes], [no]. Please check that.'}
e
}
E_R_si(case = 'case1', dowry = 'yes', V_R = 101, V_TH = 300, N_ped = 232, G_p = 80, C = 240, L_H = 34, N = 4)
#' @param case Case of signalized intersection. Choose one from: \code{'case4'}, \code{'case5'}, \code{'case6'}. See \code{\link{case_si}}
#' @param V_L Left Turn Traffic Volume(vph)
#' @param V_TH Straight-through traffic (vph)
#' @param C Signal cycle(seconds)
#' @param N Total number of access lanes (excluding dedicated left-turn lanes).
#' @keywords traffic going straight left turn public lane signalized intersection
#' @seealso \code{\link{lane_group_si}}
#' @export V_LF_si
#' @examples
#' V_LF_si(case = 'case4', V_L = 423, V_TH = 923, C = 76, N = 4)
V_LF_si <- function(case = NULL, V_L = NULL, V_TH = NULL, C = NULL, N = NULL){
if (V_L >= 0 & V_TH >= 0){
if (C > 0){
if (N >= 1){
if (case == 'case4' | case == 'case6'){vlf <- 3600 * V_TH / (C * N * V_L)}
else if (case == 'case5'){vlf <- 7200 * V_TH / (C * (N - 1) * V_L)
}
else {vlf <- 'Error : [case] must be one of [case4], [case5], [case6]. Please check that.'}
}
else {vlf <- 'Error : [N] must be positive integer. Please check that.'}
}
else {vlf <- 'Error : [C] must be positive(sec). Please check that.'}
}
else {vlf <- 'Error : [V_L], [V_TH] must be positive(vph). Please check that.'}
}
#' @param case Case of signalized intersection. Choose one from: \code{'case4'}, \code{'case5'}, \code{'case6'}. See \code{\link{case_si}}
#' @param V_L Left Turn Traffic Volume(vph)
#' @param V_TH Straight-through traffic (vph)
#' @param C Signal cycle(seconds)
#' @param N Total number of access lanes (excluding dedicated left-turn lanes).
#' @keywords traffic going straight left turn public lane signalized intersection
#' @seealso \code{\link{lane_group_si}}
#' @export V_LF_si
#' @examples
#' V_LF_si(case = 'case4', V_L = 423, V_TH = 923, C = 76, N = 4)
V_LF_si <- function(case = NULL, V_L = NULL, V_TH = NULL, C = NULL, N = NULL){
if (V_L >= 0 & V_TH >= 0){
if (C > 0){
if (N >= 1){
if (case == 'case4' | case == 'case6'){vlf <- 3600 * V_TH / (C * N * V_L)}
else if (case == 'case5'){vlf <- 7200 * V_TH / (C * (N - 1) * V_L)
}
else {vlf <- 'Error : [case] must be one of [case4], [case5], [case6]. Please check that.'}
}
else {vlf <- 'Error : [N] must be positive integer. Please check that.'}
}
else {vlf <- 'Error : [C] must be positive(sec). Please check that.'}
}
else {vlf <- 'Error : [V_L], [V_TH] must be positive(vph). Please check that.'}
vlf
}
V_LF_si(case = 'case5', V_L = 304, V_TH = 999, C = 194, N = 3)
#'     This function follows <Formula 8-15>, <Formula 8-16> in KHCM(2013), p.239.
#' @param case Case of signalized intersection. Choose one from: \code{'case1'}, \code{'case2'}, \code{'case3'}, \code{'case4'}, \code{'case5'}, \code{'case6'}. See \code{\link{case_si}}
#' @param V_R Right Turn Traffic Volume(vph)
#' @param V_TH Straight-through traffic (vph)
#' @param C Signal cycle(seconds)
#' @param N Total number of access lanes (excluding dedicated left-turn lanes)
#' @keywords traffic going straight right turn public lane signalized intersection
#' @export V_RF_si
#' @examples
#'V_RF_si(432, 1293, 82, 4)
V_RF_si <- function(V_R = NULL, V_TH = NULL, C = NULL, N = NULL){
if (V_L >= 0 & V_TH >= 0){
if (C > 0){
if (N >= 1){
if (case == 'case1' | case == 'case2' | case == 'case3' | case == 'case4' | case == 'case6'){vrf <- 3600 * V_TH / (C * N * V_R)}
else if (case == 'case5'){vrf <- 7200 * V_TH / (C * (N - 1) * V_R)
}
else {vrf <- 'Error : [case] must be one of [case4], [case5], [case6]. Please check that.'}
}
else {vrf <- 'Error : [N] must be positive integer. Please check that.'}
}
else {vrf <- 'Error : [C] must be positive(sec). Please check that.'}
}
else {vrf <- 'Error : [V_L], [V_TH] must be positive(vph). Please check that.'}
vrf
}
#'     This function follows <Formula 8-15>, <Formula 8-16> in KHCM(2013), p.239.
#' @param case Case of signalized intersection. Choose one from: \code{'case1'}, \code{'case2'}, \code{'case3'}, \code{'case4'}, \code{'case5'}, \code{'case6'}. See \code{\link{case_si}}
#' @param V_R Right Turn Traffic Volume(vph)
#' @param V_TH Straight-through traffic (vph)
#' @param C Signal cycle(seconds)
#' @param N Total number of access lanes (excluding dedicated left-turn lanes)
#' @keywords traffic going straight right turn public lane signalized intersection
#' @export V_RF_si
#' @examples
#'
V_RF_si <- function(case = NULL, V_R = NULL, V_TH = NULL, C = NULL, N = NULL){
if (V_L >= 0 & V_TH >= 0){
if (C > 0){
if (N >= 1){
if (case == 'case1' | case == 'case2' | case == 'case3' | case == 'case4' | case == 'case6'){vrf <- 3600 * V_TH / (C * N * V_R)}
else if (case == 'case5'){vrf <- 7200 * V_TH / (C * (N - 1) * V_R)
}
else {vrf <- 'Error : [case] must be one of [case4], [case5], [case6]. Please check that.'}
}
else {vrf <- 'Error : [N] must be positive integer. Please check that.'}
}
else {vrf <- 'Error : [C] must be positive(sec). Please check that.'}
}
else {vrf <- 'Error : [V_L], [V_TH] must be positive(vph). Please check that.'}
vrf
}
V_RF_si(case = 'case3', V_R = 432, V_TH = 1293, C = 182, N = 4)
#'     This function follows <Formula 8-15>, <Formula 8-16> in KHCM(2013), p.239.
#' @param case Case of signalized intersection. Choose one from: \code{'case1'}, \code{'case2'}, \code{'case3'}, \code{'case4'}, \code{'case5'}, \code{'case6'}. See \code{\link{case_si}}
#' @param V_R Right Turn Traffic Volume(vph)
#' @param V_TH Straight-through traffic (vph)
#' @param C Signal cycle(seconds)
#' @param N Total number of access lanes (excluding dedicated left-turn lanes)
#' @keywords traffic going straight right turn public lane signalized intersection
#' @export V_RF_si
#' @examples
#'
V_RF_si <- function(case = NULL, V_R = NULL, V_TH = NULL, C = NULL, N = NULL){
if (V_R >= 0 & V_TH >= 0){
if (C > 0){
if (N >= 1){
if (case == 'case1' | case == 'case2' | case == 'case3' | case == 'case4' | case == 'case6'){vrf <- 3600 * V_TH / (C * N * V_R)}
else if (case == 'case5'){vrf <- 7200 * V_TH / (C * (N - 1) * V_R)
}
else {vrf <- 'Error : [case] must be one of [case4], [case5], [case6]. Please check that.'}
}
else {vrf <- 'Error : [N] must be positive integer. Please check that.'}
}
else {vrf <- 'Error : [C] must be positive(sec). Please check that.'}
}
else {vrf <- 'Error : [V_L], [V_TH] must be positive(vph). Please check that.'}
vrf
}
V_RF_si(case = 'case3', V_R = 432, V_TH = 1293, C = 182, N = 4)
#' @param V_L Left Turn Traffic Volume(vph)
#' @param V_TH Straight-through traffic (vph)
#' @param E_R Forward conversion factor for right turn. See \code{\link{E_R_si}}
#' @param E_L Forward conversion factor for left turn. See \code{\link{E_L_si}}
#' @param N Total number of access lanes (excluding dedicated left-turn lanes).
#' @keywords straight-through traffic volume public left-turn signalized intersection
#' @seealso \code{\link{E_R_si}}, \code{\link{E_L_si}}, \code{\link{E_R_si}}, \code{\link{lane_group_si}}
#' @export V_STL_si
#' @examples
#' V_STL_si(case = 'case6', V_R = 323, V_L = 291, V_TH = 999, E_R = 1.2, E_L = 1.09, N = 4)
V_STL_si <- function(case = NULL, V_R = NULL, V_L = NULL, V_TH = NULL, E_R = NULL, E_L = NULL, N = NULL){
if (V_R >= 0 & V_L >= 0 & V_TH >= 0){
if (E_R > 0 & E_L > 0){
if (N >= 2){
if (case == 'case4' | case == 'case6'){vstl <- (1/N) * (V_TH + E_R * V_R - E_L * V_L * (N - 1))}
else if (case == 'case5'){vstl <- (1/N) * (2 * (V_TH + E_R * V_R) - E_L * V_L * (N - 2))}
else {vstl <- 'Error : [case] must be one of [case4], [case5], [case6]. Please check that.'}
}
else {vstl <- 'Error : [N] must be >= 2 and integer. Please check that.'}
}
else {vstl <- 'Error : [E_R], [E_L] must be positive. Please check that.'}
}
else {vstl <- 'Error : [V_R], [V_L], [V_TH] must be >= 0(vph). Please check that.'}
vstl
}
V_STL_si(case = 'case6', V_R = 323, V_L = 291, V_TH = 999, E_R = 1.2, E_L = 1.09, N = 4)
#' @param V_L Left Turn Traffic Volume(vph)
#' @param V_TH Straight-through traffic (vph)
#' @param E_R Forward conversion factor for right turn
#' @param E_L Forward conversion factor for left turn
#' @param N Total number of access lanes (excluding dedicated left-turn lanes).
#' @keywords straight-through traffic volume public left-turn signalized intersection
#' @seealso \code{\link{E_R_si}}, \code{\link{E_L_si}}, \code{\link{lane_group_si}}
#' @export V_STR_si
#' @examples
#' V_STR_si(92, 103, 763, 1.3, 2.123, 5)
V_STR_si <- function(V_R = NULL, V_L = NULL, V_TH = NULL, E_R = NULL, E_L = NULL, N = NULL){
if (V_R >= 0 & V_L >= 0 & V_TH >= 0){
if (E_R > 0 & E_L > 0){
if (N >= 2){
if (case == 'case4' | case == 'case6'){vstr <- (1/N) * (V_TH + E_R * V_R * (N - 1))}
else if (case == 'case5'){vstr <- (1/N) * (V_TH + E_L * V_L - E_R * V_R * (N - 1))}
else {vstr <- 'Error : [case] must be one of [case4], [case5], [case6]. Please check that.'}
}
else {vstr <- 'Error : [N] must be >= 2 and integer. Please check that.'}
}
else {vstr <- 'Error : [E_R], [E_L] must be positive. Please check that.'}
}
else {vstr <- 'Error : [V_R], [V_L], [V_TH] must be >= 0(vph). Please check that.'}
vstr
}
#' @param V_L Left Turn Traffic Volume(vph)
#' @param V_TH Straight-through traffic (vph)
#' @param E_R Forward conversion factor for right turn
#' @param E_L Forward conversion factor for left turn
#' @param N Total number of access lanes (excluding dedicated left-turn lanes).
#' @keywords straight-through traffic volume public left-turn signalized intersection
#' @seealso \code{\link{E_R_si}}, \code{\link{E_L_si}}, \code{\link{lane_group_si}}
#' @export V_STR_si
#' @examples
#' V_STR_si(92, 103, 763, 1.3, 2.123, 5)
V_STR_si <- function(case = NULL, V_R = NULL, V_L = NULL, V_TH = NULL, E_R = NULL, E_L = NULL, N = NULL){
if (V_R >= 0 & V_L >= 0 & V_TH >= 0){
if (E_R > 0 & E_L > 0){
if (N >= 2){
if (case == 'case4' | case == 'case6'){vstr <- (1/N) * (V_TH + E_R * V_R * (N - 1))}
else if (case == 'case5'){vstr <- (1/N) * (V_TH + E_L * V_L - E_R * V_R * (N - 1))}
else {vstr <- 'Error : [case] must be one of [case4], [case5], [case6]. Please check that.'}
}
else {vstr <- 'Error : [N] must be >= 2 and integer. Please check that.'}
}
else {vstr <- 'Error : [E_R], [E_L] must be positive. Please check that.'}
}
else {vstr <- 'Error : [V_R], [V_L], [V_TH] must be >= 0(vph). Please check that.'}
vstr
}
V_STR_si(case = 'case3', V_R = 92, V_L = 103, V_TH = 763, E_R = 1.3, E_L = 2.123, N = 5)
#' @param V_L Left Turn Traffic Volume(vph)
#' @param V_TH Straight-through traffic (vph)
#' @param E_R Forward conversion factor for right turn
#' @param E_L Forward conversion factor for left turn
#' @param N Total number of access lanes (excluding dedicated left-turn lanes).
#' @keywords straight-through traffic volume public left-turn signalized intersection
#' @seealso \code{\link{E_R_si}}, \code{\link{E_L_si}}, \code{\link{lane_group_si}}
#' @export V_STR_si
#' @examples
#' V_STR_si(92, 103, 763, 1.3, 2.123, 5)
V_STR_si <- function(case = NULL, V_R = NULL, V_L = NULL, V_TH = NULL, E_R = NULL, E_L = NULL, N = NULL){
if (V_R >= 0 & V_L >= 0 & V_TH >= 0){
if (E_R > 0 & E_L > 0){
if (N >= 2){
if (case == 'case1' | case == 'case2' | case == 'case3'){vstr <- (1/N) * (V_TH + E_R * V_R * (N - 1))}
else if (case == 'case4' | case == 'case5' | case == 'case6'){vstr <- (1/N) * (V_TH + E_L * V_L - E_R * V_R * (N - 1))}
else {vstr <- 'Error : [case] must be one of [case4], [case5], [case6]. Please check that.'}
}
else {vstr <- 'Error : [N] must be >= 2 and integer. Please check that.'}
}
else {vstr <- 'Error : [E_R], [E_L] must be positive. Please check that.'}
}
else {vstr <- 'Error : [V_R], [V_L], [V_TH] must be >= 0(vph). Please check that.'}
vstr
}
V_STR_si(case = 'case4', V_R = 92, V_L = 103, V_TH = 763, E_R = 1.3, E_L = 2.123, N = 5)
