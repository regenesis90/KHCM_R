else {v <- 'Error : [v_p_i] must be positive(vph). Please check that.'}
}
else {v <- fhv}
v
}
V_i_pce(v_p_i = 1235, lane = 1, P_T = 0.3)
#' Traffic volume entering the i-direction at roundabouts (pcph).
#'     It follows <Formula 11-4> in KHCM(2013) p.500.
#' @param v_p_i i ramp traffic volume (vph)
#' @param lane Roundabout lane. Choose one from : \code{1}, \code{2}
#' @param P_T Heavy Vehicle Ratio.
#' @param P_T Heavy Vehicle Mixing Ratio
#' @export V_i_pce
#' @keywords traffic volume direction roundabout
#' @seealso \code{\link{f_hv_rab}}, \code{\link{E_T_rab}}
#' @examples
V_i_pce <- function(v_p_i = NULL, lane = NULL, P_T = NULL){
fhv <- f_hv_rab(lane = lane, P_T = lane)
if (is.numeric(fhv) == TRUE){
if (v_p_i >= 0){v <- v_p_i / fhv}
else {v <- 'Error : [v_p_i] must be positive(vph). Please check that.'}
}
else {v <- fhv}
v
}
V_i_pce(v_p_i = 1235, lane = 1, P_T = 0.3)
#'
#' Traffic volume entering the i-direction at roundabouts(pcph).
#'     It follows <Formula 11-5>, <Formula 11-6> in KHCM(2013), p.500.
#' @param right_turn_lane Is there a dedicated right-turn lane? Choose one from: \code{'yes'}, \code{'no'}
#' @param V_L i-direction left turn traffic volume(pcph)
#' @param V_T i-direction straight traffic volume(pcph)
#' @param V_R i-direction right turn traffic volume(pcph)
#' @param V_U i-direction U-turn traffic volume(pcph)
#' @export V_e_i_rab
#' @examples
V_e_i_rab <- function(right_turn_lane = NULL, V_L = NULL, V_T = NULL, V_R = NULL, V_U = NULL){
if (right_turn_lane == 'no'){
if (V_L >= 0 & V_T >= 0 & V_R >= 0 & V_U >= 0){v <- V_L + V_T + V_R + V_U}
else {v <- 'Error : [V_L], [V_T], [V_R], [V_U] must be >= 0(pcph). Please check that.'}
}
else if (right_turn_lane == 'yes'){
if (V_L >= 0 & V_T >= 0 & V_R >= 0 & V_U >= 0){v <- V_L + V_T + V_U}
else {v <- 'Error : [V_L], [V_T], [V_R], [V_U] must be >= 0(pcph). Please check that.'}
}
else {v <- 'Error : [right_turn_lane] must be one of [yes], [no]. Please check that.'}
v
}
V_e_i_rab(right_turn_lane = 'yes', V_L = 203, V_T = 492, V_R = 94, V_U = 11)
#' Saturation of i-Ramp at Roundabout
#'
#' Saturation of i-Ramp at roundabout.
#'     It follows <Formula 11-8> in KHCM(2013), p.502.
#' @param v_i i-ramp traffic volume(vph)
#' @param c_i i-ramp capacity(vph)
#' @export x_i_rab Saturation of i-ramp at roundabout
#' @examples
x_i_rab <- function(v_i = NULL, c_i = NULL){
if (v_i >= 0 & c_i > 0){x <- v_i/c_i}
else {x <- 'Error : [v_i], [c_i] must be positive(vph). Please check that.'}
x
}
#' Saturation of i-Ramp at Roundabout
#'
#' Saturation of i-Ramp at roundabout.
#'     It follows <Formula 11-8> in KHCM(2013), p.502.
#' @param v_i i-ramp traffic volume(vph)
#' @param c_i i-ramp capacity(vph)
#' @keywords sauration roundabout
#' @export x_i_rab Saturation of i-ramp at roundabout
#' @examples
#' x_i_rab(v_i = 344, c_i = 1000)
x_i_rab <- function(v_i = NULL, c_i = NULL){
if (v_i >= 0 & c_i > 0){x <- v_i/c_i}
else {x <- 'Error : [v_i], [c_i] must be positive(vph). Please check that.'}
x
}
#' Average Delay per Vehicle at Roundabout
#'
#' Average delay per vehicle at roundabout(sec/veh).
#'     It is necessary to judge the roundabout operation efficiency.
#'     It follows <Formula 11-9> in KHCM(2013), p.503.
#' @param v Traffic volume(vph)
#' @param c Capacity(vph)
#' @param t Analysis time(1t = 15 minutes = 0.25h)
#' @export d_i_rab Average control delay per vehicle
#' @examples
d_i_rab <- function(v = NULL, c = NULL, t = NULL){
if (v >= 0 & c > 0){
if (t > 0){
if (v/c >= 1){
d <- 3600/c + 900 * t * ((v/c - 1) + ((v/c - 1)**2 + (3600/c) * (v/c) / (450 * t))**(1/2)) + 5 * v/c
}
else {
d <- 3600/c + 900 * t * ((v/c - 1) + ((v/c - 1)**2 + (3600/c) * (v/c) / (450 * t))**(1/2)) + 5 * 1
}
}
else {d <- 'Error : [t] must be positive. Please check that.'}
}
else {d <- 'Error : [v], [c] must be positive(vph). Please check that.'}
d
}
d_i_rab(v = 1234, c = 1800, t = 3)
#'
#' It is calculated using the weighted average of traffic volume
#'     for the average delay for each approach i of the roundabout.
#'     It follows <Formula 11-10>, <Formula 11-12> in KHCM(2013), p.503, 506.
#' @param d_i Series of average control delay per vehicle of the type point movement flow i(sec/veh). See \code{\link{d_i_rab}}
#' @param v_i Series of corrected traffic volume (vph) of the moving flow i of the end point
#' @keywords total average delay roundabout
#' @seealso \code{\link{d_i_rab}}, \code{\link{LOS_rab}}
#' @export d_total_rab
#' @examples
d_total_rab <- function(d_i = NULL, v_i = NULL){
dvsum <- 0
vsum <- 0
for (i in 1:length(d_i)){
dv <- d_i[i] * v_i[i]
v <- v_i[i]
vsum <- vsum + v
dvsum <- dvsum + dv
}
dvsum / vsum
}
d_total_rab(d_i = c(11.1, 3.44, 30.289), v_i = c(1200, 394, 888))
#' Conflict Traffic Volume of i-Ramp at Three-way Roundabout
#'
#' Conflict traffic volume (pcph) of approach i at three-way roundabout
#'     It follows <Table 11-7> in KHCM(2013) p.493, 505.
#' @param v_ij Traffic from ramp i to ramp j(pcph)
#' @param v_u Sum of U-turn traffic excluding U-turn traffic on ramp i(pcph)
#' @keywords conflict traffic volume three-way roundabout
#' @seealso \code{\link{V_c_NB_rab}}, \code{\link{V_c_i_5rab}}
#' @export V_c_i_3rab Conflicting traffic volume (vph) of northbound traffic flow
#' @examples
V_c_i_3rab <- function(v_ij = NULL, v_u = NULL){
if (v_ij >= 0 & v_u >= 0){v <- v_ij + v_u}
else {v <- 'Error : [v_ij], [v_u] must be positive(pcph). Please check that.'}
}
V_c_i_3rab(v_ij = 123, v_u = 44)
#' Conflict Traffic Volume of i-Ramp at Three-way Roundabout
#'
#' Conflict traffic volume (pcph) of approach i at three-way roundabout
#'     It follows <Table 11-7> in KHCM(2013) p.493, 505.
#' @param v_ij Traffic from ramp i to ramp j(pcph)
#' @param v_u Sum of U-turn traffic excluding U-turn traffic on ramp i(pcph)
#' @keywords conflict traffic volume three-way roundabout
#' @seealso \code{\link{V_c_NB_rab}}, \code{\link{V_c_i_5rab}}
#' @export V_c_i_3rab Conflicting traffic volume (vph) of northbound traffic flow
#' @examples
V_c_i_3rab <- function(v_ij = NULL, v_u = NULL){
if (v_ij >= 0 & v_u >= 0){v <- v_ij + v_u}
else {v <- 'Error : [v_ij], [v_u] must be positive(pcph). Please check that.'}
v
}
V_c_i_3rab(v_ij = 123, v_u = 44)
#' @param v_i1 Traffic from ramp i to other ramp 1(pcph)
#' @param v_i2 Traffic from ramp i to other ramp 2(pcph)
#' @param v_i3 Traffic from ramp i to other ramp 3(pcph)
#' @param v_i4 Traffic from ramp i to other ramp 4(pcph)
#' @param v_u Sum of U-turn traffic excluding U-turn traffic on ramp i(pcph)
#' @keywords conflict traffic volume five-way roundabout
#' @seealso \code{\link{V_c_NB_rab}}, \code{\link{V_c_i_3rab}}
#' @export V_c_i_5rab Conflicting traffic volume (vph)
#' @examples
#' V_c_i_5rab(v_ij = 123, v_u = 44)
V_c_i_5rab <- function(v_i1 = NULL, v_i2 = NULL, v_i3 = NULL, v_i4 = NULL, v_u = NULL){
if (v_i1 >= 0 & v_i2 >= 0 & v_i3 >= 0 & v_i4 >= 0 & v_u >= 0){v <- v_i1 + v_i2 + v_i3 + v_i4 + v_u}
else {v <- 'Error : [v_ij], [v_u] must be positive(pcph). Please check that.'}
v
}
#' @param v_i1 Traffic from ramp i to other ramp 1(pcph)
#' @param v_i2 Traffic from ramp i to other ramp 2(pcph)
#' @param v_i3 Traffic from ramp i to other ramp 3(pcph)
#' @param v_i4 Traffic from ramp i to other ramp 4(pcph)
#' @param v_u Sum of U-turn traffic excluding U-turn traffic on ramp i(pcph)
#' @keywords conflict traffic volume five-way roundabout
#' @seealso \code{\link{V_c_NB_rab}}, \code{\link{V_c_i_3rab}}
#' @export V_c_i_5rab Conflicting traffic volume (vph)
#' @examples
#' V_c_i_5rab(v_ij = 123, v_u = 44)
V_c_i_5rab <- function(v_i1 = NULL, v_i2 = NULL, v_i3 = NULL, v_i4 = NULL, v_u = NULL){
if (v_i1 >= 0 & v_i2 >= 0 & v_i3 >= 0 & v_i4 >= 0 & v_u >= 0){v <- v_i1 + v_i2 + v_i3 + v_i4 + v_u}
else {v <- 'Error : [v_i1], [v_i2], [v_i3], [v_i4], [v_u] must be positive(pcph). Please check that.'}
v
}
V_c_i_5rab(v_i1 = 132, v_i2 = 494, v_i3 = 90, v_i4 = 343, v_u = 100)
#' @param form Intersection form. Choose one from: \code{'1x1'}, \code{'2x1'}
#' @param dir1 Flow direction. Choose one from : \code{'main'}, \code{'sub'}
#' @param dir2 Flow direction. Choose one from: \code{'left'}, \code{'straight'}, \code{'right'}
#' @keywords
#' @seealso \code{\link{t_f_x_nsi}}, \code{\link{c_p_x_nsi}}
#' @details
#'     * \code{form == '1x1'} : Intersection of one-lane one-way roads on the main road and one-lane lanes on the sub-road (1×1)
#'     * \code{form == '2x1'} : Intersection of two lanes one-way on the main road and one-lane one-way on the sub-road (2×1)
#' @export t_c_x_nsi
#' @examples
t_c_x <- function(form = NULL, direction = NULL){
if (form == '1x1'){
if (dir1 == 'main'){
if (dir2 == 'left'){tcx <- 4.2}
else {tcx <- 'Error : When dir1 == main, [dir2] must be [left]. Please check that.'}
}
else if (dir1 == 'sub'){
if (dir2 == 'left'){tcx <- 4.6}
if (dir2 == 'straight'){tcx <- 4.5}
if (dir2 == 'right'){tcx <- 3.7}
}
else {tcx <- 'Error : [dir1] must be one of [main], [sub]. Please check that.'}
}
else if (form == '2x1'){
if (dir1 == 'main'){
if (dir2 == 'left'){tcx <- 4.9}
else {tcx <- 'Error : When dir1 == main, [dir2] must be [left]. Please check that.'}
}
else if (dir1 == 'sub'){
if (dir2 == 'left'){tcx <- 5.2}
else if (dir2 == 'straight'){tcx <- 5.4}
else if (dir2 == 'right'){tcx <- 4.4}
}
else {tcx <- 'Error : [dir1] must be one of [main], [sub]. Please check that.'}
}
else {tcx <- 'Error : [form] must be one of [1x1], [2x1]. Please check that.'}
tcx
}
t_c_x_nsi(form = '1x1', dir1 = 'main', dir2 = 'left')
#' @param form Intersection form. Choose one from: \code{'1x1'}, \code{'2x1'}
#' @param dir1 Flow direction. Choose one from : \code{'main'}, \code{'sub'}
#' @param dir2 Flow direction. Choose one from: \code{'left'}, \code{'straight'}, \code{'right'}
#' @keywords Critical Interval two-way stop non-signalized Unsignalized intersection
#' @seealso \code{\link{t_f_x_nsi}}, \code{\link{c_p_x_nsi}}
#' @details
#'     * \code{form == '1x1'} : Intersection of one-lane one-way roads on the main road and one-lane lanes on the sub-road (1×1)
#'     * \code{form == '2x1'} : Intersection of two lanes one-way on the main road and one-lane one-way on the sub-road (2×1)
#' @export t_c_x_nsi
#' @examples
t_c_x_nsi <- function(form = NULL, dir1 = NULL, dir2 = NULL){
if (form == '1x1'){
if (dir1 == 'main'){
if (dir2 == 'left'){tcx <- 4.2}
else {tcx <- 'Error : When dir1 == main, [dir2] must be [left]. Please check that.'}
}
else if (dir1 == 'sub'){
if (dir2 == 'left'){tcx <- 4.6}
if (dir2 == 'straight'){tcx <- 4.5}
if (dir2 == 'right'){tcx <- 3.7}
}
else {tcx <- 'Error : [dir1] must be one of [main], [sub]. Please check that.'}
}
else if (form == '2x1'){
if (dir1 == 'main'){
if (dir2 == 'left'){tcx <- 4.9}
else {tcx <- 'Error : When dir1 == main, [dir2] must be [left]. Please check that.'}
}
else if (dir1 == 'sub'){
if (dir2 == 'left'){tcx <- 5.2}
else if (dir2 == 'straight'){tcx <- 5.4}
else if (dir2 == 'right'){tcx <- 4.4}
}
else {tcx <- 'Error : [dir1] must be one of [main], [sub]. Please check that.'}
}
else {tcx <- 'Error : [form] must be one of [1x1], [2x1]. Please check that.'}
tcx
}
t_c_x_nsi(form = '1x1', dir1 = 'main', dir2 = 'left')
t_c_x_nsi(form = '2x1', dir1 = 'sub', dir2 = 'right')
#' @param form Intersection form. Choose one from: \code{'1x1'}, \code{'2x1'}
#' @param dir1 Flow direction. Choose one from : \code{'main'}, \code{'sub'}
#' @param dir2 Flow direction. Choose one from: \code{'left'}, \code{'straight'}, \code{'right'}
#' @keywords follow-up time two-way unsignalized non-signalized intersection
#' @seealso \code{\link{t_c_x_nsi}}, \code{\link{c_p_x_nsi}}
#' @details
#'     * \code{form == '1x1'} : Intersection of one-lane one-way roads on the main road and one-lane lanes on the sub-road (1×1)
#'     * \code{form == '2x1'} : Intersection of two lanes one-way on the main road and one-lane one-way on the sub-road (2×1)
#' @export t_f_x_nsi
#' @examples
t_f_x_nsi <- function(form = NULL, dir1 = NULL, dir2 = NULL){
if (form == '1x1'){
if (dir1 == 'main'){
if (dir2 == 'left'){tfx <- 2.5}
else {tfx <- 'Error : When dir1 == main, [dir2] must be [left]. Please check that.'}
}
else if (dir1 == 'sub'){
if (dir2 == 'left'){tfx <- 3.0}
if (dir2 == 'straight'){tfx <- 2.7}
if (dir2 == 'right'){tfx <- 2.8}
}
else {tfx <- 'Error : [dir1] must be one of [main], [sub]. Please check that.'}
}
else if (form == '2x1'){
if (dir1 == 'main'){
if (dir2 == 'left'){tfx <- 2.5}
else {tfx <- 'Error : When dir1 == main, [dir2] must be [left]. Please check that.'}
}
else if (dir1 == 'sub'){
if (dir2 == 'left'){tfx <- 3.0}
else if (dir2 == 'straight'){tfx <- 2.7}
else if (dir2 == 'right'){tfx <- 2.8}
}
else {tfx <- 'Error : [dir1] must be one of [main], [sub]. Please check that.'}
}
else {tfx <- 'Error : [form] must be one of [1x1], [2x1]. Please check that.'}
tfx
}
#' @param v_c Conflict flow for flow x(pcph). see \code{\link{V_c_i_nsi}}
#' @param form Intersection form. Choose one from: \code{'1x1'}, \code{'2x1'}
#' @param dir1 Flow direction. Choose one from : \code{'main'}, \code{'sub'}
#' @param dir2 Flow direction. Choose one from: \code{'left'}, \code{'straight'}, \code{'right'}
#' @seealso \code{\link{V_c_i_nsi}}, \code{\link{t_c_x_nsi}}, \code{\link{t_f_x_nsi}}
#' @keywords potential capacity per x moving flow unsignalized Intersection
#' @export capa_p_x_nsi
#' @examples
#' capa_p_x_nsi(V_c_x = 1200, t_c_x = 4.6, t_f_x = 3.0)
#' capa_p_x_nsi(832, 5.4, 2.7)
capa_p_x_nsi <- function(v_c = NULL, form = NULL, dir1 = NULL, dir2 = NULL){
if (v_c >= 0){
t_f <- t_f_x_nsi(form = form, dir1 = dir1, dir2 = dir2)
t_c <- t_c_x_nsi(form = form, dir1 = dir1, dir2 = dir2)
if (is.numeric(t_f) == TRUE & is.numeric(t_c) == TRUE){
c <- v_c * (exp(-1 * v_c * t_c / 3600))/(1 - exp(-1 * v_c * t_f / 3600))
}
else {c <- t_f}
}
else {c <- 'Error : [v_c] must be positive(pcph). Please check that.'}
c
}
capa_p_x_nsi(v_c = 942, form = '1x1', dir1 = 'sub', dir2 = 'straight')
capa_p_x_nsi(v_c = 343, form = '2x1', dir1 = 'main', dir2 = 'left')
#' Capacity Ratio According to the Demand of Each Flow at Unsignalized Intersection
#'
#' Capacity ratio according to the demand of each flow at unsignalized intersections, moving flow i.
#'     It follows <Formula 10-2> in KHCM(2013), p.468.
#' @param v Traffic volume for flow i(pcph)
#' @param c_p Potential capacity for moving flow i(pcph). See \code{\link{capa_p_x_nsi}}
#' @seealso \code{\link{capa_p_x_nsi}}
#' @keywords unsignalized intersection
#' @export x_nsi
#' @examples
x_nsi <- function(v = NULL, c_p = NULL){
if (v >= 0 & c_p > 0){x <- v/c_p}
else {x <- 'Error : [v], [c_p] must be positive(pcph). Please check that.'}
x
}
x_nsi(v = 1200, c_p = 1800)
#' Resistance Coefficient According to Disturbance Flow at Unsignalized Intersection
#'
#' Resistance coefficient according to disturbance flow at unsignalized intersection.
#'     It follows <Formula 10-3>, <Figure 10-9> in KHCM(2013), p.469.
#' @param x Capacity ratio according to the demand of each flow at unsignalized intersections, moving flow i. See \code{\link{x_nsi}}
#' @keywords resistance coefficient disturbance flow unsignalized intersection
#' @seealso \code{\link{x_nsi}}
#' @export p_nsi
#' @examples
p_nsi <- function(x = NULL){
if (x >= 0){p <- -0.04 * x**2 - 0.64 * x + 1}
else {p <- 'Error : [x] must be positive. Please check that.'}
p
}
p_nsi(x = 0.44)
#'
#' Operational delay for each moving flow x at unsignalized intersections(sec/veh).
#'     This function follows <Formula 10-5> in KHCM(2013) p.470
#' @param v Traffic flow rate for moving flow x (vph).
#' @param c_m Capacity of flow x (vph)
#' @param t t Analysis time(1t = 15 minutes = 0.25h)
#' @keywords operational delay unsignalized intersection
#' @seealso \code{\link{LOS_type2_nsi}}
#' @export d_x_nsi
#' @examples
d_x_nsi <- function(v = NULL, c_m = NULL, t = NULL){
if (v > 0 & c_m > 0){
if (t > 0){d <- 3600/c_m + 900 * t * ((v/c_m) - 1 + (((v/c_m) - 1)**2 + (3600/c_m)*(v/c_m)/(450 * t))**(1/2)) + 5}
else {d <- 'Error : [t] must be positive(15 minutes). Please check that.'}
}
else {d <- 'Error : [v], [c_m] must be positive(vph). Please check that.'}
d
}
d_x_nsi(v = 1234, c_m = 1800, t = 2)
#' @param d Average operating delay (sec/veh). See \code{\link{d_x_nsi}}
#' @keywords Level of service LOS unsignalized non-signalized two-way stop intersection
#' @seealso \code{\link{d_x_nsi}}
#' @details
#'     Considering the traffic flow characteristics of non-signaled intersections,
#'     the service level E state cannot be defined as a capacity state.
#' @export LOS_type2_nsi
#' @examples
#' LOS_type2_nsi(d = 33.2)
#' LOS_type2_nsi(18.45)
LOS_type2_nsi <- function(d = NULL){
if (d > 0 & d <= 10){los <- 'A'}
else if (d > 10 & d <= 15){los <- 'B'}
else if (d > 15 & d <= 25){los <- 'C'}
else if (d > 25 & d <= 35){los <- 'D'}
else if (d > 35 & d <= 50){los <- 'E'}
else if (d > 50){los <- 'F'}
else {los <- 'Error : [d] must be positive(sec/veh). Please check that.'}
los
}
#' Number of Conflicts Per Hour at Uncontrolled Unsignalized Intersections
#'
#' Number of conflicts per hour at uncontrolled intersections (type 1) among unsignalized intersections(times/h).
#'     This function follows <Formula 10-6>, <Table 10-3> in KHCM(2013), p.473.
#' @param r Traffic volume ratio of main road(%)
#' @param v Total intersection traffic volume(vph)
#' @keywords conflicts number uncontrolled unsignalized intersection
#' @seealso \code{\link{LOS_type1_nsi}}
#' @export conflict_nsi
#' @examples
conflict_nsi <- function(r = NULL, v = NULL){
if (r >= 0 & r < 60){
a <- 0.1508
if (v > 0){y <- a * v}
else {y <- 'Error : [v] must be positive(vph). Please check that.'}
}
else if (r >= 60 & r < 70){
a <- 0.1487
if (v > 0){y <- a * v}
else {y <- 'Error : [v] must be positive(vph). Please check that.'}
}
else if (r >= 70 & r <= 100){
a <- 0.1426
if (v > 0){y <- a * v}
else {y <- 'Error : [v] must be positive(vph). Please check that.'}
}
else {y <- 'Error : [r] must be >= 0 and <= 100(%). Please check that.'}
y
}
conflict_nsi(r = 0.632, v = 2034)
conflict_nsi(r = 0.632, v = 346)
#'     This function follows <Table 10-4> in KHCM(2013) p.473.
#' @param r Traffic volume ratio of main road(%)
#' @param v Total intersection traffic volume(vph)
#' @keywords Level of Service LOS uncontrolled unsignalized intersection
#' @details
#'     * Considering the traffic flow characteristics of unsignalized intersections, the service level E state cannot be defined as a capacity state.
#'     * The total traffic volume at the intersection is the sum of the traffic entering the intersection in all directions.
#' @seealso \code{\link{conflict_nsi}}
#' @export LOS_type1_nsi
#' @examples
LOS_type1_nsi <- function(r = NULL, v = NULL){
if (r >= 0 & r < 60){
if (v >= 0 & v <= 320){los <- 'A'}
else if (v > 320 & v <= 640){los <- 'B'}
else if (v > 640 & v <= 960){los <- 'C'}
else if (v > 960 & v <= 1280){los <- 'D'}
else if (v > 1280 & v <= 1600){los <- 'E'}
else if (v > 1600){los <- 'F'}
else {los <- 'Error : [v] must be positive(vph). Please check that.'}
}
else if (r >= 60 & r < 70){
if (v >= 0 & v <= 360){los <- 'A'}
else if (v > 360 & v <= 720){los <- 'B'}
else if (v > 720 & v <= 1080){los <- 'C'}
else if (v > 1080 & v <= 1440){los <- 'D'}
else if (v > 1440 & v <= 1800){los <- 'E'}
else if (v > 1800){los <- 'F'}
else {los <- 'Error : [v] must be positive(vph). Please check that.'}
}
else if (r >= 70 & r <= 100){
if (v >= 0 & v <= 400){los <- 'A'}
else if (v > 400 & v <= 800){los <- 'B'}
else if (v > 800 & v <= 1200){los <- 'C'}
else if (v > 1200 & v <= 1600){los <- 'D'}
else if (v > 1600 & v <= 2000){los <- 'E'}
else if (v > 2000){los <- 'F'}
else {los <- 'Error : [v] must be positive(vph). Please check that.'}
}
else {los <- 'Error : [r] must be >= 0 and <= 100(%). Please check that.'}
los
}
#'     This function follows <Table 10-4> in KHCM(2013) p.473.
#' @param r Traffic volume ratio of main road(%)
#' @param v Total intersection traffic volume(vph)
#' @keywords Level of Service LOS uncontrolled unsignalized intersection
#' @details
#'     * Considering the traffic flow characteristics of unsignalized intersections, the service level E state cannot be defined as a capacity state.
#'     * The total traffic volume at the intersection is the sum of the traffic entering the intersection in all directions.
#' @seealso \code{\link{conflict_nsi}}
#' @export LOS_type1_nsi
#' @examples
LOS_type1_nsi <- function(r = NULL, v = NULL){
if (r >= 0 & r < 60){
if (v >= 0 & v <= 320){los <- 'A'}
else if (v > 320 & v <= 640){los <- 'B'}
else if (v > 640 & v <= 960){los <- 'C'}
else if (v > 960 & v <= 1280){los <- 'D'}
else if (v > 1280 & v <= 1600){los <- 'E'}
else if (v > 1600){los <- 'F'}
else {los <- 'Error : [v] must be positive(vph). Please check that.'}
}
else if (r >= 60 & r < 70){
if (v >= 0 & v <= 360){los <- 'A'}
else if (v > 360 & v <= 720){los <- 'B'}
else if (v > 720 & v <= 1080){los <- 'C'}
else if (v > 1080 & v <= 1440){los <- 'D'}
else if (v > 1440 & v <= 1800){los <- 'E'}
else if (v > 1800){los <- 'F'}
else {los <- 'Error : [v] must be positive(vph). Please check that.'}
}
else if (r >= 70 & r <= 100){
if (v >= 0 & v <= 400){los <- 'A'}
else if (v > 400 & v <= 800){los <- 'B'}
else if (v > 800 & v <= 1200){los <- 'C'}
else if (v > 1200 & v <= 1600){los <- 'D'}
else if (v > 1600 & v <= 2000){los <- 'E'}
else if (v > 2000){los <- 'F'}
else {los <- 'Error : [v] must be positive(vph). Please check that.'}
}
else {los <- 'Error : [r] must be >= 0 and <= 100(%). Please check that.'}
los
}
LOS_type1_nsi(r = 48, v = 394)
