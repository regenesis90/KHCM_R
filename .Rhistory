}
else {w <- 'Error : [valtype] must be one of [max], [min], [mean]. Please check that.'}
w
}
W_O_ped(lamppost = 3, signal_controller = 1, fireplug = 1, trash_can = 3, tree = 2, valtype = 'max')
#' Peak-converted pedestrian traffic flow rate.(person/min/m)
#'     The peak 15-minute pedestrian walking traffic volume surveyed was converted to the pedestrian traffic flow rate (person/min/m).
#'     This value is used to determine the LOS using \code{\link{LOS_road_ped}}.
#'     It follows <Formula 14-4> in KHCM(2013), p.620.
#' @param V_15 Pedestrian traffic volume during peak 15 minutes(person/15min/m)
#' @param W_E Effective pedestrian sidewalk width(m). See \code{\link{W_E_ped}}
#' @keywords peak hour converted pedestrian traffic flow rate
#' @seealso \code{\link{LOS_road_ped}}, \code{\link{W_E_ped}}
#' @export V_P_ped pedestrian traffic flow rate (person/min/m)
#' @examples
V_P_ped <- function(V_15 = NULL, W_E = NULL){
if (V_15 >= 0){
if (W_E > 0){
vp <- V_15 / (15 * W_E)
}
else {vp <- 'Error : [W_E] must be positive(m). Please check that.'}
}
else {vp <- 'Error : [V_15] must be positive(person/15min/m). Please check that.'}
vp
}
V_P_ped(V_15 = 393, W_E = 11)
V_P_ped(V_15 = 393, W_E = 3.2)
#'
#' Average pedestrian delay(seconds).
#'     It is used when analyzing the service level at signal crosswalks.
#'     It follows <Formula 14-5> in KHCM(2013), p.623.
#' @param C Signal period(seconds)
#' @param g Effective green time for pedestrians (seconds)
#' @keywords average pedestrian delay
#' @seealso \code{\link{LOS_cross_ped}}
#' @export d_p_ped Average pedestrian delay(seconds)
#' @examples
d_p_ped <- function(C = NULL, g = NULL){
if (C > 0){
if (g > 0){
d <- (C - g)**2 / (2 * C)
}
else {d <- 'Error : [g] must be positive(seconds). Please check that.'}
}
else {d <- 'Error : [C] must be positive(seconds). Please check that'}
d
}
d_p_ped(C = 120, g = 30)
#' @param L Crosswalk length (m)
#' @param S_p Average speed of pedestrians (m/s)
#' @param N_ped Pedestrians (persons) traversed in one cycle
#' @param W_E Effective crosswalk width(m). See \code{\link{W_E_ped}}
#' @keywords total crossing time pedestrian signal crosswalk
#' @seealso \code{\link{W_E_ped}}, \code{\link{T_cross_ped}}, \code{\link{LOS_cross_ped}}
#' @details 3.2 means pedestrian start-up time(seconds).
#'     It means the time until the first and last pedestrians in the preceding platoon completely enter the crosswalk.
#' @export t_ped
#' @examples
t_ped <- function(L = NULL, S_p = NULL, N_ped = NULL, W_E = NULL){
if (L > 0){
if (S_p > 0){
if (N_ped > 0){
if (W_E > 0){t <- 3.2 + (L / S_p) + (0.81 * N_ped / W_E)}
else {t <- 'Error : [W_E] must be positive(m). Please check that.'}
}
else {t <- 'Error : [N_ped] must be positive(persons). Please check that.'}
}
else {t <- 'Error : [S_p] must be positive(m/s). Please check that.'}
}
else {t <- 'Error : [L] must be positive(m). Please check that.'}
t
}
t_ped(L = 30, S_p = 3.3, N_ped = 100, W_E = 3)
#' Time-space area of pedestrians at signal crosswalks (㎡-person)
#' It follows <Formula 14-7> in KHCM(2013), p.624
#' @param L Crosswalk length (m)
#' @param S_p Average speed of pedestrians (m/s)
#' @param WALK_FDW Effective pedestrian green time at crosswalks (seconds)
#' @param W_E Effective crosswalk width(m). See \code{\link{W_E_ped}}
#' @keywords time-space area pedestrian signal crosswalk
#' @seealso \code{\link{W_E_ped}}, \code{\link{T_cross_ped}}, \code{\link{M_cross_ped}}, \code{\link{LOS_road_ped}}
#' @export TS_cross_ped
#' @examples
TS_cross_ped <- function(L = NULL, W_E = NULL, S_p = NULL, WALK_FDW = NULL){
if (L > 0){
if (W_E > 0){
if (S_p > 0){
if (WALK_FDW > 0){ts <- L * W_E * (WALK_FDW - (L / (2 * S_p)))}
else {ts <- 'Error : [WALK_FDW] must be positive(s). Please check that.'}
}
else {ts <- 'Error : [S_p] must be positive(m/s). Please check that.'}
}
else {ts <- 'Error : [W_E] must be positive(m). Please check that.'}
}
else {ts <- 'Error : [L] must be positive(m). Please check that.'}
ts
}
TS_cross_ped(L = 25, W_E = 3.3, S_p = 3, WALK_FDW = 50)
#' Total Crosswalk Occupation Time of Pedestrians at Signal Crosswalks
#'
#' Total crosswalk occupation time of pedestrians at signal crosswalks(person-second)
#'     It follows <Formula 14-8> in KHCM(2013), p.624.
#' @param V_i Number of pedestrians crossing in direction (persons)
#' @param V_o Number of pedestrians crossing opposite direction (persons)
#' @param t Total traversing time (seconds)
#' @keywords total crosswalk occupation time pedestrian signal crosswalk
#' @export T_cross_ped
#' @examples
T_cross_ped <- function(V_i = NULL, V_o = NULL, t = NULL){
if (V_i > 0 & V_o > 0 & t > 0){res <- (V_i + V_o) / t}
else {res <- 'Error : [V_i], [V_o], [t] must be positive. Please check that.'}
res
}
T_cross_ped(V_i = 132, V_o = 22, t = 40)
#'
#' Total crosswalk occupation time of pedestrians at signal crosswalks(person-second)
#'     It follows <Formula 14-8> in KHCM(2013), p.624.
#' @param V_i Number of pedestrians crossing in direction (persons)
#' @param V_o Number of pedestrians crossing opposite direction (persons)
#' @param t Total traversing time (seconds)
#' @keywords total crosswalk occupation time pedestrian signal crosswalk
#' @export T_cross_ped
#' @examples
#' T_cross_ped(V_i = 132, V_o = 22, t = 40)
T_cross_ped <- function(V_i = NULL, V_o = NULL, t = NULL){
if (V_i > 0 & V_o > 0 & t > 0){res <- (V_i + V_o) * t}
else {res <- 'Error : [V_i], [V_o], [t] must be positive. Please check that.'}
res
}
#'
#' Crosswalk occupied space per pedestrian at signal crosswalk(㎡/person).
#'     It follows <Formula 14-7> in KHCM(2013), p.624
#'     Based on this result, the service level is judged according to the value of the occupied space presented in <Table 14-1>.
#' @param TS Time-space area of pedestrians at signal crosswalks (㎡-person). See \code{\link{TS_cross_ped}}
#' @param TT Total crosswalk occupation time of pedestrians at signal crosswalks(person-second). See \code{\link{T_cross_ped}}
#' @keywords crosswalk signal occupied space pedestrian
#' @seealso \code{\link{TS_cross_ped}}, \code{\link{T_cross_ped}}
#' @export M_cross_ped
#' @examples
M_cross_ped <- function(TS = NULL, TT = NULL){
if (TS > 0 & TT > 0){m <- TS / TT}
else {m <- 'Error : [TS], [TT] must be positive. Please check that.'}
m
}
M_cross_ped(TS = 3000, T = 2134)
M_cross_ped(TS = 3000, T = 253)
M_cross_ped(TS = 100, T = 253)
M_cross_ped(TS = 2000, T = 253)
M_cross_ped(TS = 1200, T = 253)
M_cross_ped(TS = 1000, T = 253)
M_cross_ped(TS = 900, T = 253)
M_cross_ped(TS = 800, T = 253)
#'     It based on door opening time and passenger boarding and disembarking time.
#'     It follows <Table 13-7> in KHCM(2013), p.597.
#' @param type Bus type. Choose one from: \code{'city'}, \code{'seat'}
#' @param std_psg Presence of standing passengers. Choose one from: \code{'yes'}, \code{'no'}
#' @param pay Payment method with or without change. Choose one from: \code{'card'}, \code{'cash_change'}, \code{'cash_no_change'}
#' @export t_D bus stop time
#' @seealso \code{\link{t_c_pt}}, \code{\link{t_ocp_pt}}
#' @examples
#' t_D_pt(type = 'city', std_psg = 'yes', pay = 'card')
#' t_D_pt('seat', 'no', pay = 'cash_no_change')
t_D_pt <- function(type = NULL, std_psg = NULL, pay = NULL){
t_drop_off <- 1.5
if (type == 'city'){
t_door_opening <- 3.0
if (std_psg == 'no'){
if (pay == 'card'){
t_ride <- 3.2
t <- t_drop_off + t_door_opening + t_ride
}
else if (pay == 'cash_no_change'){
t_ride <- 3.0
t <- t_drop_off + t_door_opening + t_ride
}
else if (pay == 'cash_change'){
t_ride <- 5.0
t <- t_drop_off + t_door_opening + t_ride
}
else {t <- 'Error : [pay] must be one of [card], [cash_no_change], [cash_change]. Please check that.'}
}
else if (std_psg == 'yes'){
if (pay == 'card'){
t_ride <- 4.2
t <- t_drop_off + t_door_opening + t_ride
}
else if (pay == 'cash_no_change'){
t_ride <- 4.0
t <- t_drop_off + t_door_opening + t_ride
}
else if (pay == 'cash_change'){
t_ride <- 5.0
t <- t_drop_off + t_door_opening + t_ride
}
else {t <- 'Error : [pay] must be one of [card], [cash_no_change], [cash_change]. Please check that.'}
}
else {t <- 'Error : [std_psg] must be one of [yes], [no]. Please check that.'}
}
else if (type == 'seat'){
t_door_opening <- 3.2
if (std_psg == 'no'){
if (pay == 'card'){
t_ride <- 3.2
t <- t_drop_off + t_door_opening + t_ride
}
else if (pay == 'cash_no_change'){
t_ride <- 3.0
t <- t_drop_off + t_door_opening + t_ride
}
else if (pay == 'cash_change'){
t_ride <- 5.0
t <- t_drop_off + t_door_opening + t_ride
}
else {t <- 'Error : [pay] must be one of [card], [cash_no_change], [cash_change]. Please check that.'}
}
else if (std_psg == 'yes'){
if (pay == 'card'){
t_ride <- 4.2
t <- t_drop_off + t_door_opening + t_ride
}
else if (pay == 'cash_no_change'){
t_ride <- 4.0
t <- t_drop_off + t_door_opening + t_ride
}
else if (pay == 'cash_change'){
t_ride <- 5.0
t <- t_drop_off + t_door_opening + t_ride
}
else {t <- 'Error : [pay] must be one of [card], [cash_no_change], [cash_change]. Please check that.'}
}
else {t <- 'Error : [std_psg] must be one of [yes], [no]. Please check that.'}
}
else {t <- 'Error : [type] must be one of [city], [seat]. Please check that.'}
t
}
t_D_pt(type = 'city', std_psg = 'yes', pay = 'card')
t_D_pt('seat', 'no', pay = 'cash_no_change')
#' Total Clearance Time of Bus at Bus Stop
#'
#' It is the sum of the clearance times in the deceleration section and the acceleration section of bus stop.
#'     It follows <Table 13-8> in KHCM(2013), p.597.
#' @param type Bus type. Choose one from: \code{'standing'}, \code{'seat'}
#' @param bus_bay Presence of bus bay. Choose one from: \code{'yes'}, \code{'no'}
#' @export t_c_pt bus stop time
#' @seealso \code{\link{t_D_pt}}, \code{\link{t_ocp_pt}}
#' @examples
t_c_pt <- function(type = NULL, bus_bay = NULL){
if (type == 'standing'){
if (bus_bay == 'yes'){
acc <- 9.5
dsc <- 7
t <- acc + dsc
}
else if (bus_bay == 'no'){
acc <- 9
dsc <- 7
t <- acc + dsc
}
else {t <- 'Error : [bus_bay] must be one of [yes], [no]. Please check that.'}
}
else if (type == 'seat'){
if (bus_bay == 'yes'){
acc <- 9
dsc <- 7
t <- acc + dsc
}
else if (bus_bay == 'no'){
acc <- 8
dsc <- 7
t <- acc + dsc
}
else {t <- 'Error : [bus_bay] must be one of [yes], [no]. Please check that.'}
}
else {t <- 'Error : [type] must be one of [standing], [seat]. Please check that.'}
t
}
t_c_pt(type = 'standing', bus_bay = 'yes')
t_c_pt(type = 'seat', bus_bay = 'no')
#' Total occupancy time of the bus(s).
#'     It is equal to the sum of the erase time in the deceleration section,
#'     the stop time (stop time at the bus stop),
#'     and the erase time in the acceleration section.
#'     It follows <Figure 13-2> in KHCM(2013), p.590.
#' @param t_D Bus stop time(s)
#' @param t_c Total clearance time of bus at bus stop(s)
#' @export t_ocp_pt Total occupancy time of bus(s)
#' @seealso \code{\link{t_D_pt}}, \code{\link{t_c_pt}}
#' @examples
t_ocp_pt <- function(t_D = NULL, t_c = NULL){
if (t_D >= 0 & t_c >= 0){
t <- t_D + t_c
}
else {t <- 'Error : [t_D], [t_c] must be positive(s). Please check that.'}
t
}
#'     It is equal to the sum of the erase time in the deceleration section,
#'     the stop time (stop time at the bus stop),
#'     and the erase time in the acceleration section.
#'     It follows <Figure 13-2> in KHCM(2013), p.590.
#' @param t_D Bus stop time(s)
#' @param t_c Total clearance time of bus at bus stop(s)
#' @export t_ocp_pt Total occupancy time of bus(s)
#' @seealso \code{\link{t_D_pt}}, \code{\link{t_c_pt}}
#' @examples
#' t_ocp_pt(t_D = 15.5, t_c = 16)
t_ocp_pt <- function(t_D = NULL, t_c = NULL){
if (t_D >= 0 & t_c >= 0){
t <- t_D + t_c
}
else {t <- 'Error : [t_D], [t_c] must be positive(s). Please check that.'}
t
}
#' Compensation Factor for Calculating the Stopping Area Capacity According to the Bus Waiting Ratio
#'
#' A correction factor for calculating the stopping area capacity according to the bus waiting ratio at the bus stop.
#'     - In general, in most urban areas, the maximum realistically possible bus waiting ratio t_R value is observed to be about 25%.
#'     - The recommended value of t_R applied during design is around 10% in urban areas and around 5% in outlying areas.
#'     - It follows <Table 13-9> KHCM(2013), p.599.
#' @param t_R Bus waiting rate(%)
#' @export R_pt
#' @examples
#' R_pt(t_R = 13.29)
R_pt <- function(t_R = NULL){
if (t_R == 1){r <- 0.682}
else if (t_R > 1 & t_R < 2.5){r <- 0.682 + (0.718 - 0.682)/(2.5 - 1) * (t_R - 1)}
else if (t_R == 2.5){r <- 0.718}
else if (t_R > 2.5 & t_R < 5){r <- 0.718 + (0.752 - 0.718)/(5 - 2.5) * (t_R - 2.5)}
else if (t_R == 5){r <- 0.752}
else if (t_R > 5 & t_R < 7.5){r <- 0.752 + (0.776 - 0.752)/(7.5 - 5) * (t_R - 5)}
else if (t_R == 7.5){r <- 0.776}
else if (t_R > 7.5 & t_R < 10){r <- 0.776 + (0.81 - 0.776)/(10 - 7.5) * (t_R - 7.5)}
else if (t_R == 10){r <- 0.81}
else if (t_R > 10 & t_R < 15){r <- 0.81 + (0.84 - 0.81)/(15 - 10) * (t_R - 10)}
else if (t_R == 15){r <- 0.84}
else if (t_R > 15 & t_R < 20){r <- 0.84 + (0.87 - 0.84)/(20 - 15) * (t_R - 15)}
else if (t_R == 20){r <- 0.87}
else if (t_R > 20 & t_R < 25){r <- 0.87 + (0.89 - 0.87)/(25 - 20) * (t_R - 20)}
else if (t_R == 25){r <- 0.89}
else if (t_R > 25 & t_R < 30){r <- 0.89 + (0.91 - 0.89)/(30 - 25) * (t_R - 25)}
else if (t_R == 30){r <- 0.91}
else if (t_R > 30 & t_R < 50){r <- 0.91 + (0.95 - 0.91)/(50 - 30) * (t_R - 30)}
else if (t_R == 50){r <- 0.95}
else {r <- 'Error : [t_R] must be >= 0 and <= 50. Please check that.'}
r
}
R_pt(t_R = 13.29)
#' @seealso
#' @details
#'     - Seated bus : Based on vehicle area of 23.30㎡, standing area of 3.77㎡, 45 seats
#'     - Standing Bus :
#'         - City bus : Based on vehicle area of 26.37㎡, standing area of 7.5㎡, 31 seats
#'         - Circulation bus : Based on vehicle area of 16.05㎡, standing area of 3.48㎡, 24 seats
#' @export LOS_bus_pt \code{'A'}, \code{'B'}, \code{'C'}, \code{'D'}, \code{'E'}, \code{'F'}
#' @examples
#' LOS_bus_pt(type = 'seat', n_psg = 30)
#' LOS_bus_pt(type = 'standing', type2 = 'city', area = 0.33)
LOS_bus_pt <- function(type = NULL, type2 = NULL, n_psg = NULL, area = NULL){
if (type == 'seat'){
if (is.null(n_psg) == FALSE){
if (n_psg >= 0 & n_psg <= 22){los <- 'A'}
else if (n_psg > 22 & n_psg <= 34){los <- 'B'}
else if (n_psg > 34 & n_psg <= 45){los <- 'C'}
else if (n_psg > 45 & n_psg <= 57){los <- 'D'}
else if (n_psg > 57 & n_psg <= 70){los <- 'E'}
else if (n_psg > 70){los <- 'F'}
else {los <- 'Error : [n_psg] must be positive(persons). Please check that.'}
}
else{
if (area > 1.05){los <- 'A'}
else if (area > 0.68 & area <= 1.05){los <- 'B'}
else if (area > 0.51 & area <= 0.68){los <- 'C'}
else if (area > 0.40 & area <= 0.51){los <- 'D'}
else if (area > 0.33 & area <= 0.40){los <- 'E'}
else if (area <= 0.33 & area > 0){los <- 'F'}
else {los <- 'Error : [area] must be positive(㎡/person). Please check that.'}
}
}
else if (type == 'standing'){
if (type2 == 'city'){
if (is.null(n_psg) == FALSE){
if (n_psg >= 0 & n_psg <= 15){los <- 'A'}
else if (n_psg > 15 & n_psg <= 31){los <- 'B'}
else if (n_psg > 31 & n_psg <= 40){los <- 'C'}
else if (n_psg > 40 & n_psg <= 50){los <- 'D'}
else if (n_psg > 50 & n_psg <= 62){los <- 'E'}
else if (n_psg > 62){los <- 'F'}
else {los <- 'Error : [n_psg] must be positive(persons). Please check that.'}
}
else{
if (area > 1.70){los <- 'A'}
else if (area > 0.84 & area <= 1.70){los <- 'B'}
else if (area > 0.65 & area <= 0.84){los <- 'C'}
else if (area > 0.52 & area <= 0.65){los <- 'D'}
else if (area > 0.43 & area <= 0.52){los <- 'E'}
else if (area <= 0.43 & area > 0){los <- 'F'}
else {los <- 'Error : [area] must be positive(㎡/person). Please check that.'}
}
}
else if (type2 == 'circular'){
if (is.null(n_psg) == FALSE){
if (n_psg >= 0 & n_psg <= 12){los <- 'A'}
else if (n_psg > 12 & n_psg <= 24){los <- 'B'}
else if (n_psg > 24 & n_psg <= 31){los <- 'C'}
else if (n_psg > 31 & n_psg <= 38){los <- 'D'}
else if (n_psg > 38 & n_psg <= 48){los <- 'E'}
else if (n_psg > 48){los <- 'F'}
else {los <- 'Error : [n_psg] must be positive(persons). Please check that.'}
}
else{
if (area > 1.33){los <- 'A'}
else if (area > 0.66 & area <= 1.33){los <- 'B'}
else if (area > 0.52 & area <= 0.66){los <- 'C'}
else if (area > 0.41 & area <= 0.52){los <- 'D'}
else if (area > 0.33 & area <= 0.41){los <- 'E'}
else if (area <= 0.33 & area > 0){los <- 'F'}
else {los <- 'Error : [area] must be positive(㎡/person). Please check that.'}
}
}
else {los <- 'Error : [type] must be one of [city] or [circular]. Please check that.'}
}
los
}
LOS_bus_pt(type = 'seat', n_psg = 30)
LOS_bus_pt(type = 'standing', type2 = 'city', area = 0.33)
#' Service Level According to Bus Service Time
#'
#' Service level according to bus service time.
#'     Investigate the daily service time of the bus operating between the starting and ending points.
#'     (The time from the first vehicle to the last vehicle)
#'     It follows <Table 13-6> in KHCM(2013), p.595.
#' @param t Operation time per day(hour)
#' @export LOS_svc_pt \code{'A'}, \code{'B'}, \code{'C'}, \code{'D'}, \code{'E'}, \code{'F'}
#' @examples
#' LOS_svc_pt(t = 19)
LOS_svc_pt <- function(t = NULL){
if (t > 20 & t <= 24){los <- 'A'}
else if (t > 18 & t <= 20){los <- 'B'}
else if (t > 16 & t <= 18){los <- 'C'}
else if (t > 14 & t <= 16){los <- 'D'}
else if (t > 13 & t <= 14){los <- 'E'}
else if (t <= 13 & t > 0){los <- 'F'}
else {los <- 'Error : [t] must be positive(hour). Please check that.'}
los
}
#' Bus capacity processed per hour on one stop(buses/h)
#' It follows <Formula 13-1>, <Formula 13-2> KHCM(2013), p.598, p.599
#' @param flow_type Choose one from: \code{'continuous'}, \code{'interrupted'}
#' @param R Parking surface capacity correction factor. See \code{\link{R_pt}}
#' @param t_c Erasing time(seconds). See \code{\link{t_c_pt}}
#' @param t_D Stop time(seconds). See \code{\link{t_D_pt}}
#' @param g_c_ratio Ratio of valid green time.
#' @seealso \code{\link{R_pt}}, \code{\link{t_c_pt}}, \code{\link{t_D_pt}}
#' @export capa_area_pt
#' @examples
capa_area_pt <- function(flow_type = NULL, R = NULL, t_c = NULL, t_D = NULL, g_c_ratio = NULL){
if (flow_type == 'uninterrupted'){
if (R > 0 & t_c > 0 & t_D > 0){c <- 3600 * R / (t_c + t_D)}
else {c <- 'Error : [R], [t_c], [t_D] must be positive. Please check that.'}
}
else if (flow_type == 'interrupted'){
if (R > 0 & t_c > 0 & t_D > 0 & g_c_ratio >= 0 & g_c_ratio <= 1){c <- g_c_ratio * 3600 * R / (t_c + g_c_ratio * t_D)}
else {c <- 'Error : [R], [t_c], [t_D], [g_c_ratio] must be positive. Please check that.'}
}
else {c <- 'Error : [flow_type] must be one of [uninterrupted], [interrupted]. Please check that.'}
c
}
capa_area_pt(flow_rate = 'continuous', R = 0.93, t_c = 13.2, t_D = 20, g_c_ratio = 0.3)
capa_area_pt(flow_type = 'continuous', R = 0.93, t_c = 13.2, t_D = 20, g_c_ratio = 0.3)
capa_area_pt(flow_type = 'interrupted', R = 0.93, t_c = 13.2, t_D = 20, g_c_ratio = 0.3)
#'     It follows <Formula 13-5> in KHCM(2013), p.601.
#' @param flow_type Choose one from: \code{'uninterrupted'}, \code{'interrupted'}
#' @param R Parking surface capacity correction factor. See \code{\link{R_pt}}
#' @param t_c Erasing time(seconds). See \code{\link{t_c_pt}}
#' @param t_D Stop time(seconds). See \code{\link{t_D_pt}}
#' @param g_c_ratio Ratio of valid green time.
#' @param N Utilization efficiency coefficient according to the number of stopping area. See \code{\link{ue_bs_pt}}
#' @seealso \code{\link{ue_bs_pt}}, \code{\link{R_pt}}, \code{\link{t_c_pt}}, \code{\link{t_D_pt}}
#' @export capa_bs_bus_pt
#' @examples
capa_bs_bus_pt <- function(flow_type = NULL, R = NULL, t_c = NULL, t_D = NULL, g_c_ratio = NULL, N = NULL, P = NULL){
cb <- capa_area_pt(flow_type = flow_type, R = R, t_c = t_c, t_D = t_D, g_c_ratio = g_c_ratio)
if (is.numeric(cb) == TRUE){
if (N > 0){capa <- cb * N}
else {capa <- 'Error : [N] must be positive integer. Please check that.'}
}
else {capa <- cb}
capa
}
capa_bs_bus_pt(flow_type = 'interrupted', R = 0.93, t_c = 13.2, t_D = 20, g_c_ratio = 0.3, N = 1.75)
#' @param R Parking surface capacity correction factor. See \code{\link{R_pt}}
#' @param t_c Erasing time(seconds). See \code{\link{t_c_pt}}
#' @param t_D Stop time(seconds). See \code{\link{t_D_pt}}
#' @param g_c_ratio Ratio of valid green time.
#' @param N Utilization efficiency coefficient according to the number of stopping area. See \code{\link{ue_bs_pt}}
#' @param P Number of passengers by bus(person/bus)
#' @seealso \code{\link{ue_bs_pt}}, \code{\link{R_pt}}, \code{\link{t_c_pt}}, \code{\link{t_D_pt}}
#' @export capa_bs_png_pt
#' @examples
#' capa_bs_png_pt(flow_type = 'interrupted', R = 0.93, t_c = 13.2, t_D = 20, g_c_ratio = 0.3, N = 1.75, P = 20)
capa_bs_png_pt <- function(flow_type = NULL, R = NULL, t_c = NULL, t_D = NULL, g_c_ratio = NULL, N = NULL, P = NULL){
cb <- capa_area_pt(flow_type = flow_type, R = R, t_c = t_c, t_D = t_D, g_c_ratio = g_c_ratio)
if (is.numeric(cb) == TRUE){
if (N > 0){
if (P > 0){capap <- cb * N * P}
else {capap <- 'Error : [P] must be positive integer. Please check that.'}
}
else {capap <- 'Error : [N] must be positive integer. Please check that.'}
}
else {capap <- cb}
capap
}
capa_bs_png_pt(flow_type = 'interrupted', R = 0.93, t_c = 13.2, t_D = 20, g_c_ratio = 0.3, N = 1.75, P = 20)
